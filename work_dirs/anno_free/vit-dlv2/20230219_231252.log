2023-02-19 23:12:52,257 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.2, V11.2.152
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.9.1+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.10.1+cu111
OpenCV: 4.7.0
MMCV: 1.5.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMSegmentation: 0.20.2+e20a1c2
------------------------------------------------------------

2023-02-19 23:12:52,258 - mmseg - INFO - Distributed training: False
2023-02-19 23:12:53,826 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    pretrained='open-mmlab://resnet101_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='MaskClipPlusHead',
        vit=True,
        in_channels=2048,
        channels=512,
        num_classes=59,
        dropout_ratio=0,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
        decode_module_cfg=dict(
            type='ASPPHeadV2', input_transform=None,
            dilations=(6, 12, 18, 24)),
        text_categories=59,
        text_channels=512,
        clip_channels=768,
        text_embeddings_path='pretrain/context_ViT16_clip_text.pth',
        cls_bg=False,
        norm_feat=False,
        clip_unlabeled_cats=[
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
            36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
            53, 54, 55, 56, 57, 58
        ],
        clip_cfg=dict(
            type='VisionTransformer',
            img_size=(224, 224),
            patch_size=16,
            patch_bias=False,
            in_channels=3,
            embed_dims=768,
            num_layers=12,
            num_heads=12,
            mlp_ratio=4,
            out_indices=-1,
            qkv_bias=True,
            drop_rate=0.0,
            attn_drop_rate=0.0,
            drop_path_rate=0.0,
            with_cls_token=True,
            output_cls_token=False,
            norm_cfg=dict(type='LN', eps=1e-06),
            act_cfg=dict(type='GELU'),
            patch_norm=False,
            pre_norm=True,
            final_norm=True,
            return_qkv=True,
            interpolate_mode='bicubic',
            num_fcs=2,
            norm_eval=False),
        clip_weights_path='pretrain/ViT16_clip_weights.pth',
        reset_counter=True,
        start_clip_guided=(1, -1),
        start_self_train=(-1, -1)),
    feed_img_to_decode_head=True,
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'PascalContextDataset59'
data_root = 'data/VOCdevkit/VOC2010/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
img_scale = (520, 520)
crop_size = (480, 480)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='LoadAnnotations',
        reduce_zero_label=True,
        suppress_labels=[
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
            36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
            53, 54, 55, 56, 57, 58
        ]),
    dict(type='Resize', img_scale=(520, 520), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(480, 480), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(480, 480), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(520, 520),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=8,
    workers_per_gpu=4,
    train=dict(
        type='PascalContextDataset59',
        data_root='data/VOCdevkit/VOC2010/',
        img_dir='JPEGImages',
        ann_dir='SegmentationClassContext',
        split='ImageSets/SegmentationContext/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='LoadAnnotations',
                reduce_zero_label=True,
                suppress_labels=[
                    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
                    17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
                    47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58
                ]),
            dict(type='Resize', img_scale=(520, 520), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(480, 480), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(480, 480), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='PascalContextDataset59',
        data_root='data/VOCdevkit/VOC2010/',
        img_dir='JPEGImages',
        ann_dir='SegmentationClassContext',
        split='ImageSets/SegmentationContext/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(520, 520),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='PascalContextDataset59',
        data_root='data/VOCdevkit/VOC2010/',
        img_dir='JPEGImages',
        ann_dir='SegmentationClassContext',
        split='ImageSets/SegmentationContext/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(520, 520),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.00025)
optimizer_config = dict()
lr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=4000)
checkpoint_config = dict(by_epoch=False, interval=2000)
evaluation = dict(interval=2000, metric='mIoU', pre_eval=True)
suppress_labels = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
    40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58
]
find_unused_parameters = True
work_dir = 'work_dirs/anno_free/vit-dlv2'
gpu_ids = range(0, 1)
auto_resume = False

2023-02-19 23:12:53,827 - mmseg - INFO - Set random seed to 1613067933, deterministic: False
2023-02-19 23:12:59,218 - mmseg - INFO - initialize ResNetV1c with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnet101_v1c'}
2023-02-19 23:13:02,016 - mmseg - INFO - Loaded text embeddings from pretrain/context_ViT16_clip_text.pth
2023-02-19 23:13:02,314 - mmseg - INFO - Loaded clip weights from pretrain/ViT16_clip_weights.pth
Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

decode_head.decode_module.aspp_modules.0.conv.weight - torch.Size([512, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.1.conv.weight - torch.Size([512, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.2.conv.weight - torch.Size([512, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.3.conv.weight - torch.Size([512, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip.cls_token - torch.Size([1, 1, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.pos_embed - torch.Size([1, 197, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.patch_embed.projection.weight - torch.Size([768, 3, 16, 16]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.0.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.0.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.0.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.0.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.0.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.0.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.0.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.0.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.0.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.0.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.0.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.0.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.1.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.1.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.1.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.1.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.1.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.1.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.1.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.1.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.1.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.1.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.1.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.1.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.2.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.2.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.2.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.2.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.2.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.2.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.2.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.2.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.2.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.2.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.2.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.2.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.3.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.3.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.3.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.3.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.3.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.3.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.3.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.3.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.3.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.3.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.3.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.3.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.4.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.4.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.4.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.4.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.4.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.4.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.4.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.4.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.4.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.4.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.4.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.4.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.5.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.5.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.5.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.5.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.5.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.5.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.5.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.5.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.5.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.5.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.5.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.5.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.6.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.6.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.6.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.6.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.6.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.6.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.6.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.6.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.6.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.6.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.6.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.6.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.7.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.7.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.7.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.7.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.7.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.7.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.7.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.7.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.7.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.7.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.7.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.7.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.8.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.8.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.8.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.8.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.8.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.8.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.8.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.8.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.8.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.8.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.8.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.8.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.9.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.9.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.9.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.9.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.9.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.9.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.9.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.9.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.9.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.9.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.9.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.9.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.10.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.10.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.10.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.10.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.10.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.10.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.10.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.10.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.10.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.10.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.10.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.10.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.11.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.11.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.11.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.11.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.11.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.11.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.11.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.11.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.11.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.11.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.11.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.layers.11.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.ln0.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.ln0.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.clip.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  

decode_head.proj.weight - torch.Size([512, 768, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusHead  
2023-02-19 23:13:02,399 - mmseg - INFO - EncoderDecoder(
  (backbone): ResNetV1c(
    (stem): Sequential(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): _BatchNormXd(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): _BatchNormXd(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
      (6): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace=True)
    )
    (stem_pool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (8): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (9): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (10): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (11): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (12): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (13): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (14): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (15): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (16): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (17): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (18): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (19): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (20): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (21): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (22): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnet101_v1c'}
  (decode_head): MaskClipPlusHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss()
    (decode_module): ASPPHeadV2(
      input_transform=None, ignore_index=255, align_corners=False
      (aspp_modules): ASPPModuleV2(
        (0): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (1): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (2): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (3): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
    (clip): VisionTransformer(
      (patch_embed): PatchEmbed(
        (adap_padding): AdaptivePadding()
        (projection): Conv2d(3, 768, kernel_size=(16, 16), stride=(16, 16), bias=False)
      )
      (drop_after_pos): Dropout(p=0.0, inplace=False)
      (layers): ModuleList(
        (0): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (1): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (2): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (3): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (4): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (5): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (6): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (7): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (8): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (9): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (10): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (11): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
      )
      (ln0): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
    )
    (proj): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
  )
)
2023-02-19 23:13:02,415 - mmseg - INFO - Loaded 4996 images
2023-02-19 23:13:04,504 - mmseg - INFO - Loaded 5104 images
2023-02-19 23:13:04,504 - mmseg - INFO - Start running, host: root@workspace-p4cxarvku5qr-0, work_dir: /root/sj/MaskCLIP_SegFormer/work_dirs/anno_free/vit-dlv2
2023-02-19 23:13:04,504 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-19 23:13:04,504 - mmseg - INFO - workflow: [('train', 1)], max: 4000 iters
2023-02-19 23:13:04,505 - mmseg - INFO - Checkpoints will be saved to /root/sj/MaskCLIP_SegFormer/work_dirs/anno_free/vit-dlv2 by HardDiskBackend.
2023-02-19 23:13:07,272 - mmseg - INFO - Start clip guided training
2023-02-19 23:13:49,962 - mmseg - INFO - Iter [50/4000]	lr: 4.946e-03, eta: 0:58:47, time: 0.893, data_time: 0.022, memory: 17239, decode.loss_ce: 2.9315, decode.acc_seg: 2.7473, loss: 2.9315
2023-02-19 23:14:31,393 - mmseg - INFO - Iter [100/4000]	lr: 4.891e-03, eta: 0:55:57, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 2.6163, decode.acc_seg: 8.6205, loss: 2.6163
2023-02-19 23:15:12,869 - mmseg - INFO - Iter [150/4000]	lr: 4.835e-03, eta: 0:54:34, time: 0.830, data_time: 0.012, memory: 17239, decode.loss_ce: 2.4976, decode.acc_seg: 12.6837, loss: 2.4976
2023-02-19 23:15:54,335 - mmseg - INFO - Iter [200/4000]	lr: 4.780e-03, eta: 0:53:31, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 2.2774, decode.acc_seg: 17.1258, loss: 2.2774
2023-02-19 23:16:35,773 - mmseg - INFO - Iter [250/4000]	lr: 4.725e-03, eta: 0:52:36, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 2.1083, decode.acc_seg: 19.8421, loss: 2.1083
2023-02-19 23:17:17,220 - mmseg - INFO - Iter [300/4000]	lr: 4.669e-03, eta: 0:51:46, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 2.1261, decode.acc_seg: 22.8894, loss: 2.1261
2023-02-19 23:17:58,652 - mmseg - INFO - Iter [350/4000]	lr: 4.613e-03, eta: 0:50:59, time: 0.829, data_time: 0.013, memory: 17239, decode.loss_ce: 1.9755, decode.acc_seg: 24.1544, loss: 1.9755
2023-02-19 23:18:40,090 - mmseg - INFO - Iter [400/4000]	lr: 4.558e-03, eta: 0:50:13, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.9786, decode.acc_seg: 23.8944, loss: 1.9786
2023-02-19 23:19:21,527 - mmseg - INFO - Iter [450/4000]	lr: 4.502e-03, eta: 0:49:27, time: 0.829, data_time: 0.013, memory: 17239, decode.loss_ce: 1.9942, decode.acc_seg: 25.2189, loss: 1.9942
2023-02-19 23:20:02,956 - mmseg - INFO - Iter [500/4000]	lr: 4.446e-03, eta: 0:48:43, time: 0.829, data_time: 0.013, memory: 17239, decode.loss_ce: 1.8986, decode.acc_seg: 26.1138, loss: 1.8986
2023-02-19 23:20:44,402 - mmseg - INFO - Iter [550/4000]	lr: 4.390e-03, eta: 0:47:59, time: 0.829, data_time: 0.013, memory: 17239, decode.loss_ce: 1.8262, decode.acc_seg: 26.6126, loss: 1.8262
2023-02-19 23:21:25,834 - mmseg - INFO - Iter [600/4000]	lr: 4.334e-03, eta: 0:47:16, time: 0.829, data_time: 0.013, memory: 17239, decode.loss_ce: 1.7943, decode.acc_seg: 26.5244, loss: 1.7943
2023-02-19 23:22:09,575 - mmseg - INFO - Iter [650/4000]	lr: 4.278e-03, eta: 0:46:45, time: 0.875, data_time: 0.059, memory: 17239, decode.loss_ce: 1.7994, decode.acc_seg: 26.9847, loss: 1.7994
2023-02-19 23:22:50,952 - mmseg - INFO - Iter [700/4000]	lr: 4.222e-03, eta: 0:46:00, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.7560, decode.acc_seg: 28.3268, loss: 1.7560
2023-02-19 23:23:32,390 - mmseg - INFO - Iter [750/4000]	lr: 4.166e-03, eta: 0:45:17, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.8195, decode.acc_seg: 28.4955, loss: 1.8195
2023-02-19 23:24:13,838 - mmseg - INFO - Iter [800/4000]	lr: 4.110e-03, eta: 0:44:34, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.7590, decode.acc_seg: 28.1281, loss: 1.7590
2023-02-19 23:24:55,330 - mmseg - INFO - Iter [850/4000]	lr: 4.053e-03, eta: 0:43:51, time: 0.830, data_time: 0.012, memory: 17239, decode.loss_ce: 1.7066, decode.acc_seg: 29.6152, loss: 1.7066
2023-02-19 23:25:36,768 - mmseg - INFO - Iter [900/4000]	lr: 3.997e-03, eta: 0:43:08, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.6873, decode.acc_seg: 27.7728, loss: 1.6873
2023-02-19 23:26:18,230 - mmseg - INFO - Iter [950/4000]	lr: 3.940e-03, eta: 0:42:25, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.7261, decode.acc_seg: 29.2961, loss: 1.7261
2023-02-19 23:26:59,718 - mmseg - INFO - Exp name: maskclip_plus_vit16_deeplabv2_r101-d8_480x480_4k_pascal_context_59.py
2023-02-19 23:26:59,718 - mmseg - INFO - Iter [1000/4000]	lr: 3.883e-03, eta: 0:41:43, time: 0.830, data_time: 0.012, memory: 17239, decode.loss_ce: 1.7120, decode.acc_seg: 27.6621, loss: 1.7120
2023-02-19 23:27:41,201 - mmseg - INFO - Iter [1050/4000]	lr: 3.827e-03, eta: 0:41:00, time: 0.830, data_time: 0.013, memory: 17239, decode.loss_ce: 1.7364, decode.acc_seg: 30.1820, loss: 1.7364
2023-02-19 23:28:22,660 - mmseg - INFO - Iter [1100/4000]	lr: 3.770e-03, eta: 0:40:18, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.6941, decode.acc_seg: 29.6704, loss: 1.6941
2023-02-19 23:29:04,109 - mmseg - INFO - Iter [1150/4000]	lr: 3.713e-03, eta: 0:39:36, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.7237, decode.acc_seg: 28.9233, loss: 1.7237
2023-02-19 23:29:45,554 - mmseg - INFO - Iter [1200/4000]	lr: 3.656e-03, eta: 0:38:53, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.7701, decode.acc_seg: 30.3932, loss: 1.7701
2023-02-19 23:30:29,334 - mmseg - INFO - Iter [1250/4000]	lr: 3.599e-03, eta: 0:38:16, time: 0.876, data_time: 0.059, memory: 17239, decode.loss_ce: 1.6754, decode.acc_seg: 29.5798, loss: 1.6754
2023-02-19 23:31:10,672 - mmseg - INFO - Iter [1300/4000]	lr: 3.541e-03, eta: 0:37:34, time: 0.827, data_time: 0.012, memory: 17239, decode.loss_ce: 1.6257, decode.acc_seg: 29.1463, loss: 1.6257
2023-02-19 23:31:52,052 - mmseg - INFO - Iter [1350/4000]	lr: 3.484e-03, eta: 0:36:51, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.6519, decode.acc_seg: 30.5635, loss: 1.6519
2023-02-19 23:32:33,437 - mmseg - INFO - Iter [1400/4000]	lr: 3.426e-03, eta: 0:36:09, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.6624, decode.acc_seg: 29.6009, loss: 1.6624
2023-02-19 23:33:14,820 - mmseg - INFO - Iter [1450/4000]	lr: 3.369e-03, eta: 0:35:27, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.6174, decode.acc_seg: 29.7178, loss: 1.6174
2023-02-19 23:33:56,255 - mmseg - INFO - Iter [1500/4000]	lr: 3.311e-03, eta: 0:34:44, time: 0.829, data_time: 0.013, memory: 17239, decode.loss_ce: 1.6741, decode.acc_seg: 30.1789, loss: 1.6741
2023-02-19 23:34:37,659 - mmseg - INFO - Iter [1550/4000]	lr: 3.253e-03, eta: 0:34:02, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.6227, decode.acc_seg: 30.0501, loss: 1.6227
2023-02-19 23:35:19,082 - mmseg - INFO - Iter [1600/4000]	lr: 3.195e-03, eta: 0:33:20, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.6708, decode.acc_seg: 30.4407, loss: 1.6708
2023-02-19 23:36:00,520 - mmseg - INFO - Iter [1650/4000]	lr: 3.137e-03, eta: 0:32:38, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.6322, decode.acc_seg: 31.0632, loss: 1.6322
2023-02-19 23:36:41,966 - mmseg - INFO - Iter [1700/4000]	lr: 3.079e-03, eta: 0:31:56, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5741, decode.acc_seg: 30.7495, loss: 1.5741
2023-02-19 23:37:23,430 - mmseg - INFO - Iter [1750/4000]	lr: 3.021e-03, eta: 0:31:14, time: 0.829, data_time: 0.013, memory: 17239, decode.loss_ce: 1.6323, decode.acc_seg: 31.6416, loss: 1.6323
2023-02-19 23:38:04,904 - mmseg - INFO - Iter [1800/4000]	lr: 2.962e-03, eta: 0:30:32, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.6163, decode.acc_seg: 33.2193, loss: 1.6163
2023-02-19 23:38:46,378 - mmseg - INFO - Iter [1850/4000]	lr: 2.904e-03, eta: 0:29:50, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.6010, decode.acc_seg: 30.8286, loss: 1.6010
2023-02-19 23:39:30,191 - mmseg - INFO - Iter [1900/4000]	lr: 2.845e-03, eta: 0:29:11, time: 0.876, data_time: 0.060, memory: 17239, decode.loss_ce: 1.5456, decode.acc_seg: 31.4286, loss: 1.5456
2023-02-19 23:40:11,598 - mmseg - INFO - Iter [1950/4000]	lr: 2.786e-03, eta: 0:28:29, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.6066, decode.acc_seg: 32.4771, loss: 1.6066
2023-02-19 23:40:53,030 - mmseg - INFO - Saving checkpoint at 2000 iterations
2023-02-19 23:40:54,787 - mmseg - INFO - Exp name: maskclip_plus_vit16_deeplabv2_r101-d8_480x480_4k_pascal_context_59.py
2023-02-19 23:40:54,787 - mmseg - INFO - Iter [2000/4000]	lr: 2.727e-03, eta: 0:27:49, time: 0.864, data_time: 0.012, memory: 17239, decode.loss_ce: 1.6240, decode.acc_seg: 32.7757, loss: 1.6240
2023-02-19 23:58:15,320 - mmseg - INFO - per class results:
2023-02-19 23:58:15,323 - mmseg - INFO - 
+-------------+-------+-------+-------+
|    Class    |  IoU  |  Acc  |  Prec |
+-------------+-------+-------+-------+
|  aeroplane  | 38.59 | 95.07 | 39.38 |
|     bag     |  0.0  |  0.0  |  0.0  |
|     bed     |  8.12 | 24.29 | 10.88 |
|  bedclothes |  9.6  | 10.56 | 51.24 |
|    bench    |  0.0  |  0.0  |  0.0  |
|   bicycle   | 53.02 | 88.48 | 56.95 |
|     bird    | 63.88 | 91.56 | 67.88 |
|     boat    | 36.23 | 75.76 | 40.99 |
|     book    |  0.0  |  0.0  |  nan  |
|    bottle   | 62.06 | 79.34 | 74.02 |
|   building  | 14.18 | 14.56 | 84.26 |
|     bus     | 73.71 | 88.61 | 81.43 |
|   cabinet   |  7.42 | 20.47 | 10.43 |
|     car     |  68.0 | 91.22 | 72.76 |
|     cat     | 78.01 | 94.24 | 81.91 |
|   ceiling   |  29.0 | 71.74 | 32.73 |
|    chair    | 24.19 | 31.99 | 49.82 |
|    cloth    |  6.04 |  29.5 |  7.05 |
|   computer  |  4.79 | 15.47 |  6.48 |
|     cow     | 60.72 | 82.57 | 69.65 |
|     cup     |  0.51 |  0.6  |  3.37 |
|   curtain   | 25.57 | 36.37 | 46.27 |
|     dog     | 74.33 | 88.07 | 82.66 |
|     door    |  8.17 | 51.85 |  8.84 |
|    fence    | 15.63 | 17.75 | 56.69 |
|    floor    |  40.1 | 56.21 | 58.31 |
|    flower   |  16.7 | 35.25 | 24.09 |
|     food    |  8.24 | 83.51 |  8.38 |
|    grass    |  62.7 | 75.83 | 78.36 |
|    ground   | 26.85 | 46.36 | 38.95 |
|    horse    | 58.37 | 87.07 | 63.91 |
|   keyboard  | 21.12 |  21.7 | 88.71 |
|    light    | 15.31 | 46.48 | 18.59 |
|  motorbike  | 59.96 | 82.14 | 68.94 |
|   mountain  | 32.01 | 50.26 | 46.85 |
|    mouse    |  0.0  |  0.0  |  nan  |
|    person   | 50.51 | 56.02 | 83.72 |
|    plate    |  0.0  |  0.0  |  0.12 |
|   platform  |  0.0  |  0.0  |  nan  |
| pottedplant | 33.28 | 69.36 | 39.02 |
|     road    | 38.01 | 51.29 | 59.48 |
|     rock    | 26.09 | 59.08 | 31.85 |
|    sheep    |  65.0 | 87.34 | 71.77 |
|   shelves   |  0.24 |  0.24 | 30.98 |
|   sidewalk  | 10.38 | 60.69 | 11.13 |
|     sign    | 16.53 | 19.45 | 52.43 |
|     sky     | 61.79 | 64.25 | 94.18 |
|     snow    | 14.93 |  15.6 | 77.73 |
|     sofa    | 36.27 | 47.05 |  61.3 |
|    table    | 14.68 | 45.15 | 17.87 |
|    track    |  0.0  |  0.0  |  nan  |
|    train    | 46.38 | 86.29 | 50.07 |
|     tree    | 48.85 |  55.7 | 79.89 |
|    truck    |  7.81 |  9.5  | 30.49 |
|  tvmonitor  | 48.04 |  58.0 | 73.67 |
|     wall    | 32.43 | 41.46 | 59.84 |
|    water    | 63.98 | 73.07 | 83.71 |
|    window   | 13.49 | 15.97 | 46.43 |
|     wood    |  5.95 |  39.7 |  6.54 |
+-------------+-------+-------+-------+
2023-02-19 23:58:15,324 - mmseg - INFO - Summary:
2023-02-19 23:58:15,324 - mmseg - INFO - 
+-------+-------+-------+-------+
|  aAcc |  mIoU |  mAcc | mPrec |
+-------+-------+-------+-------+
| 56.85 | 29.45 | 46.44 | 47.15 |
+-------+-------+-------+-------+
2023-02-19 23:58:15,336 - mmseg - INFO - Exp name: maskclip_plus_vit16_deeplabv2_r101-d8_480x480_4k_pascal_context_59.py
2023-02-19 23:58:15,336 - mmseg - INFO - Iter(val) [5104]	aAcc: 0.5685, mIoU: 0.2945, mAcc: 0.4644, mPrec: 0.4715, IoU.aeroplane: 0.3859, IoU.bag: 0.0000, IoU.bed: 0.0812, IoU.bedclothes: 0.0960, IoU.bench: 0.0000, IoU.bicycle: 0.5302, IoU.bird: 0.6388, IoU.boat: 0.3623, IoU.book: 0.0000, IoU.bottle: 0.6206, IoU.building: 0.1418, IoU.bus: 0.7371, IoU.cabinet: 0.0742, IoU.car: 0.6800, IoU.cat: 0.7801, IoU.ceiling: 0.2900, IoU.chair: 0.2419, IoU.cloth: 0.0604, IoU.computer: 0.0479, IoU.cow: 0.6072, IoU.cup: 0.0051, IoU.curtain: 0.2557, IoU.dog: 0.7433, IoU.door: 0.0817, IoU.fence: 0.1563, IoU.floor: 0.4010, IoU.flower: 0.1670, IoU.food: 0.0824, IoU.grass: 0.6270, IoU.ground: 0.2685, IoU.horse: 0.5837, IoU.keyboard: 0.2112, IoU.light: 0.1531, IoU.motorbike: 0.5996, IoU.mountain: 0.3201, IoU.mouse: 0.0000, IoU.person: 0.5051, IoU.plate: 0.0000, IoU.platform: 0.0000, IoU.pottedplant: 0.3328, IoU.road: 0.3801, IoU.rock: 0.2609, IoU.sheep: 0.6500, IoU.shelves: 0.0024, IoU.sidewalk: 0.1038, IoU.sign: 0.1653, IoU.sky: 0.6179, IoU.snow: 0.1493, IoU.sofa: 0.3627, IoU.table: 0.1468, IoU.track: 0.0000, IoU.train: 0.4638, IoU.tree: 0.4885, IoU.truck: 0.0781, IoU.tvmonitor: 0.4804, IoU.wall: 0.3243, IoU.water: 0.6398, IoU.window: 0.1349, IoU.wood: 0.0595, Acc.aeroplane: 0.9507, Acc.bag: 0.0000, Acc.bed: 0.2429, Acc.bedclothes: 0.1056, Acc.bench: 0.0000, Acc.bicycle: 0.8848, Acc.bird: 0.9156, Acc.boat: 0.7576, Acc.book: 0.0000, Acc.bottle: 0.7934, Acc.building: 0.1456, Acc.bus: 0.8861, Acc.cabinet: 0.2047, Acc.car: 0.9122, Acc.cat: 0.9424, Acc.ceiling: 0.7174, Acc.chair: 0.3199, Acc.cloth: 0.2950, Acc.computer: 0.1547, Acc.cow: 0.8257, Acc.cup: 0.0060, Acc.curtain: 0.3637, Acc.dog: 0.8807, Acc.door: 0.5185, Acc.fence: 0.1775, Acc.floor: 0.5621, Acc.flower: 0.3525, Acc.food: 0.8351, Acc.grass: 0.7583, Acc.ground: 0.4636, Acc.horse: 0.8707, Acc.keyboard: 0.2170, Acc.light: 0.4648, Acc.motorbike: 0.8214, Acc.mountain: 0.5026, Acc.mouse: 0.0000, Acc.person: 0.5602, Acc.plate: 0.0000, Acc.platform: 0.0000, Acc.pottedplant: 0.6936, Acc.road: 0.5129, Acc.rock: 0.5908, Acc.sheep: 0.8734, Acc.shelves: 0.0024, Acc.sidewalk: 0.6069, Acc.sign: 0.1945, Acc.sky: 0.6425, Acc.snow: 0.1560, Acc.sofa: 0.4705, Acc.table: 0.4515, Acc.track: 0.0000, Acc.train: 0.8629, Acc.tree: 0.5570, Acc.truck: 0.0950, Acc.tvmonitor: 0.5800, Acc.wall: 0.4146, Acc.water: 0.7307, Acc.window: 0.1597, Acc.wood: 0.3970, Prec.aeroplane: 0.3938, Prec.bag: 0.0000, Prec.bed: 0.1088, Prec.bedclothes: 0.5124, Prec.bench: 0.0000, Prec.bicycle: 0.5695, Prec.bird: 0.6788, Prec.boat: 0.4099, Prec.book: nan, Prec.bottle: 0.7402, Prec.building: 0.8426, Prec.bus: 0.8143, Prec.cabinet: 0.1043, Prec.car: 0.7276, Prec.cat: 0.8191, Prec.ceiling: 0.3273, Prec.chair: 0.4982, Prec.cloth: 0.0705, Prec.computer: 0.0648, Prec.cow: 0.6965, Prec.cup: 0.0337, Prec.curtain: 0.4627, Prec.dog: 0.8266, Prec.door: 0.0884, Prec.fence: 0.5669, Prec.floor: 0.5831, Prec.flower: 0.2409, Prec.food: 0.0838, Prec.grass: 0.7836, Prec.ground: 0.3895, Prec.horse: 0.6391, Prec.keyboard: 0.8871, Prec.light: 0.1859, Prec.motorbike: 0.6894, Prec.mountain: 0.4685, Prec.mouse: nan, Prec.person: 0.8372, Prec.plate: 0.0012, Prec.platform: nan, Prec.pottedplant: 0.3902, Prec.road: 0.5948, Prec.rock: 0.3185, Prec.sheep: 0.7177, Prec.shelves: 0.3098, Prec.sidewalk: 0.1113, Prec.sign: 0.5243, Prec.sky: 0.9418, Prec.snow: 0.7773, Prec.sofa: 0.6130, Prec.table: 0.1787, Prec.track: nan, Prec.train: 0.5007, Prec.tree: 0.7989, Prec.truck: 0.3049, Prec.tvmonitor: 0.7367, Prec.wall: 0.5984, Prec.water: 0.8371, Prec.window: 0.4643, Prec.wood: 0.0654
2023-02-19 23:58:56,607 - mmseg - INFO - Iter [2050/4000]	lr: 2.668e-03, eta: 0:43:37, time: 21.636, data_time: 20.823, memory: 17239, decode.loss_ce: 1.5623, decode.acc_seg: 32.4189, loss: 1.5623
2023-02-19 23:59:38,005 - mmseg - INFO - Iter [2100/4000]	lr: 2.609e-03, eta: 0:42:06, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5708, decode.acc_seg: 32.5095, loss: 1.5708
2023-02-20 00:00:19,427 - mmseg - INFO - Iter [2150/4000]	lr: 2.549e-03, eta: 0:40:38, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.6236, decode.acc_seg: 32.9556, loss: 1.6236
2023-02-20 00:01:00,892 - mmseg - INFO - Iter [2200/4000]	lr: 2.489e-03, eta: 0:39:12, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5731, decode.acc_seg: 32.2259, loss: 1.5731
2023-02-20 00:01:42,366 - mmseg - INFO - Iter [2250/4000]	lr: 2.430e-03, eta: 0:37:48, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.6123, decode.acc_seg: 32.9741, loss: 1.6123
2023-02-20 00:02:23,833 - mmseg - INFO - Iter [2300/4000]	lr: 2.370e-03, eta: 0:36:26, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5862, decode.acc_seg: 32.7052, loss: 1.5862
2023-02-20 00:03:05,291 - mmseg - INFO - Iter [2350/4000]	lr: 2.310e-03, eta: 0:35:06, time: 0.829, data_time: 0.013, memory: 17239, decode.loss_ce: 1.6223, decode.acc_seg: 33.1922, loss: 1.6223
2023-02-20 00:03:46,714 - mmseg - INFO - Iter [2400/4000]	lr: 2.249e-03, eta: 0:33:47, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5729, decode.acc_seg: 32.0439, loss: 1.5729
2023-02-20 00:04:28,118 - mmseg - INFO - Iter [2450/4000]	lr: 2.189e-03, eta: 0:32:30, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5890, decode.acc_seg: 31.0804, loss: 1.5890
2023-02-20 00:05:11,857 - mmseg - INFO - Iter [2500/4000]	lr: 2.128e-03, eta: 0:31:15, time: 0.875, data_time: 0.059, memory: 17239, decode.loss_ce: 1.4996, decode.acc_seg: 31.5587, loss: 1.4996
2023-02-20 00:05:53,184 - mmseg - INFO - Iter [2550/4000]	lr: 2.067e-03, eta: 0:30:01, time: 0.827, data_time: 0.011, memory: 17239, decode.loss_ce: 1.5962, decode.acc_seg: 33.6946, loss: 1.5962
2023-02-20 00:06:34,593 - mmseg - INFO - Iter [2600/4000]	lr: 2.006e-03, eta: 0:28:48, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.6360, decode.acc_seg: 32.4345, loss: 1.6360
2023-02-20 00:07:15,973 - mmseg - INFO - Iter [2650/4000]	lr: 1.945e-03, eta: 0:27:35, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5536, decode.acc_seg: 33.3238, loss: 1.5536
2023-02-20 00:07:57,370 - mmseg - INFO - Iter [2700/4000]	lr: 1.883e-03, eta: 0:26:25, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5510, decode.acc_seg: 33.0715, loss: 1.5510
2023-02-20 00:08:38,784 - mmseg - INFO - Iter [2750/4000]	lr: 1.821e-03, eta: 0:25:15, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.4487, decode.acc_seg: 31.8902, loss: 1.4487
2023-02-20 00:09:20,219 - mmseg - INFO - Iter [2800/4000]	lr: 1.759e-03, eta: 0:24:06, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.6286, decode.acc_seg: 32.3886, loss: 1.6286
2023-02-20 00:10:01,668 - mmseg - INFO - Iter [2850/4000]	lr: 1.697e-03, eta: 0:22:58, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5149, decode.acc_seg: 33.6187, loss: 1.5149
2023-02-20 00:10:43,135 - mmseg - INFO - Iter [2900/4000]	lr: 1.634e-03, eta: 0:21:51, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5065, decode.acc_seg: 32.2759, loss: 1.5065
2023-02-20 00:11:24,586 - mmseg - INFO - Iter [2950/4000]	lr: 1.572e-03, eta: 0:20:45, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5410, decode.acc_seg: 32.3520, loss: 1.5410
2023-02-20 00:12:06,052 - mmseg - INFO - Exp name: maskclip_plus_vit16_deeplabv2_r101-d8_480x480_4k_pascal_context_59.py
2023-02-20 00:12:06,053 - mmseg - INFO - Iter [3000/4000]	lr: 1.508e-03, eta: 0:19:40, time: 0.829, data_time: 0.013, memory: 17239, decode.loss_ce: 1.5288, decode.acc_seg: 33.0469, loss: 1.5288
2023-02-20 00:12:47,515 - mmseg - INFO - Iter [3050/4000]	lr: 1.445e-03, eta: 0:18:35, time: 0.829, data_time: 0.013, memory: 17239, decode.loss_ce: 1.5734, decode.acc_seg: 33.4412, loss: 1.5734
2023-02-20 00:13:29,012 - mmseg - INFO - Iter [3100/4000]	lr: 1.381e-03, eta: 0:17:32, time: 0.830, data_time: 0.013, memory: 17239, decode.loss_ce: 1.5890, decode.acc_seg: 34.4088, loss: 1.5890
2023-02-20 00:14:12,737 - mmseg - INFO - Iter [3150/4000]	lr: 1.317e-03, eta: 0:16:29, time: 0.874, data_time: 0.059, memory: 17239, decode.loss_ce: 1.5706, decode.acc_seg: 33.3723, loss: 1.5706
2023-02-20 00:14:54,112 - mmseg - INFO - Iter [3200/4000]	lr: 1.252e-03, eta: 0:15:27, time: 0.827, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5418, decode.acc_seg: 32.7931, loss: 1.5418
2023-02-20 00:15:35,457 - mmseg - INFO - Iter [3250/4000]	lr: 1.187e-03, eta: 0:14:25, time: 0.827, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5015, decode.acc_seg: 32.5299, loss: 1.5015
2023-02-20 00:16:16,789 - mmseg - INFO - Iter [3300/4000]	lr: 1.122e-03, eta: 0:13:24, time: 0.827, data_time: 0.012, memory: 17239, decode.loss_ce: 1.4995, decode.acc_seg: 31.3490, loss: 1.4995
2023-02-20 00:16:58,136 - mmseg - INFO - Iter [3350/4000]	lr: 1.056e-03, eta: 0:12:23, time: 0.827, data_time: 0.012, memory: 17239, decode.loss_ce: 1.4541, decode.acc_seg: 33.3958, loss: 1.4541
2023-02-20 00:17:39,486 - mmseg - INFO - Iter [3400/4000]	lr: 9.899e-04, eta: 0:11:23, time: 0.827, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5299, decode.acc_seg: 33.5657, loss: 1.5299
2023-02-20 00:18:20,846 - mmseg - INFO - Iter [3450/4000]	lr: 9.230e-04, eta: 0:10:24, time: 0.827, data_time: 0.012, memory: 17239, decode.loss_ce: 1.4988, decode.acc_seg: 32.2224, loss: 1.4988
2023-02-20 00:19:02,228 - mmseg - INFO - Iter [3500/4000]	lr: 8.554e-04, eta: 0:09:25, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.4812, decode.acc_seg: 34.1676, loss: 1.4812
2023-02-20 00:19:43,626 - mmseg - INFO - Iter [3550/4000]	lr: 7.872e-04, eta: 0:08:26, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.4624, decode.acc_seg: 33.0087, loss: 1.4624
2023-02-20 00:20:25,011 - mmseg - INFO - Iter [3600/4000]	lr: 7.183e-04, eta: 0:07:28, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5421, decode.acc_seg: 33.4548, loss: 1.5421
2023-02-20 00:21:06,418 - mmseg - INFO - Iter [3650/4000]	lr: 6.484e-04, eta: 0:06:31, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5293, decode.acc_seg: 32.2268, loss: 1.5293
2023-02-20 00:21:47,846 - mmseg - INFO - Iter [3700/4000]	lr: 5.776e-04, eta: 0:05:34, time: 0.829, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5242, decode.acc_seg: 32.1718, loss: 1.5242
2023-02-20 00:22:31,681 - mmseg - INFO - Iter [3750/4000]	lr: 5.056e-04, eta: 0:04:37, time: 0.877, data_time: 0.060, memory: 17239, decode.loss_ce: 1.4851, decode.acc_seg: 34.7625, loss: 1.4851
2023-02-20 00:23:13,047 - mmseg - INFO - Iter [3800/4000]	lr: 4.321e-04, eta: 0:03:41, time: 0.827, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5154, decode.acc_seg: 33.2942, loss: 1.5154
2023-02-20 00:23:54,442 - mmseg - INFO - Iter [3850/4000]	lr: 3.567e-04, eta: 0:02:45, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5058, decode.acc_seg: 33.6953, loss: 1.5058
2023-02-20 00:24:35,831 - mmseg - INFO - Iter [3900/4000]	lr: 2.787e-04, eta: 0:01:50, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5410, decode.acc_seg: 34.3178, loss: 1.5410
2023-02-20 00:25:17,246 - mmseg - INFO - Iter [3950/4000]	lr: 1.966e-04, eta: 0:00:54, time: 0.828, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5409, decode.acc_seg: 34.7911, loss: 1.5409
2023-02-20 00:25:58,632 - mmseg - INFO - Saving checkpoint at 4000 iterations
2023-02-20 00:26:00,362 - mmseg - INFO - Exp name: maskclip_plus_vit16_deeplabv2_r101-d8_480x480_4k_pascal_context_59.py
2023-02-20 00:26:00,362 - mmseg - INFO - Iter [4000/4000]	lr: 1.028e-04, eta: 0:00:00, time: 0.862, data_time: 0.012, memory: 17239, decode.loss_ce: 1.5183, decode.acc_seg: 33.4137, loss: 1.5183
2023-02-20 00:41:39,026 - mmseg - INFO - per class results:
2023-02-20 00:41:39,030 - mmseg - INFO - 
+-------------+-------+-------+-------+
|    Class    |  IoU  |  Acc  |  Prec |
+-------------+-------+-------+-------+
|  aeroplane  | 39.31 | 95.21 |  40.1 |
|     bag     |  0.0  |  0.0  |  0.0  |
|     bed     |  8.59 | 33.16 | 10.38 |
|  bedclothes |  8.11 |  8.92 |  47.4 |
|    bench    |  0.0  |  0.0  |  0.0  |
|   bicycle   |  52.5 | 91.82 | 55.08 |
|     bird    | 62.69 | 94.63 |  65.0 |
|     boat    | 34.56 | 80.62 | 37.69 |
|     book    |  3.16 |  3.18 | 88.12 |
|    bottle   | 62.58 | 80.48 | 73.77 |
|   building  | 16.21 | 16.72 | 84.29 |
|     bus     | 76.01 | 90.59 | 82.53 |
|   cabinet   |  8.91 | 24.32 | 12.32 |
|     car     |  67.7 | 90.29 | 73.02 |
|     cat     | 79.03 | 92.97 | 84.06 |
|   ceiling   | 31.47 |  74.4 | 35.29 |
|    chair    | 30.94 | 44.88 | 49.92 |
|    cloth    |  5.75 | 31.17 |  6.58 |
|   computer  |  5.27 | 21.43 |  6.53 |
|     cow     | 62.72 | 90.47 | 67.16 |
|     cup     |  2.67 |  3.39 | 11.19 |
|   curtain   | 31.83 | 43.17 | 54.79 |
|     dog     | 76.06 | 92.66 | 80.94 |
|     door    |  8.84 | 52.36 |  9.61 |
|    fence    | 18.34 | 21.26 | 57.23 |
|    floor    | 47.15 | 66.49 | 61.85 |
|    flower   | 17.48 | 40.35 | 23.57 |
|     food    |  7.93 | 85.13 |  8.04 |
|    grass    | 63.07 | 75.17 | 79.66 |
|    ground   | 23.92 | 39.92 | 37.37 |
|    horse    | 57.99 | 88.57 | 62.68 |
|   keyboard  | 57.76 | 79.52 | 67.85 |
|    light    | 17.06 | 53.27 | 20.07 |
|  motorbike  | 60.57 | 81.72 | 70.07 |
|   mountain  | 33.17 | 51.31 | 48.41 |
|    mouse    |  0.0  |  0.0  |  0.0  |
|    person   | 45.36 | 49.97 | 83.11 |
|    plate    |  0.09 |  0.11 |  0.82 |
|   platform  |  0.0  |  0.0  |  nan  |
| pottedplant | 35.26 |  72.7 | 40.65 |
|     road    | 40.72 | 59.53 |  56.3 |
|     rock    |  28.9 | 62.66 | 34.91 |
|    sheep    | 68.85 | 87.25 | 76.55 |
|   shelves   |  4.48 |  4.93 | 32.88 |
|   sidewalk  | 12.06 | 59.42 | 13.14 |
|     sign    | 27.03 | 40.39 | 44.98 |
|     sky     | 57.29 | 58.76 | 95.81 |
|     snow    | 40.86 | 50.34 | 68.45 |
|     sofa    | 36.48 | 45.72 | 64.34 |
|    table    |  15.6 | 43.18 | 19.62 |
|    track    |  0.0  |  0.0  |  nan  |
|    train    | 44.17 | 91.34 |  46.1 |
|     tree    | 48.58 | 54.05 | 82.76 |
|    truck    | 10.85 |  24.0 | 16.54 |
|  tvmonitor  | 43.03 | 53.22 |  69.2 |
|     wall    | 33.79 | 43.61 |  60.0 |
|    water    | 64.62 | 71.83 | 86.55 |
|    window   | 17.95 | 22.01 |  49.3 |
|     wood    |  6.86 | 35.72 |  7.83 |
+-------------+-------+-------+-------+
2023-02-20 00:41:39,030 - mmseg - INFO - Summary:
2023-02-20 00:41:39,030 - mmseg - INFO - 
+-------+-------+-------+-------+
|  aAcc |  mIoU |  mAcc | mPrec |
+-------+-------+-------+-------+
| 57.08 | 31.56 | 50.34 | 46.71 |
+-------+-------+-------+-------+
2023-02-20 00:41:39,041 - mmseg - INFO - Exp name: maskclip_plus_vit16_deeplabv2_r101-d8_480x480_4k_pascal_context_59.py
2023-02-20 00:41:39,042 - mmseg - INFO - Iter(val) [5104]	aAcc: 0.5708, mIoU: 0.3156, mAcc: 0.5034, mPrec: 0.4671, IoU.aeroplane: 0.3931, IoU.bag: 0.0000, IoU.bed: 0.0859, IoU.bedclothes: 0.0811, IoU.bench: 0.0000, IoU.bicycle: 0.5250, IoU.bird: 0.6269, IoU.boat: 0.3456, IoU.book: 0.0316, IoU.bottle: 0.6258, IoU.building: 0.1621, IoU.bus: 0.7601, IoU.cabinet: 0.0891, IoU.car: 0.6770, IoU.cat: 0.7903, IoU.ceiling: 0.3147, IoU.chair: 0.3094, IoU.cloth: 0.0575, IoU.computer: 0.0527, IoU.cow: 0.6272, IoU.cup: 0.0267, IoU.curtain: 0.3183, IoU.dog: 0.7606, IoU.door: 0.0884, IoU.fence: 0.1834, IoU.floor: 0.4715, IoU.flower: 0.1748, IoU.food: 0.0793, IoU.grass: 0.6307, IoU.ground: 0.2392, IoU.horse: 0.5799, IoU.keyboard: 0.5776, IoU.light: 0.1706, IoU.motorbike: 0.6057, IoU.mountain: 0.3317, IoU.mouse: 0.0000, IoU.person: 0.4536, IoU.plate: 0.0009, IoU.platform: 0.0000, IoU.pottedplant: 0.3526, IoU.road: 0.4072, IoU.rock: 0.2890, IoU.sheep: 0.6885, IoU.shelves: 0.0448, IoU.sidewalk: 0.1206, IoU.sign: 0.2703, IoU.sky: 0.5729, IoU.snow: 0.4086, IoU.sofa: 0.3648, IoU.table: 0.1560, IoU.track: 0.0000, IoU.train: 0.4417, IoU.tree: 0.4858, IoU.truck: 0.1085, IoU.tvmonitor: 0.4303, IoU.wall: 0.3379, IoU.water: 0.6462, IoU.window: 0.1795, IoU.wood: 0.0686, Acc.aeroplane: 0.9521, Acc.bag: 0.0000, Acc.bed: 0.3316, Acc.bedclothes: 0.0892, Acc.bench: 0.0000, Acc.bicycle: 0.9182, Acc.bird: 0.9463, Acc.boat: 0.8062, Acc.book: 0.0318, Acc.bottle: 0.8048, Acc.building: 0.1672, Acc.bus: 0.9059, Acc.cabinet: 0.2432, Acc.car: 0.9029, Acc.cat: 0.9297, Acc.ceiling: 0.7440, Acc.chair: 0.4488, Acc.cloth: 0.3117, Acc.computer: 0.2143, Acc.cow: 0.9047, Acc.cup: 0.0339, Acc.curtain: 0.4317, Acc.dog: 0.9266, Acc.door: 0.5236, Acc.fence: 0.2126, Acc.floor: 0.6649, Acc.flower: 0.4035, Acc.food: 0.8513, Acc.grass: 0.7517, Acc.ground: 0.3992, Acc.horse: 0.8857, Acc.keyboard: 0.7952, Acc.light: 0.5327, Acc.motorbike: 0.8172, Acc.mountain: 0.5131, Acc.mouse: 0.0000, Acc.person: 0.4997, Acc.plate: 0.0011, Acc.platform: 0.0000, Acc.pottedplant: 0.7270, Acc.road: 0.5953, Acc.rock: 0.6266, Acc.sheep: 0.8725, Acc.shelves: 0.0493, Acc.sidewalk: 0.5942, Acc.sign: 0.4039, Acc.sky: 0.5876, Acc.snow: 0.5034, Acc.sofa: 0.4572, Acc.table: 0.4318, Acc.track: 0.0000, Acc.train: 0.9134, Acc.tree: 0.5405, Acc.truck: 0.2400, Acc.tvmonitor: 0.5322, Acc.wall: 0.4361, Acc.water: 0.7183, Acc.window: 0.2201, Acc.wood: 0.3572, Prec.aeroplane: 0.4010, Prec.bag: 0.0000, Prec.bed: 0.1038, Prec.bedclothes: 0.4740, Prec.bench: 0.0000, Prec.bicycle: 0.5508, Prec.bird: 0.6500, Prec.boat: 0.3769, Prec.book: 0.8812, Prec.bottle: 0.7377, Prec.building: 0.8429, Prec.bus: 0.8253, Prec.cabinet: 0.1232, Prec.car: 0.7302, Prec.cat: 0.8406, Prec.ceiling: 0.3529, Prec.chair: 0.4992, Prec.cloth: 0.0658, Prec.computer: 0.0653, Prec.cow: 0.6716, Prec.cup: 0.1119, Prec.curtain: 0.5479, Prec.dog: 0.8094, Prec.door: 0.0961, Prec.fence: 0.5723, Prec.floor: 0.6185, Prec.flower: 0.2357, Prec.food: 0.0804, Prec.grass: 0.7966, Prec.ground: 0.3737, Prec.horse: 0.6268, Prec.keyboard: 0.6785, Prec.light: 0.2007, Prec.motorbike: 0.7007, Prec.mountain: 0.4841, Prec.mouse: 0.0000, Prec.person: 0.8311, Prec.plate: 0.0082, Prec.platform: nan, Prec.pottedplant: 0.4065, Prec.road: 0.5630, Prec.rock: 0.3491, Prec.sheep: 0.7655, Prec.shelves: 0.3288, Prec.sidewalk: 0.1314, Prec.sign: 0.4498, Prec.sky: 0.9581, Prec.snow: 0.6845, Prec.sofa: 0.6434, Prec.table: 0.1962, Prec.track: nan, Prec.train: 0.4610, Prec.tree: 0.8276, Prec.truck: 0.1654, Prec.tvmonitor: 0.6920, Prec.wall: 0.6000, Prec.water: 0.8655, Prec.window: 0.4930, Prec.wood: 0.0783
