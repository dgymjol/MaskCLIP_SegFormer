{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.2, V11.2.152\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.9.1+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.10.1+cu111\nOpenCV: 4.7.0\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMSegmentation: 0.20.2+e20a1c2", "seed": 1613067933, "exp_name": "maskclip_plus_vit16_deeplabv2_r101-d8_480x480_4k_pascal_context_59.py", "mmseg_version": "0.20.2+e20a1c2", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet101_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet101_v1c'),\n    decode_head=dict(\n        type='MaskClipPlusHead',\n        vit=True,\n        in_channels=2048,\n        channels=512,\n        num_classes=59,\n        dropout_ratio=0,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n        decode_module_cfg=dict(\n            type='ASPPHeadV2',\n            dilations=(6, 12, 18, 24),\n            in_channels=2048,\n            channels=512,\n            num_classes=59,\n            dropout_ratio=0,\n            norm_cfg=dict(type='SyncBN', requires_grad=True),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            init_cfg=None),\n        text_categories=59,\n        text_channels=512,\n        clip_channels=768,\n        text_embeddings_path='pretrain/context_ViT16_clip_text.pth',\n        cls_bg=False,\n        norm_feat=False,\n        clip_unlabeled_cats=[\n            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\n            19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n            36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n            53, 54, 55, 56, 57, 58\n        ],\n        clip_cfg=dict(\n            type='VisionTransformer',\n            img_size=(224, 224),\n            patch_size=16,\n            patch_bias=False,\n            in_channels=3,\n            embed_dims=768,\n            num_layers=12,\n            num_heads=12,\n            mlp_ratio=4,\n            out_indices=-1,\n            qkv_bias=True,\n            drop_rate=0.0,\n            attn_drop_rate=0.0,\n            drop_path_rate=0.0,\n            with_cls_token=True,\n            output_cls_token=False,\n            norm_cfg=dict(type='LN', eps=1e-06),\n            act_cfg=dict(type='GELU'),\n            patch_norm=False,\n            pre_norm=True,\n            final_norm=True,\n            return_qkv=True,\n            interpolate_mode='bicubic',\n            num_fcs=2,\n            norm_eval=False),\n        clip_weights_path='pretrain/ViT16_clip_weights.pth',\n        reset_counter=True,\n        start_clip_guided=(1, -1),\n        start_self_train=(-1, -1)),\n    feed_img_to_decode_head=True,\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'PascalContextDataset59'\ndata_root = 'data/VOCdevkit/VOC2010/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\nimg_scale = (520, 520)\ncrop_size = (480, 480)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        reduce_zero_label=True,\n        suppress_labels=[\n            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\n            19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n            36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n            53, 54, 55, 56, 57, 58\n        ]),\n    dict(type='Resize', img_scale=(520, 520), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(480, 480), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(480, 480), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(520, 520),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=4,\n    train=dict(\n        type='PascalContextDataset59',\n        data_root='data/VOCdevkit/VOC2010/',\n        img_dir='JPEGImages',\n        ann_dir='SegmentationClassContext',\n        split='ImageSets/SegmentationContext/train.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='LoadAnnotations',\n                reduce_zero_label=True,\n                suppress_labels=[\n                    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n                    17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n                    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\n                    47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58\n                ]),\n            dict(type='Resize', img_scale=(520, 520), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(480, 480), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(480, 480), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='PascalContextDataset59',\n        data_root='data/VOCdevkit/VOC2010/',\n        img_dir='JPEGImages',\n        ann_dir='SegmentationClassContext',\n        split='ImageSets/SegmentationContext/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(520, 520),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='PascalContextDataset59',\n        data_root='data/VOCdevkit/VOC2010/',\n        img_dir='JPEGImages',\n        ann_dir='SegmentationClassContext',\n        split='ImageSets/SegmentationContext/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(520, 520),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.00025)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=4000)\ncheckpoint_config = dict(by_epoch=False, interval=2000)\nevaluation = dict(interval=2000, metric='mIoU', pre_eval=True)\nsuppress_labels = [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n    40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58\n]\nfind_unused_parameters = True\nwork_dir = 'work_dirs/anno_free/vit-dlv2'\ngpu_ids = range(0, 1)\nauto_resume = False\nseed = 1613067933\n", "CLASSES": ["aeroplane", "bag", "bed", "bedclothes", "bench", "bicycle", "bird", "boat", "book", "bottle", "building", "bus", "cabinet", "car", "cat", "ceiling", "chair", "cloth", "computer", "cow", "cup", "curtain", "dog", "door", "fence", "floor", "flower", "food", "grass", "ground", "horse", "keyboard", "light", "motorbike", "mountain", "mouse", "person", "plate", "platform", "pottedplant", "road", "rock", "sheep", "shelves", "sidewalk", "sign", "sky", "snow", "sofa", "table", "track", "train", "tree", "truck", "tvmonitor", "wall", "water", "window", "wood"], "PALETTE": [[180, 120, 120], [6, 230, 230], [80, 50, 50], [4, 200, 3], [120, 120, 80], [140, 140, 140], [204, 5, 255], [230, 230, 230], [4, 250, 7], [224, 5, 255], [235, 255, 7], [150, 5, 61], [120, 120, 70], [8, 255, 51], [255, 6, 82], [143, 255, 140], [204, 255, 4], [255, 51, 7], [204, 70, 3], [0, 102, 200], [61, 230, 250], [255, 6, 51], [11, 102, 255], [255, 7, 71], [255, 9, 224], [9, 7, 230], [220, 220, 220], [255, 9, 92], [112, 9, 255], [8, 255, 214], [7, 255, 224], [255, 184, 6], [10, 255, 71], [255, 41, 10], [7, 255, 255], [224, 255, 8], [102, 8, 255], [255, 61, 6], [255, 194, 7], [255, 122, 8], [0, 255, 20], [255, 8, 41], [255, 5, 153], [6, 51, 255], [235, 12, 255], [160, 150, 20], [0, 163, 255], [140, 140, 140], [250, 10, 15], [20, 255, 0], [31, 255, 0], [255, 31, 0], [255, 224, 0], [153, 255, 0], [0, 0, 255], [255, 71, 0], [0, 235, 255], [0, 173, 255], [31, 0, 255]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00495, "memory": 17239, "data_time": 0.02174, "decode.loss_ce": 2.9315, "decode.acc_seg": 2.74729, "loss": 2.9315, "time": 0.89305}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00489, "memory": 17239, "data_time": 0.01194, "decode.loss_ce": 2.61635, "decode.acc_seg": 8.62045, "loss": 2.61635, "time": 0.82861}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00484, "memory": 17239, "data_time": 0.0122, "decode.loss_ce": 2.49758, "decode.acc_seg": 12.68368, "loss": 2.49758, "time": 0.82952}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00478, "memory": 17239, "data_time": 0.01218, "decode.loss_ce": 2.27744, "decode.acc_seg": 17.1258, "loss": 2.27744, "time": 0.82931}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00472, "memory": 17239, "data_time": 0.01227, "decode.loss_ce": 2.10831, "decode.acc_seg": 19.84214, "loss": 2.10831, "time": 0.82876}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00467, "memory": 17239, "data_time": 0.01239, "decode.loss_ce": 2.12611, "decode.acc_seg": 22.88942, "loss": 2.12611, "time": 0.82892}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00461, "memory": 17239, "data_time": 0.01252, "decode.loss_ce": 1.97553, "decode.acc_seg": 24.15439, "loss": 1.97553, "time": 0.82864}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00456, "memory": 17239, "data_time": 0.0125, "decode.loss_ce": 1.97859, "decode.acc_seg": 23.89443, "loss": 1.97859, "time": 0.82876}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.0045, "memory": 17239, "data_time": 0.01264, "decode.loss_ce": 1.99425, "decode.acc_seg": 25.21886, "loss": 1.99425, "time": 0.82873}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00445, "memory": 17239, "data_time": 0.01264, "decode.loss_ce": 1.89863, "decode.acc_seg": 26.11384, "loss": 1.89863, "time": 0.82857}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00439, "memory": 17239, "data_time": 0.0127, "decode.loss_ce": 1.82622, "decode.acc_seg": 26.61256, "loss": 1.82622, "time": 0.82891}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00433, "memory": 17239, "data_time": 0.01269, "decode.loss_ce": 1.79429, "decode.acc_seg": 26.52441, "loss": 1.79429, "time": 0.82864}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.00428, "memory": 17239, "data_time": 0.05945, "decode.loss_ce": 1.79942, "decode.acc_seg": 26.98466, "loss": 1.79942, "time": 0.87482}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.00422, "memory": 17239, "data_time": 0.01215, "decode.loss_ce": 1.75602, "decode.acc_seg": 28.32684, "loss": 1.75602, "time": 0.82754}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.00417, "memory": 17239, "data_time": 0.01234, "decode.loss_ce": 1.81946, "decode.acc_seg": 28.4955, "loss": 1.81946, "time": 0.82875}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.00411, "memory": 17239, "data_time": 0.01229, "decode.loss_ce": 1.75897, "decode.acc_seg": 28.12807, "loss": 1.75897, "time": 0.82896}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.00405, "memory": 17239, "data_time": 0.01238, "decode.loss_ce": 1.70662, "decode.acc_seg": 29.61524, "loss": 1.70662, "time": 0.82983}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.004, "memory": 17239, "data_time": 0.01225, "decode.loss_ce": 1.68733, "decode.acc_seg": 27.77285, "loss": 1.68733, "time": 0.82876}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 0.00394, "memory": 17239, "data_time": 0.01241, "decode.loss_ce": 1.72608, "decode.acc_seg": 29.29613, "loss": 1.72608, "time": 0.82922}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.00388, "memory": 17239, "data_time": 0.01249, "decode.loss_ce": 1.71197, "decode.acc_seg": 27.66212, "loss": 1.71197, "time": 0.82977}
{"mode": "train", "epoch": 2, "iter": 1050, "lr": 0.00383, "memory": 17239, "data_time": 0.01251, "decode.loss_ce": 1.73638, "decode.acc_seg": 30.18199, "loss": 1.73638, "time": 0.82965}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.00377, "memory": 17239, "data_time": 0.01242, "decode.loss_ce": 1.69408, "decode.acc_seg": 29.67044, "loss": 1.69408, "time": 0.82919}
{"mode": "train", "epoch": 2, "iter": 1150, "lr": 0.00371, "memory": 17239, "data_time": 0.01244, "decode.loss_ce": 1.72371, "decode.acc_seg": 28.92334, "loss": 1.72371, "time": 0.82897}
{"mode": "train", "epoch": 2, "iter": 1200, "lr": 0.00366, "memory": 17239, "data_time": 0.01241, "decode.loss_ce": 1.7701, "decode.acc_seg": 30.39322, "loss": 1.7701, "time": 0.8289}
{"mode": "train", "epoch": 3, "iter": 1250, "lr": 0.0036, "memory": 17239, "data_time": 0.05939, "decode.loss_ce": 1.67545, "decode.acc_seg": 29.57975, "loss": 1.67545, "time": 0.87559}
{"mode": "train", "epoch": 3, "iter": 1300, "lr": 0.00354, "memory": 17239, "data_time": 0.0118, "decode.loss_ce": 1.62568, "decode.acc_seg": 29.14634, "loss": 1.62568, "time": 0.82676}
{"mode": "train", "epoch": 3, "iter": 1350, "lr": 0.00348, "memory": 17239, "data_time": 0.01196, "decode.loss_ce": 1.65192, "decode.acc_seg": 30.56345, "loss": 1.65192, "time": 0.8276}
{"mode": "train", "epoch": 3, "iter": 1400, "lr": 0.00343, "memory": 17239, "data_time": 0.012, "decode.loss_ce": 1.66235, "decode.acc_seg": 29.60087, "loss": 1.66235, "time": 0.82768}
{"mode": "train", "epoch": 3, "iter": 1450, "lr": 0.00337, "memory": 17239, "data_time": 0.01208, "decode.loss_ce": 1.61743, "decode.acc_seg": 29.71784, "loss": 1.61743, "time": 0.82767}
{"mode": "train", "epoch": 3, "iter": 1500, "lr": 0.00331, "memory": 17239, "data_time": 0.01278, "decode.loss_ce": 1.67414, "decode.acc_seg": 30.17885, "loss": 1.67414, "time": 0.82869}
{"mode": "train", "epoch": 3, "iter": 1550, "lr": 0.00325, "memory": 17239, "data_time": 0.01225, "decode.loss_ce": 1.62271, "decode.acc_seg": 30.05008, "loss": 1.62271, "time": 0.82807}
{"mode": "train", "epoch": 3, "iter": 1600, "lr": 0.0032, "memory": 17239, "data_time": 0.01232, "decode.loss_ce": 1.67083, "decode.acc_seg": 30.44069, "loss": 1.67083, "time": 0.82847}
{"mode": "train", "epoch": 3, "iter": 1650, "lr": 0.00314, "memory": 17239, "data_time": 0.01232, "decode.loss_ce": 1.63221, "decode.acc_seg": 31.06322, "loss": 1.63221, "time": 0.82875}
{"mode": "train", "epoch": 3, "iter": 1700, "lr": 0.00308, "memory": 17239, "data_time": 0.01243, "decode.loss_ce": 1.57413, "decode.acc_seg": 30.74949, "loss": 1.57413, "time": 0.82892}
{"mode": "train", "epoch": 3, "iter": 1750, "lr": 0.00302, "memory": 17239, "data_time": 0.0125, "decode.loss_ce": 1.63234, "decode.acc_seg": 31.64163, "loss": 1.63234, "time": 0.82926}
{"mode": "train", "epoch": 3, "iter": 1800, "lr": 0.00296, "memory": 17239, "data_time": 0.01242, "decode.loss_ce": 1.61633, "decode.acc_seg": 33.21934, "loss": 1.61633, "time": 0.82948}
{"mode": "train", "epoch": 3, "iter": 1850, "lr": 0.0029, "memory": 17239, "data_time": 0.01235, "decode.loss_ce": 1.60095, "decode.acc_seg": 30.82855, "loss": 1.60095, "time": 0.82947}
{"mode": "train", "epoch": 4, "iter": 1900, "lr": 0.00284, "memory": 17239, "data_time": 0.05992, "decode.loss_ce": 1.54564, "decode.acc_seg": 31.42856, "loss": 1.54564, "time": 0.87627}
{"mode": "train", "epoch": 4, "iter": 1950, "lr": 0.00279, "memory": 17239, "data_time": 0.01204, "decode.loss_ce": 1.60664, "decode.acc_seg": 32.47711, "loss": 1.60664, "time": 0.82813}
{"mode": "train", "epoch": 4, "iter": 2000, "lr": 0.00273, "memory": 17239, "data_time": 0.01221, "decode.loss_ce": 1.62398, "decode.acc_seg": 32.77572, "loss": 1.62398, "time": 0.86384}
{"mode": "val", "epoch": 4, "iter": 5104, "lr": 0.00273, "aAcc": 0.5685, "mIoU": 0.2945, "mAcc": 0.4644, "mPrec": 0.4715, "IoU.aeroplane": 0.3859, "IoU.bag": 0.0, "IoU.bed": 0.0812, "IoU.bedclothes": 0.096, "IoU.bench": 0.0, "IoU.bicycle": 0.5302, "IoU.bird": 0.6388, "IoU.boat": 0.3623, "IoU.book": 0.0, "IoU.bottle": 0.6206, "IoU.building": 0.1418, "IoU.bus": 0.7371, "IoU.cabinet": 0.0742, "IoU.car": 0.68, "IoU.cat": 0.7801, "IoU.ceiling": 0.29, "IoU.chair": 0.2419, "IoU.cloth": 0.0604, "IoU.computer": 0.0479, "IoU.cow": 0.6072, "IoU.cup": 0.0051, "IoU.curtain": 0.2557, "IoU.dog": 0.7433, "IoU.door": 0.0817, "IoU.fence": 0.1563, "IoU.floor": 0.401, "IoU.flower": 0.167, "IoU.food": 0.0824, "IoU.grass": 0.627, "IoU.ground": 0.2685, "IoU.horse": 0.5837, "IoU.keyboard": 0.2112, "IoU.light": 0.1531, "IoU.motorbike": 0.5996, "IoU.mountain": 0.3201, "IoU.mouse": 0.0, "IoU.person": 0.5051, "IoU.plate": 0.0, "IoU.platform": 0.0, "IoU.pottedplant": 0.3328, "IoU.road": 0.3801, "IoU.rock": 0.2609, "IoU.sheep": 0.65, "IoU.shelves": 0.0024, "IoU.sidewalk": 0.1038, "IoU.sign": 0.1653, "IoU.sky": 0.6179, "IoU.snow": 0.1493, "IoU.sofa": 0.3627, "IoU.table": 0.1468, "IoU.track": 0.0, "IoU.train": 0.4638, "IoU.tree": 0.4885, "IoU.truck": 0.0781, "IoU.tvmonitor": 0.4804, "IoU.wall": 0.3243, "IoU.water": 0.6398, "IoU.window": 0.1349, "IoU.wood": 0.0595, "Acc.aeroplane": 0.9507, "Acc.bag": 0.0, "Acc.bed": 0.2429, "Acc.bedclothes": 0.1056, "Acc.bench": 0.0, "Acc.bicycle": 0.8848, "Acc.bird": 0.9156, "Acc.boat": 0.7576, "Acc.book": 0.0, "Acc.bottle": 0.7934, "Acc.building": 0.1456, "Acc.bus": 0.8861, "Acc.cabinet": 0.2047, "Acc.car": 0.9122, "Acc.cat": 0.9424, "Acc.ceiling": 0.7174, "Acc.chair": 0.3199, "Acc.cloth": 0.295, "Acc.computer": 0.1547, "Acc.cow": 0.8257, "Acc.cup": 0.006, "Acc.curtain": 0.3637, "Acc.dog": 0.8807, "Acc.door": 0.5185, "Acc.fence": 0.1775, "Acc.floor": 0.5621, "Acc.flower": 0.3525, "Acc.food": 0.8351, "Acc.grass": 0.7583, "Acc.ground": 0.4636, "Acc.horse": 0.8707, "Acc.keyboard": 0.217, "Acc.light": 0.4648, "Acc.motorbike": 0.8214, "Acc.mountain": 0.5026, "Acc.mouse": 0.0, "Acc.person": 0.5602, "Acc.plate": 0.0, "Acc.platform": 0.0, "Acc.pottedplant": 0.6936, "Acc.road": 0.5129, "Acc.rock": 0.5908, "Acc.sheep": 0.8734, "Acc.shelves": 0.0024, "Acc.sidewalk": 0.6069, "Acc.sign": 0.1945, "Acc.sky": 0.6425, "Acc.snow": 0.156, "Acc.sofa": 0.4705, "Acc.table": 0.4515, "Acc.track": 0.0, "Acc.train": 0.8629, "Acc.tree": 0.557, "Acc.truck": 0.095, "Acc.tvmonitor": 0.58, "Acc.wall": 0.4146, "Acc.water": 0.7307, "Acc.window": 0.1597, "Acc.wood": 0.397, "Prec.aeroplane": 0.3938, "Prec.bag": 0.0, "Prec.bed": 0.1088, "Prec.bedclothes": 0.5124, "Prec.bench": 0.0, "Prec.bicycle": 0.5695, "Prec.bird": 0.6788, "Prec.boat": 0.4099, "Prec.book": NaN, "Prec.bottle": 0.7402, "Prec.building": 0.8426, "Prec.bus": 0.8143, "Prec.cabinet": 0.1043, "Prec.car": 0.7276, "Prec.cat": 0.8191, "Prec.ceiling": 0.3273, "Prec.chair": 0.4982, "Prec.cloth": 0.0705, "Prec.computer": 0.0648, "Prec.cow": 0.6965, "Prec.cup": 0.0337, "Prec.curtain": 0.4627, "Prec.dog": 0.8266, "Prec.door": 0.0884, "Prec.fence": 0.5669, "Prec.floor": 0.5831, "Prec.flower": 0.2409, "Prec.food": 0.0838, "Prec.grass": 0.7836, "Prec.ground": 0.3895, "Prec.horse": 0.6391, "Prec.keyboard": 0.8871, "Prec.light": 0.1859, "Prec.motorbike": 0.6894, "Prec.mountain": 0.4685, "Prec.mouse": NaN, "Prec.person": 0.8372, "Prec.plate": 0.0012, "Prec.platform": NaN, "Prec.pottedplant": 0.3902, "Prec.road": 0.5948, "Prec.rock": 0.3185, "Prec.sheep": 0.7177, "Prec.shelves": 0.3098, "Prec.sidewalk": 0.1113, "Prec.sign": 0.5243, "Prec.sky": 0.9418, "Prec.snow": 0.7773, "Prec.sofa": 0.613, "Prec.table": 0.1787, "Prec.track": NaN, "Prec.train": 0.5007, "Prec.tree": 0.7989, "Prec.truck": 0.3049, "Prec.tvmonitor": 0.7367, "Prec.wall": 0.5984, "Prec.water": 0.8371, "Prec.window": 0.4643, "Prec.wood": 0.0654}
{"mode": "train", "epoch": 4, "iter": 2050, "lr": 0.00267, "memory": 17239, "data_time": 20.82254, "decode.loss_ce": 1.56232, "decode.acc_seg": 32.41889, "loss": 1.56232, "time": 21.63633}
{"mode": "train", "epoch": 4, "iter": 2100, "lr": 0.00261, "memory": 17239, "data_time": 0.01187, "decode.loss_ce": 1.57078, "decode.acc_seg": 32.50955, "loss": 1.57078, "time": 0.82795}
{"mode": "train", "epoch": 4, "iter": 2150, "lr": 0.00255, "memory": 17239, "data_time": 0.01198, "decode.loss_ce": 1.62362, "decode.acc_seg": 32.95558, "loss": 1.62362, "time": 0.82843}
{"mode": "train", "epoch": 4, "iter": 2200, "lr": 0.00249, "memory": 17239, "data_time": 0.01231, "decode.loss_ce": 1.57312, "decode.acc_seg": 32.22595, "loss": 1.57312, "time": 0.82931}
{"mode": "train", "epoch": 4, "iter": 2250, "lr": 0.00243, "memory": 17239, "data_time": 0.01218, "decode.loss_ce": 1.61226, "decode.acc_seg": 32.97412, "loss": 1.61226, "time": 0.82947}
{"mode": "train", "epoch": 4, "iter": 2300, "lr": 0.00237, "memory": 17239, "data_time": 0.01228, "decode.loss_ce": 1.58619, "decode.acc_seg": 32.70522, "loss": 1.58619, "time": 0.82934}
{"mode": "train", "epoch": 4, "iter": 2350, "lr": 0.00231, "memory": 17239, "data_time": 0.01256, "decode.loss_ce": 1.62231, "decode.acc_seg": 33.19222, "loss": 1.62231, "time": 0.82914}
{"mode": "train", "epoch": 4, "iter": 2400, "lr": 0.00225, "memory": 17239, "data_time": 0.01229, "decode.loss_ce": 1.57292, "decode.acc_seg": 32.04391, "loss": 1.57292, "time": 0.82847}
{"mode": "train", "epoch": 4, "iter": 2450, "lr": 0.00219, "memory": 17239, "data_time": 0.0122, "decode.loss_ce": 1.589, "decode.acc_seg": 31.08041, "loss": 1.589, "time": 0.82807}
{"mode": "train", "epoch": 5, "iter": 2500, "lr": 0.00213, "memory": 17239, "data_time": 0.05915, "decode.loss_ce": 1.49956, "decode.acc_seg": 31.55873, "loss": 1.49956, "time": 0.87477}
{"mode": "train", "epoch": 5, "iter": 2550, "lr": 0.00207, "memory": 17239, "data_time": 0.01145, "decode.loss_ce": 1.59621, "decode.acc_seg": 33.6946, "loss": 1.59621, "time": 0.82653}
{"mode": "train", "epoch": 5, "iter": 2600, "lr": 0.00201, "memory": 17239, "data_time": 0.01164, "decode.loss_ce": 1.63603, "decode.acc_seg": 32.43451, "loss": 1.63603, "time": 0.82817}
{"mode": "train", "epoch": 5, "iter": 2650, "lr": 0.00194, "memory": 17239, "data_time": 0.01175, "decode.loss_ce": 1.55355, "decode.acc_seg": 33.32377, "loss": 1.55355, "time": 0.82761}
{"mode": "train", "epoch": 5, "iter": 2700, "lr": 0.00188, "memory": 17239, "data_time": 0.01182, "decode.loss_ce": 1.55097, "decode.acc_seg": 33.0715, "loss": 1.55097, "time": 0.82792}
{"mode": "train", "epoch": 5, "iter": 2750, "lr": 0.00182, "memory": 17239, "data_time": 0.01199, "decode.loss_ce": 1.44871, "decode.acc_seg": 31.89021, "loss": 1.44871, "time": 0.82829}
{"mode": "train", "epoch": 5, "iter": 2800, "lr": 0.00176, "memory": 17239, "data_time": 0.01198, "decode.loss_ce": 1.62857, "decode.acc_seg": 32.38864, "loss": 1.62857, "time": 0.82868}
{"mode": "train", "epoch": 5, "iter": 2850, "lr": 0.0017, "memory": 17239, "data_time": 0.01232, "decode.loss_ce": 1.51494, "decode.acc_seg": 33.61872, "loss": 1.51494, "time": 0.82898}
{"mode": "train", "epoch": 5, "iter": 2900, "lr": 0.00163, "memory": 17239, "data_time": 0.0125, "decode.loss_ce": 1.50653, "decode.acc_seg": 32.2759, "loss": 1.50653, "time": 0.82934}
{"mode": "train", "epoch": 5, "iter": 2950, "lr": 0.00157, "memory": 17239, "data_time": 0.01249, "decode.loss_ce": 1.54102, "decode.acc_seg": 32.35201, "loss": 1.54102, "time": 0.829}
{"mode": "train", "epoch": 5, "iter": 3000, "lr": 0.00151, "memory": 17239, "data_time": 0.01269, "decode.loss_ce": 1.52882, "decode.acc_seg": 33.04693, "loss": 1.52882, "time": 0.82933}
{"mode": "train", "epoch": 5, "iter": 3050, "lr": 0.00144, "memory": 17239, "data_time": 0.01256, "decode.loss_ce": 1.57338, "decode.acc_seg": 33.44121, "loss": 1.57338, "time": 0.82925}
{"mode": "train", "epoch": 5, "iter": 3100, "lr": 0.00138, "memory": 17239, "data_time": 0.0128, "decode.loss_ce": 1.58898, "decode.acc_seg": 34.40876, "loss": 1.58898, "time": 0.82994}
{"mode": "train", "epoch": 6, "iter": 3150, "lr": 0.00132, "memory": 17239, "data_time": 0.0592, "decode.loss_ce": 1.57055, "decode.acc_seg": 33.37231, "loss": 1.57055, "time": 0.87448}
{"mode": "train", "epoch": 6, "iter": 3200, "lr": 0.00125, "memory": 17239, "data_time": 0.01204, "decode.loss_ce": 1.54177, "decode.acc_seg": 32.79307, "loss": 1.54177, "time": 0.82749}
{"mode": "train", "epoch": 6, "iter": 3250, "lr": 0.00119, "memory": 17239, "data_time": 0.01179, "decode.loss_ce": 1.50146, "decode.acc_seg": 32.5299, "loss": 1.50146, "time": 0.82691}
{"mode": "train", "epoch": 6, "iter": 3300, "lr": 0.00112, "memory": 17239, "data_time": 0.01172, "decode.loss_ce": 1.49948, "decode.acc_seg": 31.34904, "loss": 1.49948, "time": 0.82663}
{"mode": "train", "epoch": 6, "iter": 3350, "lr": 0.00106, "memory": 17239, "data_time": 0.0119, "decode.loss_ce": 1.4541, "decode.acc_seg": 33.39579, "loss": 1.4541, "time": 0.82692}
{"mode": "train", "epoch": 6, "iter": 3400, "lr": 0.00099, "memory": 17239, "data_time": 0.01181, "decode.loss_ce": 1.52989, "decode.acc_seg": 33.5657, "loss": 1.52989, "time": 0.827}
{"mode": "train", "epoch": 6, "iter": 3450, "lr": 0.00092, "memory": 17239, "data_time": 0.01197, "decode.loss_ce": 1.49881, "decode.acc_seg": 32.22243, "loss": 1.49881, "time": 0.8272}
{"mode": "train", "epoch": 6, "iter": 3500, "lr": 0.00086, "memory": 17239, "data_time": 0.01217, "decode.loss_ce": 1.48121, "decode.acc_seg": 34.16756, "loss": 1.48121, "time": 0.82763}
{"mode": "train", "epoch": 6, "iter": 3550, "lr": 0.00079, "memory": 17239, "data_time": 0.0122, "decode.loss_ce": 1.46242, "decode.acc_seg": 33.00865, "loss": 1.46242, "time": 0.82796}
{"mode": "train", "epoch": 6, "iter": 3600, "lr": 0.00072, "memory": 17239, "data_time": 0.0119, "decode.loss_ce": 1.54209, "decode.acc_seg": 33.45483, "loss": 1.54209, "time": 0.8277}
{"mode": "train", "epoch": 6, "iter": 3650, "lr": 0.00065, "memory": 17239, "data_time": 0.01196, "decode.loss_ce": 1.52933, "decode.acc_seg": 32.22684, "loss": 1.52933, "time": 0.82813}
{"mode": "train", "epoch": 6, "iter": 3700, "lr": 0.00058, "memory": 17239, "data_time": 0.01206, "decode.loss_ce": 1.52418, "decode.acc_seg": 32.17184, "loss": 1.52418, "time": 0.82857}
{"mode": "train", "epoch": 7, "iter": 3750, "lr": 0.00051, "memory": 17239, "data_time": 0.06033, "decode.loss_ce": 1.48512, "decode.acc_seg": 34.7625, "loss": 1.48512, "time": 0.87669}
{"mode": "train", "epoch": 7, "iter": 3800, "lr": 0.00043, "memory": 17239, "data_time": 0.01172, "decode.loss_ce": 1.51537, "decode.acc_seg": 33.29416, "loss": 1.51537, "time": 0.82731}
{"mode": "train", "epoch": 7, "iter": 3850, "lr": 0.00036, "memory": 17239, "data_time": 0.01191, "decode.loss_ce": 1.50576, "decode.acc_seg": 33.69526, "loss": 1.50576, "time": 0.8279}
{"mode": "train", "epoch": 7, "iter": 3900, "lr": 0.00028, "memory": 17239, "data_time": 0.01196, "decode.loss_ce": 1.54097, "decode.acc_seg": 34.31775, "loss": 1.54097, "time": 0.82779}
{"mode": "train", "epoch": 7, "iter": 3950, "lr": 0.0002, "memory": 17239, "data_time": 0.01208, "decode.loss_ce": 1.54091, "decode.acc_seg": 34.79109, "loss": 1.54091, "time": 0.82828}
{"mode": "train", "epoch": 7, "iter": 4000, "lr": 0.0001, "memory": 17239, "data_time": 0.01198, "decode.loss_ce": 1.51831, "decode.acc_seg": 33.41372, "loss": 1.51831, "time": 0.86238}
{"mode": "val", "epoch": 7, "iter": 5104, "lr": 0.0001, "aAcc": 0.5708, "mIoU": 0.3156, "mAcc": 0.5034, "mPrec": 0.4671, "IoU.aeroplane": 0.3931, "IoU.bag": 0.0, "IoU.bed": 0.0859, "IoU.bedclothes": 0.0811, "IoU.bench": 0.0, "IoU.bicycle": 0.525, "IoU.bird": 0.6269, "IoU.boat": 0.3456, "IoU.book": 0.0316, "IoU.bottle": 0.6258, "IoU.building": 0.1621, "IoU.bus": 0.7601, "IoU.cabinet": 0.0891, "IoU.car": 0.677, "IoU.cat": 0.7903, "IoU.ceiling": 0.3147, "IoU.chair": 0.3094, "IoU.cloth": 0.0575, "IoU.computer": 0.0527, "IoU.cow": 0.6272, "IoU.cup": 0.0267, "IoU.curtain": 0.3183, "IoU.dog": 0.7606, "IoU.door": 0.0884, "IoU.fence": 0.1834, "IoU.floor": 0.4715, "IoU.flower": 0.1748, "IoU.food": 0.0793, "IoU.grass": 0.6307, "IoU.ground": 0.2392, "IoU.horse": 0.5799, "IoU.keyboard": 0.5776, "IoU.light": 0.1706, "IoU.motorbike": 0.6057, "IoU.mountain": 0.3317, "IoU.mouse": 0.0, "IoU.person": 0.4536, "IoU.plate": 0.0009, "IoU.platform": 0.0, "IoU.pottedplant": 0.3526, "IoU.road": 0.4072, "IoU.rock": 0.289, "IoU.sheep": 0.6885, "IoU.shelves": 0.0448, "IoU.sidewalk": 0.1206, "IoU.sign": 0.2703, "IoU.sky": 0.5729, "IoU.snow": 0.4086, "IoU.sofa": 0.3648, "IoU.table": 0.156, "IoU.track": 0.0, "IoU.train": 0.4417, "IoU.tree": 0.4858, "IoU.truck": 0.1085, "IoU.tvmonitor": 0.4303, "IoU.wall": 0.3379, "IoU.water": 0.6462, "IoU.window": 0.1795, "IoU.wood": 0.0686, "Acc.aeroplane": 0.9521, "Acc.bag": 0.0, "Acc.bed": 0.3316, "Acc.bedclothes": 0.0892, "Acc.bench": 0.0, "Acc.bicycle": 0.9182, "Acc.bird": 0.9463, "Acc.boat": 0.8062, "Acc.book": 0.0318, "Acc.bottle": 0.8048, "Acc.building": 0.1672, "Acc.bus": 0.9059, "Acc.cabinet": 0.2432, "Acc.car": 0.9029, "Acc.cat": 0.9297, "Acc.ceiling": 0.744, "Acc.chair": 0.4488, "Acc.cloth": 0.3117, "Acc.computer": 0.2143, "Acc.cow": 0.9047, "Acc.cup": 0.0339, "Acc.curtain": 0.4317, "Acc.dog": 0.9266, "Acc.door": 0.5236, "Acc.fence": 0.2126, "Acc.floor": 0.6649, "Acc.flower": 0.4035, "Acc.food": 0.8513, "Acc.grass": 0.7517, "Acc.ground": 0.3992, "Acc.horse": 0.8857, "Acc.keyboard": 0.7952, "Acc.light": 0.5327, "Acc.motorbike": 0.8172, "Acc.mountain": 0.5131, "Acc.mouse": 0.0, "Acc.person": 0.4997, "Acc.plate": 0.0011, "Acc.platform": 0.0, "Acc.pottedplant": 0.727, "Acc.road": 0.5953, "Acc.rock": 0.6266, "Acc.sheep": 0.8725, "Acc.shelves": 0.0493, "Acc.sidewalk": 0.5942, "Acc.sign": 0.4039, "Acc.sky": 0.5876, "Acc.snow": 0.5034, "Acc.sofa": 0.4572, "Acc.table": 0.4318, "Acc.track": 0.0, "Acc.train": 0.9134, "Acc.tree": 0.5405, "Acc.truck": 0.24, "Acc.tvmonitor": 0.5322, "Acc.wall": 0.4361, "Acc.water": 0.7183, "Acc.window": 0.2201, "Acc.wood": 0.3572, "Prec.aeroplane": 0.401, "Prec.bag": 0.0, "Prec.bed": 0.1038, "Prec.bedclothes": 0.474, "Prec.bench": 0.0, "Prec.bicycle": 0.5508, "Prec.bird": 0.65, "Prec.boat": 0.3769, "Prec.book": 0.8812, "Prec.bottle": 0.7377, "Prec.building": 0.8429, "Prec.bus": 0.8253, "Prec.cabinet": 0.1232, "Prec.car": 0.7302, "Prec.cat": 0.8406, "Prec.ceiling": 0.3529, "Prec.chair": 0.4992, "Prec.cloth": 0.0658, "Prec.computer": 0.0653, "Prec.cow": 0.6716, "Prec.cup": 0.1119, "Prec.curtain": 0.5479, "Prec.dog": 0.8094, "Prec.door": 0.0961, "Prec.fence": 0.5723, "Prec.floor": 0.6185, "Prec.flower": 0.2357, "Prec.food": 0.0804, "Prec.grass": 0.7966, "Prec.ground": 0.3737, "Prec.horse": 0.6268, "Prec.keyboard": 0.6785, "Prec.light": 0.2007, "Prec.motorbike": 0.7007, "Prec.mountain": 0.4841, "Prec.mouse": 0.0, "Prec.person": 0.8311, "Prec.plate": 0.0082, "Prec.platform": NaN, "Prec.pottedplant": 0.4065, "Prec.road": 0.563, "Prec.rock": 0.3491, "Prec.sheep": 0.7655, "Prec.shelves": 0.3288, "Prec.sidewalk": 0.1314, "Prec.sign": 0.4498, "Prec.sky": 0.9581, "Prec.snow": 0.6845, "Prec.sofa": 0.6434, "Prec.table": 0.1962, "Prec.track": NaN, "Prec.train": 0.461, "Prec.tree": 0.8276, "Prec.truck": 0.1654, "Prec.tvmonitor": 0.692, "Prec.wall": 0.6, "Prec.water": 0.8655, "Prec.window": 0.493, "Prec.wood": 0.0783}
