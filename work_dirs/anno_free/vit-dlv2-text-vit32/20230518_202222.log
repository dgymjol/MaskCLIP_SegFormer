2023-05-18 20:22:23,015 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /usr/local/cuda
NVCC: Build cuda_11.8.r11.8/compiler.31833905_0
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.9.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.10.0+cu111
OpenCV: 4.7.0
MMCV: 1.4.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMSegmentation: 0.20.2+03c38b7
------------------------------------------------------------

2023-05-18 20:22:23,015 - mmseg - INFO - Distributed training: False
2023-05-18 20:22:24,652 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    pretrained='open-mmlab://resnet101_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='MaskClipPlusTextHead',
        vit=True,
        in_channels=2048,
        channels=512,
        num_classes=59,
        dropout_ratio=0,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
        decode_module_cfg=dict(
            type='ASPPHeadV2', input_transform=None,
            dilations=(6, 12, 18, 24)),
        text_categories=59,
        text_channels=512,
        clip_channels=768,
        text_embeddings_path='pretrain/context_ViT16_clip_text.pth',
        text_features_path='pretrain/context_ViT32_clip_text_features.pth',
        tau=1,
        cls_bg=False,
        norm_feat=False,
        clip_unlabeled_cats=[
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
            36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
            53, 54, 55, 56, 57, 58
        ],
        clip_cfg=dict(
            type='VisionTransformer',
            img_size=(224, 224),
            patch_size=16,
            patch_bias=False,
            in_channels=3,
            embed_dims=768,
            num_layers=12,
            num_heads=12,
            mlp_ratio=4,
            out_indices=-1,
            qkv_bias=True,
            drop_rate=0.0,
            attn_drop_rate=0.0,
            drop_path_rate=0.0,
            with_cls_token=True,
            output_cls_token=False,
            norm_cfg=dict(type='LN', eps=1e-06),
            act_cfg=dict(type='GELU'),
            patch_norm=False,
            pre_norm=True,
            final_norm=True,
            return_qkv=True,
            interpolate_mode='bicubic',
            num_fcs=2,
            norm_eval=False),
        clip_weights_path='pretrain/ViT16_clip_weights.pth',
        reset_counter=True,
        start_clip_guided=(1, -1),
        start_self_train=(-1, -1)),
    feed_img_to_decode_head=True,
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'PascalContextDataset59'
data_root = 'data/VOCdevkit/VOC2010/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
img_scale = (520, 520)
crop_size = (480, 480)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='LoadAnnotations',
        reduce_zero_label=True,
        suppress_labels=[
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
            36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
            53, 54, 55, 56, 57, 58
        ]),
    dict(type='Resize', img_scale=(520, 520), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(480, 480), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(480, 480), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(520, 520),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=8,
    workers_per_gpu=4,
    train=dict(
        type='PascalContextDataset59',
        data_root='data/VOCdevkit/VOC2010/',
        img_dir='JPEGImages',
        ann_dir='SegmentationClassContext',
        split='ImageSets/SegmentationContext/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='LoadAnnotations',
                reduce_zero_label=True,
                suppress_labels=[
                    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
                    17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
                    47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58
                ]),
            dict(type='Resize', img_scale=(520, 520), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(480, 480), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(480, 480), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='PascalContextDataset59',
        data_root='data/VOCdevkit/VOC2010/',
        img_dir='JPEGImages',
        ann_dir='SegmentationClassContext',
        split='ImageSets/SegmentationContext/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(520, 520),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='PascalContextDataset59',
        data_root='data/VOCdevkit/VOC2010/',
        img_dir='JPEGImages',
        ann_dir='SegmentationClassContext',
        split='ImageSets/SegmentationContext/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(520, 520),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.00025)
optimizer_config = dict()
lr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=4000)
checkpoint_config = dict(by_epoch=False, interval=2000)
evaluation = dict(interval=2000, metric='mIoU', pre_eval=True)
suppress_labels = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
    40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58
]
find_unused_parameters = True
work_dir = 'work_dirs/anno_free/vit-dlv2-text'
gpu_ids = range(0, 1)
auto_resume = False

2023-05-18 20:22:24,652 - mmseg - INFO - Set random seed to 12289690, deterministic: False
2023-05-18 20:22:33,788 - mmseg - INFO - initialize ResNetV1c with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnet101_v1c'}
2023-05-18 20:22:37,781 - mmseg - INFO - Loaded text embeddings from pretrain/context_ViT16_clip_text.pth
2023-05-18 20:22:38,070 - mmseg - INFO - Loaded clip weights from pretrain/ViT16_clip_weights.pth
Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

decode_head.logit_scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.0.conv.weight - torch.Size([512, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.1.conv.weight - torch.Size([512, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.2.conv.weight - torch.Size([512, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.3.conv.weight - torch.Size([512, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip.cls_token - torch.Size([1, 1, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.pos_embed - torch.Size([1, 197, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.patch_embed.projection.weight - torch.Size([768, 3, 16, 16]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.ln0.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.ln0.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.proj.weight - torch.Size([512, 768, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip_model.positional_embedding - torch.Size([77, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.text_projection - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.logit_scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.class_embedding - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.positional_embedding - torch.Size([50, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.proj - torch.Size([768, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.conv1.weight - torch.Size([768, 3, 32, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.ln_pre.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.ln_pre.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.ln_post.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.ln_post.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.token_embedding.weight - torch.Size([49408, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.ln_final.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.ln_final.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023-05-18 20:22:38,389 - mmseg - INFO - EncoderDecoder(
  (backbone): ResNetV1c(
    (stem): Sequential(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): _BatchNormXd(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): _BatchNormXd(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
      (6): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace=True)
    )
    (stem_pool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (8): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (9): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (10): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (11): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (12): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (13): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (14): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (15): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (16): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (17): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (18): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (19): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (20): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (21): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (22): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnet101_v1c'}
  (decode_head): MaskClipPlusTextHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss()
    (decode_module): ASPPHeadV2(
      input_transform=None, ignore_index=255, align_corners=False
      (aspp_modules): ASPPModuleV2(
        (0): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (1): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (2): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (3): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
    (clip): VisionTransformer(
      (patch_embed): PatchEmbed(
        (adap_padding): AdaptivePadding()
        (projection): Conv2d(3, 768, kernel_size=(16, 16), stride=(16, 16), bias=False)
      )
      (drop_after_pos): Dropout(p=0.0, inplace=False)
      (layers): ModuleList(
        (0): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (1): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (2): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (3): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (4): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (5): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (6): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (7): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (8): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (9): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (10): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (11): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
      )
      (ln0): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
    )
    (proj): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (clip_model): CLIP(
      (visual): VisionTransformer(
        (conv1): Conv2d(3, 768, kernel_size=(32, 32), stride=(32, 32), bias=False)
        (ln_pre): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (transformer): Transformer(
          (resblocks): Sequential(
            (0): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (1): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (2): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (3): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (4): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (5): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (6): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (7): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (8): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (9): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (10): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (11): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
        (ln_post): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      )
      (transformer): Transformer(
        (resblocks): Sequential(
          (0): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (1): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (2): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (3): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (4): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (5): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (6): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (7): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (8): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (9): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (10): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (11): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
)
2023-05-18 20:22:38,479 - mmseg - INFO - Loaded 4996 images
2023-05-18 20:22:40,348 - mmseg - INFO - Loaded 5104 images
2023-05-18 20:22:40,348 - mmseg - INFO - Start running, host: root@workspace-b4viw9u1uynb-0, work_dir: /root/MaskCLIP_SegFormer/work_dirs/anno_free/vit-dlv2-text
2023-05-18 20:22:40,349 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-05-18 20:22:40,349 - mmseg - INFO - workflow: [('train', 1)], max: 4000 iters
2023-05-18 20:22:40,349 - mmseg - INFO - Checkpoints will be saved to /root/MaskCLIP_SegFormer/work_dirs/anno_free/vit-dlv2-text by HardDiskBackend.
2023-05-18 20:22:43,595 - mmseg - INFO - Start clip guided training
2023-05-18 20:23:30,055 - mmseg - INFO - Iter [50/4000]	lr: 4.946e-03, eta: 1:04:36, time: 0.982, data_time: 0.022, memory: 17590, decode.loss_ce: 2.8792, decode.acc_seg: 3.5507, loss: 2.8792
2023-05-18 20:24:15,059 - mmseg - INFO - Iter [100/4000]	lr: 4.891e-03, eta: 1:01:09, time: 0.900, data_time: 0.012, memory: 17590, decode.loss_ce: 2.5648, decode.acc_seg: 10.9272, loss: 2.5648
2023-05-18 20:25:00,057 - mmseg - INFO - Iter [150/4000]	lr: 4.835e-03, eta: 0:59:29, time: 0.900, data_time: 0.012, memory: 17590, decode.loss_ce: 2.4003, decode.acc_seg: 17.1216, loss: 2.4003
2023-05-18 20:25:45,158 - mmseg - INFO - Iter [200/4000]	lr: 4.780e-03, eta: 0:58:19, time: 0.902, data_time: 0.012, memory: 17590, decode.loss_ce: 2.0937, decode.acc_seg: 19.8240, loss: 2.0937
2023-05-18 20:26:30,158 - mmseg - INFO - Iter [250/4000]	lr: 4.725e-03, eta: 0:57:17, time: 0.900, data_time: 0.012, memory: 17590, decode.loss_ce: 2.0331, decode.acc_seg: 24.6147, loss: 2.0331
2023-05-18 20:27:15,157 - mmseg - INFO - Iter [300/4000]	lr: 4.669e-03, eta: 0:56:21, time: 0.900, data_time: 0.012, memory: 17590, decode.loss_ce: 1.9345, decode.acc_seg: 23.6289, loss: 1.9345
2023-05-18 20:28:00,257 - mmseg - INFO - Iter [350/4000]	lr: 4.613e-03, eta: 0:55:29, time: 0.902, data_time: 0.013, memory: 17590, decode.loss_ce: 1.9560, decode.acc_seg: 26.3379, loss: 1.9560
2023-05-18 20:28:45,358 - mmseg - INFO - Iter [400/4000]	lr: 4.558e-03, eta: 0:54:39, time: 0.902, data_time: 0.012, memory: 17590, decode.loss_ce: 1.8417, decode.acc_seg: 27.7057, loss: 1.8417
2023-05-18 20:29:30,458 - mmseg - INFO - Iter [450/4000]	lr: 4.502e-03, eta: 0:53:50, time: 0.902, data_time: 0.013, memory: 17590, decode.loss_ce: 1.7867, decode.acc_seg: 26.3967, loss: 1.7867
2023-05-18 20:30:15,457 - mmseg - INFO - Iter [500/4000]	lr: 4.446e-03, eta: 0:53:01, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.8249, decode.acc_seg: 26.7055, loss: 1.8249
2023-05-18 20:31:00,458 - mmseg - INFO - Iter [550/4000]	lr: 4.390e-03, eta: 0:52:13, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.8144, decode.acc_seg: 27.9714, loss: 1.8144
2023-05-18 20:31:45,457 - mmseg - INFO - Iter [600/4000]	lr: 4.334e-03, eta: 0:51:25, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.8232, decode.acc_seg: 27.4227, loss: 1.8232
2023-05-18 20:32:32,858 - mmseg - INFO - Iter [650/4000]	lr: 4.278e-03, eta: 0:50:50, time: 0.948, data_time: 0.059, memory: 17590, decode.loss_ce: 1.7716, decode.acc_seg: 28.7253, loss: 1.7716
2023-05-18 20:33:17,857 - mmseg - INFO - Iter [700/4000]	lr: 4.222e-03, eta: 0:50:02, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.6691, decode.acc_seg: 27.8562, loss: 1.6691
2023-05-18 20:34:02,858 - mmseg - INFO - Iter [750/4000]	lr: 4.166e-03, eta: 0:49:14, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.7407, decode.acc_seg: 27.5219, loss: 1.7407
2023-05-18 20:34:47,858 - mmseg - INFO - Iter [800/4000]	lr: 4.110e-03, eta: 0:48:27, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.7078, decode.acc_seg: 29.6202, loss: 1.7078
2023-05-18 20:35:32,856 - mmseg - INFO - Iter [850/4000]	lr: 4.053e-03, eta: 0:47:40, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.7977, decode.acc_seg: 29.7593, loss: 1.7977
2023-05-18 20:36:17,856 - mmseg - INFO - Iter [900/4000]	lr: 3.997e-03, eta: 0:46:53, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.6615, decode.acc_seg: 29.3482, loss: 1.6615
2023-05-18 20:37:02,856 - mmseg - INFO - Iter [950/4000]	lr: 3.940e-03, eta: 0:46:07, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.7252, decode.acc_seg: 29.9017, loss: 1.7252
2023-05-18 20:37:47,856 - mmseg - INFO - Exp name: maskclip_plus_vit16_deeplabv2_r101-d8_class_weight_480x480_4k_pascal_context_59.py
2023-05-18 20:37:47,857 - mmseg - INFO - Iter [1000/4000]	lr: 3.883e-03, eta: 0:45:20, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.7090, decode.acc_seg: 30.9095, loss: 1.7090
2023-05-18 20:38:32,856 - mmseg - INFO - Iter [1050/4000]	lr: 3.827e-03, eta: 0:44:34, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.6677, decode.acc_seg: 31.3586, loss: 1.6677
2023-05-18 20:39:17,954 - mmseg - INFO - Iter [1100/4000]	lr: 3.770e-03, eta: 0:43:48, time: 0.902, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5360, decode.acc_seg: 31.0775, loss: 1.5360
2023-05-18 20:40:02,957 - mmseg - INFO - Iter [1150/4000]	lr: 3.713e-03, eta: 0:43:02, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.6566, decode.acc_seg: 30.1050, loss: 1.6566
2023-05-18 20:40:47,957 - mmseg - INFO - Iter [1200/4000]	lr: 3.656e-03, eta: 0:42:16, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.6935, decode.acc_seg: 29.3203, loss: 1.6935
2023-05-18 20:41:35,255 - mmseg - INFO - Iter [1250/4000]	lr: 3.599e-03, eta: 0:41:35, time: 0.946, data_time: 0.059, memory: 17590, decode.loss_ce: 1.6248, decode.acc_seg: 30.3649, loss: 1.6248
2023-05-18 20:42:20,257 - mmseg - INFO - Iter [1300/4000]	lr: 3.541e-03, eta: 0:40:49, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.6535, decode.acc_seg: 30.7865, loss: 1.6535
2023-05-18 20:43:05,257 - mmseg - INFO - Iter [1350/4000]	lr: 3.484e-03, eta: 0:40:03, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.6372, decode.acc_seg: 31.8989, loss: 1.6372
2023-05-18 20:43:50,258 - mmseg - INFO - Iter [1400/4000]	lr: 3.426e-03, eta: 0:39:17, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.6599, decode.acc_seg: 31.5917, loss: 1.6599
2023-05-18 20:44:35,357 - mmseg - INFO - Iter [1450/4000]	lr: 3.369e-03, eta: 0:38:31, time: 0.902, data_time: 0.013, memory: 17590, decode.loss_ce: 1.6104, decode.acc_seg: 32.3690, loss: 1.6104
2023-05-18 20:45:20,356 - mmseg - INFO - Iter [1500/4000]	lr: 3.311e-03, eta: 0:37:45, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5763, decode.acc_seg: 31.9231, loss: 1.5763
2023-05-18 20:46:05,356 - mmseg - INFO - Iter [1550/4000]	lr: 3.253e-03, eta: 0:36:59, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.6286, decode.acc_seg: 31.5961, loss: 1.6286
2023-05-18 20:46:50,357 - mmseg - INFO - Iter [1600/4000]	lr: 3.195e-03, eta: 0:36:14, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.6051, decode.acc_seg: 32.4070, loss: 1.6051
2023-05-18 20:47:35,356 - mmseg - INFO - Iter [1650/4000]	lr: 3.137e-03, eta: 0:35:28, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5655, decode.acc_seg: 31.4859, loss: 1.5655
2023-05-18 20:48:20,357 - mmseg - INFO - Iter [1700/4000]	lr: 3.079e-03, eta: 0:34:42, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5914, decode.acc_seg: 31.0371, loss: 1.5914
2023-05-18 20:49:05,356 - mmseg - INFO - Iter [1750/4000]	lr: 3.021e-03, eta: 0:33:57, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5662, decode.acc_seg: 32.4669, loss: 1.5662
2023-05-18 20:49:50,357 - mmseg - INFO - Iter [1800/4000]	lr: 2.962e-03, eta: 0:33:11, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.6086, decode.acc_seg: 32.3901, loss: 1.6086
2023-05-18 20:50:35,358 - mmseg - INFO - Iter [1850/4000]	lr: 2.904e-03, eta: 0:32:25, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5887, decode.acc_seg: 32.7453, loss: 1.5887
2023-05-18 20:51:22,656 - mmseg - INFO - Iter [1900/4000]	lr: 2.845e-03, eta: 0:31:42, time: 0.946, data_time: 0.059, memory: 17590, decode.loss_ce: 1.6047, decode.acc_seg: 32.4559, loss: 1.6047
2023-05-18 20:52:07,656 - mmseg - INFO - Iter [1950/4000]	lr: 2.786e-03, eta: 0:30:57, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.6084, decode.acc_seg: 33.0766, loss: 1.6084
2023-05-18 20:52:52,654 - mmseg - INFO - Saving checkpoint at 2000 iterations
2023-05-18 20:52:55,118 - mmseg - INFO - Exp name: maskclip_plus_vit16_deeplabv2_r101-d8_class_weight_480x480_4k_pascal_context_59.py
2023-05-18 20:52:55,119 - mmseg - INFO - Iter [2000/4000]	lr: 2.727e-03, eta: 0:30:14, time: 0.949, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5296, decode.acc_seg: 32.9614, loss: 1.5296
2023-05-18 21:16:37,515 - mmseg - INFO - per class results:
2023-05-18 21:16:37,519 - mmseg - INFO - 
+-------------+-------+-------+-------+
|    Class    |  IoU  |  Acc  |  Prec |
+-------------+-------+-------+-------+
|  aeroplane  | 38.95 | 96.51 | 39.51 |
|     bag     |  0.0  |  0.0  | 34.88 |
|     bed     |  8.45 | 33.97 | 10.11 |
|  bedclothes |  5.96 |  6.39 | 46.66 |
|    bench    |  0.0  |  0.0  |  0.0  |
|   bicycle   | 53.82 | 91.31 | 56.73 |
|     bird    | 64.58 | 93.92 |  67.4 |
|     boat    | 36.97 | 85.33 | 39.48 |
|     book    |  0.0  |  0.0  | 100.0 |
|    bottle   | 62.39 | 81.04 | 73.06 |
|   building  | 15.36 | 15.79 | 85.05 |
|     bus     | 75.98 |  91.6 | 81.67 |
|   cabinet   | 10.03 | 25.72 | 14.12 |
|     car     | 66.33 | 91.07 | 70.94 |
|     cat     | 76.39 | 97.12 | 78.15 |
|   ceiling   | 31.55 | 71.79 | 36.01 |
|    chair    |  26.5 | 32.79 | 57.99 |
|    cloth    |  5.79 | 28.08 |  6.79 |
|   computer  |  5.93 | 22.04 |  7.5  |
|     cow     | 68.75 | 85.53 |  77.8 |
|     cup     |  0.9  |  1.05 |  6.29 |
|   curtain   | 28.96 | 36.39 | 58.66 |
|     dog     | 75.23 | 87.75 | 84.06 |
|     door    |  8.57 | 55.03 |  9.21 |
|    fence    | 15.75 | 18.21 | 53.79 |
|    floor    | 44.66 |  65.0 | 58.79 |
|    flower   | 15.41 | 34.05 | 21.97 |
|     food    |  6.61 | 86.56 |  6.68 |
|    grass    | 62.82 | 75.12 | 79.32 |
|    ground   | 24.24 | 43.73 | 35.22 |
|    horse    | 56.24 | 92.54 | 58.91 |
|   keyboard  | 44.74 | 47.51 | 88.46 |
|    light    | 15.96 | 47.71 | 19.34 |
|  motorbike  | 61.44 | 82.44 |  70.7 |
|   mountain  | 33.29 | 46.35 | 54.16 |
|    mouse    |  0.0  |  0.0  |  nan  |
|    person   | 50.47 | 56.69 | 82.13 |
|    plate    |  0.15 |  0.16 |  2.71 |
|   platform  |  0.0  |  0.0  |  0.0  |
| pottedplant | 36.48 | 77.18 | 40.89 |
|     road    | 40.44 | 57.48 |  57.7 |
|     rock    | 28.27 | 64.15 | 33.57 |
|    sheep    | 71.87 | 87.71 | 79.91 |
|   shelves   |  0.16 |  0.16 | 21.71 |
|   sidewalk  | 11.44 | 60.08 | 12.38 |
|     sign    | 23.97 | 36.02 | 41.75 |
|     sky     | 56.38 | 57.33 | 97.15 |
|     snow    | 39.29 |  44.7 | 76.42 |
|     sofa    |  36.5 | 44.58 | 66.81 |
|    table    | 15.88 | 43.83 | 19.94 |
|    track    |  0.0  |  0.0  |  nan  |
|    train    | 46.88 | 85.91 | 50.78 |
|     tree    | 47.34 | 53.29 | 80.93 |
|    truck    |  8.91 | 19.01 | 14.36 |
|  tvmonitor  | 47.54 | 59.12 | 70.83 |
|     wall    | 31.81 | 39.61 | 61.78 |
|    water    | 67.28 | 74.78 | 87.03 |
|    window   | 12.63 | 14.97 | 44.73 |
|     wood    |  6.65 | 35.89 |  7.55 |
+-------------+-------+-------+-------+
2023-05-18 21:16:37,519 - mmseg - INFO - Summary:
2023-05-18 21:16:37,519 - mmseg - INFO - 
+-------+------+-------+-------+
|  aAcc | mIoU |  mAcc | mPrec |
+-------+------+-------+-------+
| 56.98 | 31.0 | 48.85 | 48.08 |
+-------+------+-------+-------+
2023-05-18 21:16:37,534 - mmseg - INFO - Exp name: maskclip_plus_vit16_deeplabv2_r101-d8_class_weight_480x480_4k_pascal_context_59.py
2023-05-18 21:16:37,535 - mmseg - INFO - Iter(val) [5104]	aAcc: 0.5698, mIoU: 0.3100, mAcc: 0.4885, mPrec: 0.4808, IoU.aeroplane: 0.3895, IoU.bag: 0.0000, IoU.bed: 0.0845, IoU.bedclothes: 0.0596, IoU.bench: 0.0000, IoU.bicycle: 0.5382, IoU.bird: 0.6458, IoU.boat: 0.3697, IoU.book: 0.0000, IoU.bottle: 0.6239, IoU.building: 0.1536, IoU.bus: 0.7598, IoU.cabinet: 0.1003, IoU.car: 0.6633, IoU.cat: 0.7639, IoU.ceiling: 0.3155, IoU.chair: 0.2650, IoU.cloth: 0.0579, IoU.computer: 0.0593, IoU.cow: 0.6875, IoU.cup: 0.0090, IoU.curtain: 0.2896, IoU.dog: 0.7523, IoU.door: 0.0857, IoU.fence: 0.1575, IoU.floor: 0.4466, IoU.flower: 0.1541, IoU.food: 0.0661, IoU.grass: 0.6282, IoU.ground: 0.2424, IoU.horse: 0.5624, IoU.keyboard: 0.4474, IoU.light: 0.1596, IoU.motorbike: 0.6144, IoU.mountain: 0.3329, IoU.mouse: 0.0000, IoU.person: 0.5047, IoU.plate: 0.0015, IoU.platform: 0.0000, IoU.pottedplant: 0.3648, IoU.road: 0.4044, IoU.rock: 0.2827, IoU.sheep: 0.7187, IoU.shelves: 0.0016, IoU.sidewalk: 0.1144, IoU.sign: 0.2397, IoU.sky: 0.5638, IoU.snow: 0.3929, IoU.sofa: 0.3650, IoU.table: 0.1588, IoU.track: 0.0000, IoU.train: 0.4688, IoU.tree: 0.4734, IoU.truck: 0.0891, IoU.tvmonitor: 0.4754, IoU.wall: 0.3181, IoU.water: 0.6728, IoU.window: 0.1263, IoU.wood: 0.0665, Acc.aeroplane: 0.9651, Acc.bag: 0.0000, Acc.bed: 0.3397, Acc.bedclothes: 0.0639, Acc.bench: 0.0000, Acc.bicycle: 0.9131, Acc.bird: 0.9392, Acc.boat: 0.8533, Acc.book: 0.0000, Acc.bottle: 0.8104, Acc.building: 0.1579, Acc.bus: 0.9160, Acc.cabinet: 0.2572, Acc.car: 0.9107, Acc.cat: 0.9712, Acc.ceiling: 0.7179, Acc.chair: 0.3279, Acc.cloth: 0.2808, Acc.computer: 0.2204, Acc.cow: 0.8553, Acc.cup: 0.0105, Acc.curtain: 0.3639, Acc.dog: 0.8775, Acc.door: 0.5503, Acc.fence: 0.1821, Acc.floor: 0.6500, Acc.flower: 0.3405, Acc.food: 0.8656, Acc.grass: 0.7512, Acc.ground: 0.4373, Acc.horse: 0.9254, Acc.keyboard: 0.4751, Acc.light: 0.4771, Acc.motorbike: 0.8244, Acc.mountain: 0.4635, Acc.mouse: 0.0000, Acc.person: 0.5669, Acc.plate: 0.0016, Acc.platform: 0.0000, Acc.pottedplant: 0.7718, Acc.road: 0.5748, Acc.rock: 0.6415, Acc.sheep: 0.8771, Acc.shelves: 0.0016, Acc.sidewalk: 0.6008, Acc.sign: 0.3602, Acc.sky: 0.5733, Acc.snow: 0.4470, Acc.sofa: 0.4458, Acc.table: 0.4383, Acc.track: 0.0000, Acc.train: 0.8591, Acc.tree: 0.5329, Acc.truck: 0.1901, Acc.tvmonitor: 0.5912, Acc.wall: 0.3961, Acc.water: 0.7478, Acc.window: 0.1497, Acc.wood: 0.3589, Prec.aeroplane: 0.3951, Prec.bag: 0.3488, Prec.bed: 0.1011, Prec.bedclothes: 0.4666, Prec.bench: 0.0000, Prec.bicycle: 0.5673, Prec.bird: 0.6740, Prec.boat: 0.3948, Prec.book: 1.0000, Prec.bottle: 0.7306, Prec.building: 0.8505, Prec.bus: 0.8167, Prec.cabinet: 0.1412, Prec.car: 0.7094, Prec.cat: 0.7815, Prec.ceiling: 0.3601, Prec.chair: 0.5799, Prec.cloth: 0.0679, Prec.computer: 0.0750, Prec.cow: 0.7780, Prec.cup: 0.0629, Prec.curtain: 0.5866, Prec.dog: 0.8406, Prec.door: 0.0921, Prec.fence: 0.5379, Prec.floor: 0.5879, Prec.flower: 0.2197, Prec.food: 0.0668, Prec.grass: 0.7932, Prec.ground: 0.3522, Prec.horse: 0.5891, Prec.keyboard: 0.8846, Prec.light: 0.1934, Prec.motorbike: 0.7070, Prec.mountain: 0.5416, Prec.mouse: nan, Prec.person: 0.8213, Prec.plate: 0.0271, Prec.platform: 0.0000, Prec.pottedplant: 0.4089, Prec.road: 0.5770, Prec.rock: 0.3357, Prec.sheep: 0.7991, Prec.shelves: 0.2171, Prec.sidewalk: 0.1238, Prec.sign: 0.4175, Prec.sky: 0.9715, Prec.snow: 0.7642, Prec.sofa: 0.6681, Prec.table: 0.1994, Prec.track: nan, Prec.train: 0.5078, Prec.tree: 0.8093, Prec.truck: 0.1436, Prec.tvmonitor: 0.7083, Prec.wall: 0.6178, Prec.water: 0.8703, Prec.window: 0.4473, Prec.wood: 0.0755
2023-05-18 21:17:22,759 - mmseg - INFO - Iter [2050/4000]	lr: 2.668e-03, eta: 0:52:01, time: 29.353, data_time: 28.460, memory: 17590, decode.loss_ce: 1.5645, decode.acc_seg: 32.1786, loss: 1.5645
2023-05-18 21:18:07,758 - mmseg - INFO - Iter [2100/4000]	lr: 2.609e-03, eta: 0:50:09, time: 0.900, data_time: 0.012, memory: 17590, decode.loss_ce: 1.5312, decode.acc_seg: 32.8673, loss: 1.5312
2023-05-18 21:18:52,758 - mmseg - INFO - Iter [2150/4000]	lr: 2.549e-03, eta: 0:48:21, time: 0.900, data_time: 0.012, memory: 17590, decode.loss_ce: 1.5826, decode.acc_seg: 31.8590, loss: 1.5826
2023-05-18 21:19:37,758 - mmseg - INFO - Iter [2200/4000]	lr: 2.489e-03, eta: 0:46:35, time: 0.900, data_time: 0.012, memory: 17590, decode.loss_ce: 1.5600, decode.acc_seg: 33.4769, loss: 1.5600
2023-05-18 21:20:22,757 - mmseg - INFO - Iter [2250/4000]	lr: 2.430e-03, eta: 0:44:52, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5824, decode.acc_seg: 33.2025, loss: 1.5824
2023-05-18 21:21:07,758 - mmseg - INFO - Iter [2300/4000]	lr: 2.370e-03, eta: 0:43:11, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5085, decode.acc_seg: 32.7657, loss: 1.5085
2023-05-18 21:21:52,758 - mmseg - INFO - Iter [2350/4000]	lr: 2.310e-03, eta: 0:41:33, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.6572, decode.acc_seg: 34.0904, loss: 1.6572
2023-05-18 21:22:37,759 - mmseg - INFO - Iter [2400/4000]	lr: 2.249e-03, eta: 0:39:57, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5527, decode.acc_seg: 33.2281, loss: 1.5527
2023-05-18 21:23:22,758 - mmseg - INFO - Iter [2450/4000]	lr: 2.189e-03, eta: 0:38:23, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5180, decode.acc_seg: 33.8051, loss: 1.5180
2023-05-18 21:24:10,058 - mmseg - INFO - Iter [2500/4000]	lr: 2.128e-03, eta: 0:36:53, time: 0.946, data_time: 0.059, memory: 17590, decode.loss_ce: 1.5278, decode.acc_seg: 32.7112, loss: 1.5278
2023-05-18 21:24:55,056 - mmseg - INFO - Iter [2550/4000]	lr: 2.067e-03, eta: 0:35:23, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.4657, decode.acc_seg: 32.4489, loss: 1.4657
2023-05-18 21:25:40,057 - mmseg - INFO - Iter [2600/4000]	lr: 2.006e-03, eta: 0:33:54, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5609, decode.acc_seg: 32.6318, loss: 1.5609
2023-05-18 21:26:25,056 - mmseg - INFO - Iter [2650/4000]	lr: 1.945e-03, eta: 0:32:28, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5345, decode.acc_seg: 32.8948, loss: 1.5345
2023-05-18 21:27:10,066 - mmseg - INFO - Iter [2700/4000]	lr: 1.883e-03, eta: 0:31:02, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.4451, decode.acc_seg: 32.6524, loss: 1.4451
2023-05-18 21:27:55,055 - mmseg - INFO - Iter [2750/4000]	lr: 1.821e-03, eta: 0:29:39, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.4988, decode.acc_seg: 33.1521, loss: 1.4988
2023-05-18 21:28:40,057 - mmseg - INFO - Iter [2800/4000]	lr: 1.759e-03, eta: 0:28:16, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5446, decode.acc_seg: 34.0853, loss: 1.5446
2023-05-18 21:29:25,256 - mmseg - INFO - Iter [2850/4000]	lr: 1.697e-03, eta: 0:26:55, time: 0.904, data_time: 0.013, memory: 17590, decode.loss_ce: 1.4374, decode.acc_seg: 33.2956, loss: 1.4374
2023-05-18 21:30:10,257 - mmseg - INFO - Iter [2900/4000]	lr: 1.634e-03, eta: 0:25:35, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.4660, decode.acc_seg: 32.9426, loss: 1.4660
2023-05-18 21:30:55,257 - mmseg - INFO - Iter [2950/4000]	lr: 1.572e-03, eta: 0:24:17, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5428, decode.acc_seg: 33.2915, loss: 1.5428
2023-05-18 21:31:40,256 - mmseg - INFO - Exp name: maskclip_plus_vit16_deeplabv2_r101-d8_class_weight_480x480_4k_pascal_context_59.py
2023-05-18 21:31:40,256 - mmseg - INFO - Iter [3000/4000]	lr: 1.508e-03, eta: 0:22:59, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5072, decode.acc_seg: 33.6336, loss: 1.5072
2023-05-18 21:32:25,357 - mmseg - INFO - Iter [3050/4000]	lr: 1.445e-03, eta: 0:21:43, time: 0.902, data_time: 0.013, memory: 17590, decode.loss_ce: 1.6037, decode.acc_seg: 34.4748, loss: 1.6037
2023-05-18 21:33:10,358 - mmseg - INFO - Iter [3100/4000]	lr: 1.381e-03, eta: 0:20:27, time: 0.900, data_time: 0.014, memory: 17590, decode.loss_ce: 1.5248, decode.acc_seg: 33.8964, loss: 1.5248
2023-05-18 21:33:57,756 - mmseg - INFO - Iter [3150/4000]	lr: 1.317e-03, eta: 0:19:14, time: 0.948, data_time: 0.059, memory: 17590, decode.loss_ce: 1.5071, decode.acc_seg: 35.4042, loss: 1.5071
2023-05-18 21:34:42,758 - mmseg - INFO - Iter [3200/4000]	lr: 1.252e-03, eta: 0:18:00, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.4979, decode.acc_seg: 33.1622, loss: 1.4979
2023-05-18 21:35:27,758 - mmseg - INFO - Iter [3250/4000]	lr: 1.187e-03, eta: 0:16:47, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.4697, decode.acc_seg: 32.6068, loss: 1.4697
2023-05-18 21:36:12,757 - mmseg - INFO - Iter [3300/4000]	lr: 1.122e-03, eta: 0:15:35, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5318, decode.acc_seg: 34.1422, loss: 1.5318
2023-05-18 21:36:57,758 - mmseg - INFO - Iter [3350/4000]	lr: 1.056e-03, eta: 0:14:24, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.4795, decode.acc_seg: 33.3591, loss: 1.4795
2023-05-18 21:37:42,758 - mmseg - INFO - Iter [3400/4000]	lr: 9.899e-04, eta: 0:13:14, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.4758, decode.acc_seg: 35.1554, loss: 1.4758
2023-05-18 21:38:27,757 - mmseg - INFO - Iter [3450/4000]	lr: 9.230e-04, eta: 0:12:04, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.4852, decode.acc_seg: 32.8930, loss: 1.4852
2023-05-18 21:39:12,758 - mmseg - INFO - Iter [3500/4000]	lr: 8.554e-04, eta: 0:10:55, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5727, decode.acc_seg: 33.4996, loss: 1.5727
2023-05-18 21:39:57,859 - mmseg - INFO - Iter [3550/4000]	lr: 7.872e-04, eta: 0:09:47, time: 0.902, data_time: 0.013, memory: 17590, decode.loss_ce: 1.4978, decode.acc_seg: 33.3060, loss: 1.4978
2023-05-18 21:40:42,857 - mmseg - INFO - Iter [3600/4000]	lr: 7.183e-04, eta: 0:08:40, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.4692, decode.acc_seg: 32.4320, loss: 1.4692
2023-05-18 21:41:27,858 - mmseg - INFO - Iter [3650/4000]	lr: 6.484e-04, eta: 0:07:33, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5030, decode.acc_seg: 35.3778, loss: 1.5030
2023-05-18 21:42:12,858 - mmseg - INFO - Iter [3700/4000]	lr: 5.776e-04, eta: 0:06:26, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.4641, decode.acc_seg: 34.2162, loss: 1.4641
2023-05-18 21:43:00,256 - mmseg - INFO - Iter [3750/4000]	lr: 5.056e-04, eta: 0:05:21, time: 0.948, data_time: 0.060, memory: 17590, decode.loss_ce: 1.5494, decode.acc_seg: 35.3250, loss: 1.5494
2023-05-18 21:43:45,256 - mmseg - INFO - Iter [3800/4000]	lr: 4.321e-04, eta: 0:04:16, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.4335, decode.acc_seg: 33.9456, loss: 1.4335
2023-05-18 21:44:30,257 - mmseg - INFO - Iter [3850/4000]	lr: 3.567e-04, eta: 0:03:11, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.4910, decode.acc_seg: 34.6698, loss: 1.4910
2023-05-18 21:45:15,356 - mmseg - INFO - Iter [3900/4000]	lr: 2.787e-04, eta: 0:02:07, time: 0.902, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5012, decode.acc_seg: 34.3320, loss: 1.5012
2023-05-18 21:46:00,356 - mmseg - INFO - Iter [3950/4000]	lr: 1.966e-04, eta: 0:01:03, time: 0.900, data_time: 0.013, memory: 17590, decode.loss_ce: 1.5071, decode.acc_seg: 32.7300, loss: 1.5071
2023-05-18 21:46:45,452 - mmseg - INFO - Saving checkpoint at 4000 iterations
2023-05-18 21:46:47,881 - mmseg - INFO - Exp name: maskclip_plus_vit16_deeplabv2_r101-d8_class_weight_480x480_4k_pascal_context_59.py
2023-05-18 21:46:47,881 - mmseg - INFO - Iter [4000/4000]	lr: 1.028e-04, eta: 0:00:00, time: 0.951, data_time: 0.013, memory: 17590, decode.loss_ce: 1.4349, decode.acc_seg: 34.2787, loss: 1.4349
2023-05-18 22:08:53,192 - mmseg - INFO - per class results:
2023-05-18 22:08:53,195 - mmseg - INFO - 
+-------------+-------+-------+-------+
|    Class    |  IoU  |  Acc  |  Prec |
+-------------+-------+-------+-------+
|  aeroplane  | 38.11 | 96.45 | 38.65 |
|     bag     |  0.02 |  0.02 | 66.76 |
|     bed     |  9.18 | 39.31 | 10.69 |
|  bedclothes |  7.77 |  8.41 | 50.65 |
|    bench    |  0.0  |  0.0  |  0.81 |
|   bicycle   | 56.53 | 89.81 |  60.4 |
|     bird    | 66.65 | 95.37 | 68.88 |
|     boat    |  36.8 | 85.85 | 39.17 |
|     book    |  1.77 |  1.78 | 83.45 |
|    bottle   | 61.42 | 78.51 | 73.83 |
|   building  | 13.86 | 14.17 | 86.25 |
|     bus     | 77.05 | 91.48 | 83.01 |
|   cabinet   |  9.64 | 25.55 |  13.4 |
|     car     | 66.25 | 90.86 | 70.98 |
|     cat     | 81.03 | 95.83 | 83.99 |
|   ceiling   | 31.06 | 73.57 | 34.96 |
|    chair    |  27.8 | 35.95 | 55.08 |
|    cloth    |  5.61 | 28.11 |  6.55 |
|   computer  |  6.31 | 21.55 |  8.19 |
|     cow     | 67.84 | 91.65 | 72.31 |
|     cup     |  1.93 |  2.52 |  7.65 |
|   curtain   | 32.19 | 40.24 | 61.67 |
|     dog     | 78.12 | 90.49 | 85.11 |
|     door    |  8.56 | 56.39 |  9.17 |
|    fence    | 18.31 | 20.99 | 58.92 |
|    floor    | 48.34 | 68.16 | 62.43 |
|    flower   |  16.9 | 42.76 | 21.84 |
|     food    |  6.91 |  86.4 |  6.99 |
|    grass    | 60.58 | 69.12 | 83.06 |
|    ground   |  23.4 | 41.03 | 35.27 |
|    horse    | 59.45 | 93.17 | 62.15 |
|   keyboard  | 66.92 | 74.72 | 86.52 |
|    light    |  15.5 | 56.89 | 17.56 |
|  motorbike  | 62.55 | 81.61 | 72.81 |
|   mountain  |  34.5 | 50.16 | 52.51 |
|    mouse    |  0.0  |  0.0  |  0.0  |
|    person   | 47.65 | 53.04 | 82.45 |
|    plate    |  0.77 |  0.86 |  6.43 |
|   platform  |  0.0  |  0.0  |  nan  |
| pottedplant | 35.79 | 74.79 |  40.7 |
|     road    | 41.75 |  60.6 |  57.3 |
|     rock    | 30.38 | 64.48 | 36.49 |
|    sheep    | 70.11 | 88.48 | 77.15 |
|   shelves   |  5.84 |  6.56 | 34.93 |
|   sidewalk  | 11.21 | 63.79 | 11.97 |
|     sign    | 25.03 | 42.54 | 37.82 |
|     sky     | 57.04 | 58.03 |  97.1 |
|     snow    | 46.65 | 58.89 | 69.18 |
|     sofa    | 37.14 | 45.16 | 67.63 |
|    table    | 15.05 |  43.2 | 18.76 |
|    track    |  0.0  |  0.0  |  nan  |
|    train    | 46.21 | 91.47 |  48.3 |
|     tree    | 48.53 | 54.11 | 82.46 |
|    truck    | 10.83 | 26.27 | 15.55 |
|  tvmonitor  | 46.37 | 55.06 |  74.6 |
|     wall    | 33.23 | 42.26 | 60.86 |
|    water    | 67.22 | 75.52 | 85.95 |
|    window   | 15.44 | 18.54 | 48.01 |
|     wood    |  7.06 | 40.23 |  7.89 |
+-------------+-------+-------+-------+
2023-05-18 22:08:53,196 - mmseg - INFO - Summary:
2023-05-18 22:08:53,196 - mmseg - INFO - 
+-------+-------+-------+-------+
|  aAcc |  mIoU |  mAcc | mPrec |
+-------+-------+-------+-------+
| 56.99 | 32.17 | 50.89 |  49.0 |
+-------+-------+-------+-------+
2023-05-18 22:08:53,206 - mmseg - INFO - Exp name: maskclip_plus_vit16_deeplabv2_r101-d8_class_weight_480x480_4k_pascal_context_59.py
2023-05-18 22:08:53,207 - mmseg - INFO - Iter(val) [5104]	aAcc: 0.5699, mIoU: 0.3217, mAcc: 0.5089, mPrec: 0.4900, IoU.aeroplane: 0.3811, IoU.bag: 0.0002, IoU.bed: 0.0918, IoU.bedclothes: 0.0777, IoU.bench: 0.0000, IoU.bicycle: 0.5653, IoU.bird: 0.6665, IoU.boat: 0.3680, IoU.book: 0.0177, IoU.bottle: 0.6142, IoU.building: 0.1386, IoU.bus: 0.7705, IoU.cabinet: 0.0964, IoU.car: 0.6625, IoU.cat: 0.8103, IoU.ceiling: 0.3106, IoU.chair: 0.2780, IoU.cloth: 0.0561, IoU.computer: 0.0631, IoU.cow: 0.6784, IoU.cup: 0.0193, IoU.curtain: 0.3219, IoU.dog: 0.7812, IoU.door: 0.0856, IoU.fence: 0.1831, IoU.floor: 0.4834, IoU.flower: 0.1690, IoU.food: 0.0691, IoU.grass: 0.6058, IoU.ground: 0.2340, IoU.horse: 0.5945, IoU.keyboard: 0.6692, IoU.light: 0.1550, IoU.motorbike: 0.6255, IoU.mountain: 0.3450, IoU.mouse: 0.0000, IoU.person: 0.4765, IoU.plate: 0.0077, IoU.platform: 0.0000, IoU.pottedplant: 0.3579, IoU.road: 0.4175, IoU.rock: 0.3038, IoU.sheep: 0.7011, IoU.shelves: 0.0584, IoU.sidewalk: 0.1121, IoU.sign: 0.2503, IoU.sky: 0.5704, IoU.snow: 0.4665, IoU.sofa: 0.3714, IoU.table: 0.1505, IoU.track: 0.0000, IoU.train: 0.4621, IoU.tree: 0.4853, IoU.truck: 0.1083, IoU.tvmonitor: 0.4637, IoU.wall: 0.3323, IoU.water: 0.6722, IoU.window: 0.1544, IoU.wood: 0.0706, Acc.aeroplane: 0.9645, Acc.bag: 0.0002, Acc.bed: 0.3931, Acc.bedclothes: 0.0841, Acc.bench: 0.0000, Acc.bicycle: 0.8981, Acc.bird: 0.9537, Acc.boat: 0.8585, Acc.book: 0.0178, Acc.bottle: 0.7851, Acc.building: 0.1417, Acc.bus: 0.9148, Acc.cabinet: 0.2555, Acc.car: 0.9086, Acc.cat: 0.9583, Acc.ceiling: 0.7357, Acc.chair: 0.3595, Acc.cloth: 0.2811, Acc.computer: 0.2155, Acc.cow: 0.9165, Acc.cup: 0.0252, Acc.curtain: 0.4024, Acc.dog: 0.9049, Acc.door: 0.5639, Acc.fence: 0.2099, Acc.floor: 0.6816, Acc.flower: 0.4276, Acc.food: 0.8640, Acc.grass: 0.6912, Acc.ground: 0.4103, Acc.horse: 0.9317, Acc.keyboard: 0.7472, Acc.light: 0.5689, Acc.motorbike: 0.8161, Acc.mountain: 0.5016, Acc.mouse: 0.0000, Acc.person: 0.5304, Acc.plate: 0.0086, Acc.platform: 0.0000, Acc.pottedplant: 0.7479, Acc.road: 0.6060, Acc.rock: 0.6448, Acc.sheep: 0.8848, Acc.shelves: 0.0656, Acc.sidewalk: 0.6379, Acc.sign: 0.4254, Acc.sky: 0.5803, Acc.snow: 0.5889, Acc.sofa: 0.4516, Acc.table: 0.4320, Acc.track: 0.0000, Acc.train: 0.9147, Acc.tree: 0.5411, Acc.truck: 0.2627, Acc.tvmonitor: 0.5506, Acc.wall: 0.4226, Acc.water: 0.7552, Acc.window: 0.1854, Acc.wood: 0.4023, Prec.aeroplane: 0.3865, Prec.bag: 0.6676, Prec.bed: 0.1069, Prec.bedclothes: 0.5065, Prec.bench: 0.0081, Prec.bicycle: 0.6040, Prec.bird: 0.6888, Prec.boat: 0.3917, Prec.book: 0.8345, Prec.bottle: 0.7383, Prec.building: 0.8625, Prec.bus: 0.8301, Prec.cabinet: 0.1340, Prec.car: 0.7098, Prec.cat: 0.8399, Prec.ceiling: 0.3496, Prec.chair: 0.5508, Prec.cloth: 0.0655, Prec.computer: 0.0819, Prec.cow: 0.7231, Prec.cup: 0.0765, Prec.curtain: 0.6167, Prec.dog: 0.8511, Prec.door: 0.0917, Prec.fence: 0.5892, Prec.floor: 0.6243, Prec.flower: 0.2184, Prec.food: 0.0699, Prec.grass: 0.8306, Prec.ground: 0.3527, Prec.horse: 0.6215, Prec.keyboard: 0.8652, Prec.light: 0.1756, Prec.motorbike: 0.7281, Prec.mountain: 0.5251, Prec.mouse: 0.0000, Prec.person: 0.8245, Prec.plate: 0.0643, Prec.platform: nan, Prec.pottedplant: 0.4070, Prec.road: 0.5730, Prec.rock: 0.3649, Prec.sheep: 0.7715, Prec.shelves: 0.3493, Prec.sidewalk: 0.1197, Prec.sign: 0.3782, Prec.sky: 0.9710, Prec.snow: 0.6918, Prec.sofa: 0.6763, Prec.table: 0.1876, Prec.track: nan, Prec.train: 0.4830, Prec.tree: 0.8246, Prec.truck: 0.1555, Prec.tvmonitor: 0.7460, Prec.wall: 0.6086, Prec.water: 0.8595, Prec.window: 0.4801, Prec.wood: 0.0789
