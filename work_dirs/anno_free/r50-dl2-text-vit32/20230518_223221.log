2023-05-18 22:32:21,895 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /usr/local/cuda
NVCC: Build cuda_11.8.r11.8/compiler.31833905_0
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.9.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.10.0+cu111
OpenCV: 4.7.0
MMCV: 1.4.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMSegmentation: 0.20.2+03c38b7
------------------------------------------------------------

2023-05-18 22:32:21,895 - mmseg - INFO - Distributed training: False
2023-05-18 22:32:23,454 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    pretrained='open-mmlab://resnet101_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='MaskClipPlusTextHead',
        in_channels=2048,
        channels=1024,
        num_classes=59,
        dropout_ratio=0,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
        decode_module_cfg=dict(
            type='ASPPHeadV2', input_transform=None,
            dilations=(6, 12, 18, 24)),
        text_categories=59,
        text_channels=1024,
        text_embeddings_path='pretrain/context_RN50_clip_text.pth',
        text_features_path='pretrain/context_ViT32_clip_text_features.pth',
        tau=0.25,
        cls_bg=False,
        norm_feat=False,
        clip_unlabeled_cats=[
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
            36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
            53, 54, 55, 56, 57, 58
        ],
        clip_cfg=dict(
            type='ResNetClip',
            depth=50,
            norm_cfg=dict(type='SyncBN', requires_grad=True),
            contract_dilation=True),
        clip_weights_path='pretrain/RN50_clip_weights.pth',
        reset_counter=True,
        start_clip_guided=(1, -1),
        start_self_train=(-1, -1)),
    feed_img_to_decode_head=True,
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'PascalContextDataset59'
data_root = 'data/VOCdevkit/VOC2010/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
img_scale = (520, 520)
crop_size = (480, 480)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='LoadAnnotations',
        reduce_zero_label=True,
        suppress_labels=[
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
            36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
            53, 54, 55, 56, 57, 58
        ]),
    dict(type='Resize', img_scale=(520, 520), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(480, 480), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(480, 480), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(520, 520),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=8,
    workers_per_gpu=4,
    train=dict(
        type='PascalContextDataset59',
        data_root='data/VOCdevkit/VOC2010/',
        img_dir='JPEGImages',
        ann_dir='SegmentationClassContext',
        split='ImageSets/SegmentationContext/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='LoadAnnotations',
                reduce_zero_label=True,
                suppress_labels=[
                    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
                    17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
                    47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58
                ]),
            dict(type='Resize', img_scale=(520, 520), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(480, 480), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(480, 480), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='PascalContextDataset59',
        data_root='data/VOCdevkit/VOC2010/',
        img_dir='JPEGImages',
        ann_dir='SegmentationClassContext',
        split='ImageSets/SegmentationContext/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(520, 520),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='PascalContextDataset59',
        data_root='data/VOCdevkit/VOC2010/',
        img_dir='JPEGImages',
        ann_dir='SegmentationClassContext',
        split='ImageSets/SegmentationContext/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(520, 520),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.00025)
optimizer_config = dict()
lr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=4000)
checkpoint_config = dict(by_epoch=False, interval=2000)
evaluation = dict(interval=2000, metric='mIoU', pre_eval=True)
suppress_labels = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
    40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58
]
find_unused_parameters = True
work_dir = 'work_dirs/anno_free/r50-dl2-text'
gpu_ids = range(0, 1)
auto_resume = False

2023-05-18 22:32:23,455 - mmseg - INFO - Set random seed to 1512992072, deterministic: False
2023-05-18 22:32:32,192 - mmseg - INFO - initialize ResNetV1c with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnet101_v1c'}
2023-05-18 22:32:32,790 - mmseg - INFO - initialize ResNetClip with init_cfg [{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-05-18 22:32:33,094 - mmseg - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-05-18 22:32:33,095 - mmseg - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-05-18 22:32:33,095 - mmseg - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-05-18 22:32:33,097 - mmseg - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-05-18 22:32:33,172 - mmseg - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-05-18 22:32:33,173 - mmseg - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-05-18 22:32:33,174 - mmseg - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-05-18 22:32:33,178 - mmseg - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-05-18 22:32:33,179 - mmseg - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-05-18 22:32:33,180 - mmseg - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-05-18 22:32:33,182 - mmseg - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-05-18 22:32:33,183 - mmseg - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-05-18 22:32:33,184 - mmseg - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-05-18 22:32:33,188 - mmseg - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-05-18 22:32:33,190 - mmseg - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-05-18 22:32:33,271 - mmseg - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-05-18 22:32:33,282 - mmseg - INFO - Loaded text embeddings from pretrain/context_RN50_clip_text.pth
2023-05-18 22:32:33,537 - mmseg - INFO - Loaded clip weights from pretrain/RN50_clip_weights.pth
Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

decode_head.logit_scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.0.conv.weight - torch.Size([1024, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.1.conv.weight - torch.Size([1024, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.1.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.1.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.2.conv.weight - torch.Size([1024, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.2.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.2.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.3.conv.weight - torch.Size([1024, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.3.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.3.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip.stem.0.weight - torch.Size([32, 3, 3, 3]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.stem.1.weight - torch.Size([32]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.stem.1.bias - torch.Size([32]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.stem.3.weight - torch.Size([32, 32, 3, 3]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.stem.4.weight - torch.Size([32]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.stem.4.bias - torch.Size([32]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.stem.6.weight - torch.Size([64, 32, 3, 3]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.stem.7.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.stem.7.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.0.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.0.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.0.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.0.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.0.downsample.1.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.0.downsample.2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.0.downsample.2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.1.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.1.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.1.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.1.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.2.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.2.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.2.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.2.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer1.2.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.0.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.0.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.0.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.0.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.0.downsample.1.weight - torch.Size([512, 256, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.0.downsample.2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.0.downsample.2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.1.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.1.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.1.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.1.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.2.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.2.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.2.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.2.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.2.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.3.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.3.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.3.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.3.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer2.3.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.0.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.0.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.0.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.0.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.0.downsample.1.weight - torch.Size([1024, 512, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.0.downsample.2.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.0.downsample.2.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.1.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.1.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.1.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.1.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.2.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.2.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.2.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.2.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.2.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.3.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.3.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.3.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.3.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.3.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.4.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.4.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.4.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.4.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.4.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.5.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.5.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.5.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.5.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer3.5.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.0.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.0.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.0.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.0.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.0.downsample.1.weight - torch.Size([2048, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.0.downsample.2.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.0.downsample.2.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.1.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.1.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.1.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.1.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.2.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.2.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.2.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.2.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layer4.2.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.q_proj.weight - torch.Size([2048, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.q_proj.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.k_proj.weight - torch.Size([2048, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.k_proj.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.v_proj.weight - torch.Size([2048, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.v_proj.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.c_proj.weight - torch.Size([1024, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.c_proj.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip_model.positional_embedding - torch.Size([77, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.text_projection - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.logit_scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.class_embedding - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.positional_embedding - torch.Size([50, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.proj - torch.Size([768, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.conv1.weight - torch.Size([768, 3, 32, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.ln_pre.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.ln_pre.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.ln_post.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.ln_post.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.token_embedding.weight - torch.Size([49408, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.ln_final.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.ln_final.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023-05-18 22:32:33,690 - mmseg - INFO - EncoderDecoder(
  (backbone): ResNetV1c(
    (stem): Sequential(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): _BatchNormXd(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): _BatchNormXd(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
      (6): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace=True)
    )
    (stem_pool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (8): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (9): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (10): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (11): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (12): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (13): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (14): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (15): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (16): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (17): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (18): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (19): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (20): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (21): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (22): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnet101_v1c'}
  (decode_head): MaskClipPlusTextHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss()
    (decode_module): ASPPHeadV2(
      input_transform=None, ignore_index=255, align_corners=False
      (aspp_modules): ASPPModuleV2(
        (0): ConvModule(
          (conv): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), bias=False)
          (bn): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (1): ConvModule(
          (conv): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), bias=False)
          (bn): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (2): ConvModule(
          (conv): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), bias=False)
          (bn): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (3): ConvModule(
          (conv): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), bias=False)
          (bn): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
    (clip): ResNetClip(
      (stem): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): _BatchNormXd(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): _BatchNormXd(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (7): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (8): ReLU(inplace=True)
      )
      (stem_pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (layer1): ResLayer(
        (0): Bottleneck(
          (avgpool): Identity()
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): AvgPool2d(kernel_size=1, stride=1, padding=0)
            (1): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      )
      (layer2): ResLayer(
        (0): Bottleneck(
          (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (1): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      )
      (layer3): ResLayer(
        (0): Bottleneck(
          (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (1): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (2): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      )
      (layer4): ResLayer(
        (0): Bottleneck(
          (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (1): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (2): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      )
    )
    init_cfg=[{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
    (q_proj): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
    (k_proj): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
    (v_proj): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
    (c_proj): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1))
    (clip_model): CLIP(
      (visual): VisionTransformer(
        (conv1): Conv2d(3, 768, kernel_size=(32, 32), stride=(32, 32), bias=False)
        (ln_pre): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (transformer): Transformer(
          (resblocks): Sequential(
            (0): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (1): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (2): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (3): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (4): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (5): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (6): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (7): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (8): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (9): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (10): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (11): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
        (ln_post): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      )
      (transformer): Transformer(
        (resblocks): Sequential(
          (0): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (1): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (2): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (3): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (4): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (5): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (6): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (7): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (8): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (9): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (10): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (11): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
)
2023-05-18 22:32:33,779 - mmseg - INFO - Loaded 4996 images
2023-05-18 22:32:35,626 - mmseg - INFO - Loaded 5104 images
2023-05-18 22:32:35,626 - mmseg - INFO - Start running, host: root@workspace-b4viw9u1uynb-0, work_dir: /root/MaskCLIP_SegFormer/work_dirs/anno_free/r50-dl2-text
2023-05-18 22:32:35,627 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-05-18 22:32:35,627 - mmseg - INFO - workflow: [('train', 1)], max: 4000 iters
2023-05-18 22:32:35,627 - mmseg - INFO - Checkpoints will be saved to /root/MaskCLIP_SegFormer/work_dirs/anno_free/r50-dl2-text by HardDiskBackend.
2023-05-18 22:32:39,378 - mmseg - INFO - Start clip guided training
2023-05-18 22:33:33,322 - mmseg - INFO - Iter [50/4000]	lr: 4.946e-03, eta: 1:15:05, time: 1.141, data_time: 0.022, memory: 19336, decode.loss_ce: 3.0753, decode.acc_seg: 2.9610, loss: 3.0753
2023-05-18 22:34:24,156 - mmseg - INFO - Iter [100/4000]	lr: 4.891e-03, eta: 1:10:06, time: 1.017, data_time: 0.012, memory: 19336, decode.loss_ce: 2.4661, decode.acc_seg: 13.3997, loss: 2.4661
2023-05-18 22:35:14,854 - mmseg - INFO - Iter [150/4000]	lr: 4.835e-03, eta: 1:07:49, time: 1.014, data_time: 0.012, memory: 19336, decode.loss_ce: 2.1961, decode.acc_seg: 18.7014, loss: 2.1961
2023-05-18 22:36:05,953 - mmseg - INFO - Iter [200/4000]	lr: 4.780e-03, eta: 1:06:23, time: 1.022, data_time: 0.012, memory: 19336, decode.loss_ce: 1.9594, decode.acc_seg: 22.8053, loss: 1.9594
2023-05-18 22:36:56,757 - mmseg - INFO - Iter [250/4000]	lr: 4.725e-03, eta: 1:05:06, time: 1.016, data_time: 0.012, memory: 19336, decode.loss_ce: 1.9332, decode.acc_seg: 24.6844, loss: 1.9332
2023-05-18 22:37:47,655 - mmseg - INFO - Iter [300/4000]	lr: 4.669e-03, eta: 1:04:00, time: 1.018, data_time: 0.012, memory: 19336, decode.loss_ce: 1.8831, decode.acc_seg: 26.6144, loss: 1.8831
2023-05-18 22:38:38,486 - mmseg - INFO - Iter [350/4000]	lr: 4.613e-03, eta: 1:02:57, time: 1.017, data_time: 0.012, memory: 19336, decode.loss_ce: 1.7650, decode.acc_seg: 26.6575, loss: 1.7650
2023-05-18 22:39:29,023 - mmseg - INFO - Iter [400/4000]	lr: 4.558e-03, eta: 1:01:54, time: 1.011, data_time: 0.012, memory: 19336, decode.loss_ce: 1.7732, decode.acc_seg: 26.9014, loss: 1.7732
2023-05-18 22:40:19,757 - mmseg - INFO - Iter [450/4000]	lr: 4.502e-03, eta: 1:00:56, time: 1.015, data_time: 0.012, memory: 19336, decode.loss_ce: 1.6759, decode.acc_seg: 28.0189, loss: 1.6759
2023-05-18 22:41:10,657 - mmseg - INFO - Iter [500/4000]	lr: 4.446e-03, eta: 1:00:00, time: 1.018, data_time: 0.012, memory: 19336, decode.loss_ce: 1.6804, decode.acc_seg: 29.2705, loss: 1.6804
2023-05-18 22:42:01,456 - mmseg - INFO - Iter [550/4000]	lr: 4.390e-03, eta: 0:59:05, time: 1.016, data_time: 0.012, memory: 19336, decode.loss_ce: 1.7523, decode.acc_seg: 29.1635, loss: 1.7523
2023-05-18 22:42:52,318 - mmseg - INFO - Iter [600/4000]	lr: 4.334e-03, eta: 0:58:10, time: 1.017, data_time: 0.012, memory: 19336, decode.loss_ce: 1.6465, decode.acc_seg: 29.1007, loss: 1.6465
2023-05-18 22:43:45,955 - mmseg - INFO - Iter [650/4000]	lr: 4.278e-03, eta: 0:57:31, time: 1.073, data_time: 0.058, memory: 19336, decode.loss_ce: 1.6424, decode.acc_seg: 29.7228, loss: 1.6424
2023-05-18 22:44:36,660 - mmseg - INFO - Iter [700/4000]	lr: 4.222e-03, eta: 0:56:35, time: 1.014, data_time: 0.012, memory: 19336, decode.loss_ce: 1.6037, decode.acc_seg: 31.3905, loss: 1.6037
2023-05-18 22:45:26,822 - mmseg - INFO - Iter [750/4000]	lr: 4.166e-03, eta: 0:55:38, time: 1.003, data_time: 0.012, memory: 19336, decode.loss_ce: 1.5639, decode.acc_seg: 30.1178, loss: 1.5639
2023-05-18 22:46:17,553 - mmseg - INFO - Iter [800/4000]	lr: 4.110e-03, eta: 0:54:45, time: 1.015, data_time: 0.012, memory: 19336, decode.loss_ce: 1.5413, decode.acc_seg: 30.8822, loss: 1.5413
2023-05-18 22:47:08,258 - mmseg - INFO - Iter [850/4000]	lr: 4.053e-03, eta: 0:53:51, time: 1.014, data_time: 0.012, memory: 19336, decode.loss_ce: 1.5857, decode.acc_seg: 31.1816, loss: 1.5857
2023-05-18 22:47:59,221 - mmseg - INFO - Iter [900/4000]	lr: 3.997e-03, eta: 0:52:58, time: 1.019, data_time: 0.012, memory: 19336, decode.loss_ce: 1.5628, decode.acc_seg: 31.5331, loss: 1.5628
2023-05-18 22:48:49,754 - mmseg - INFO - Iter [950/4000]	lr: 3.940e-03, eta: 0:52:05, time: 1.011, data_time: 0.012, memory: 19336, decode.loss_ce: 1.5366, decode.acc_seg: 30.9122, loss: 1.5366
2023-05-18 22:49:40,220 - mmseg - INFO - Exp name: maskclip_plus_r50_deeplabv2_r101-d8_class_weight_480x480_4k_pascal_context_59.py
2023-05-18 22:49:40,220 - mmseg - INFO - Iter [1000/4000]	lr: 3.883e-03, eta: 0:51:11, time: 1.009, data_time: 0.012, memory: 19336, decode.loss_ce: 1.5063, decode.acc_seg: 32.3184, loss: 1.5063
2023-05-18 22:50:30,756 - mmseg - INFO - Iter [1050/4000]	lr: 3.827e-03, eta: 0:50:18, time: 1.011, data_time: 0.012, memory: 19336, decode.loss_ce: 1.5518, decode.acc_seg: 32.1094, loss: 1.5518
2023-05-18 22:51:21,522 - mmseg - INFO - Iter [1100/4000]	lr: 3.770e-03, eta: 0:49:26, time: 1.015, data_time: 0.012, memory: 19336, decode.loss_ce: 1.4981, decode.acc_seg: 30.6145, loss: 1.4981
2023-05-18 22:52:12,556 - mmseg - INFO - Iter [1150/4000]	lr: 3.713e-03, eta: 0:48:35, time: 1.021, data_time: 0.012, memory: 19336, decode.loss_ce: 1.4838, decode.acc_seg: 31.7645, loss: 1.4838
2023-05-18 22:53:03,257 - mmseg - INFO - Iter [1200/4000]	lr: 3.656e-03, eta: 0:47:42, time: 1.014, data_time: 0.012, memory: 19336, decode.loss_ce: 1.5200, decode.acc_seg: 32.8121, loss: 1.5200
2023-05-18 22:53:56,453 - mmseg - INFO - Iter [1250/4000]	lr: 3.599e-03, eta: 0:46:56, time: 1.064, data_time: 0.058, memory: 19336, decode.loss_ce: 1.5213, decode.acc_seg: 31.3885, loss: 1.5213
2023-05-18 22:54:47,253 - mmseg - INFO - Iter [1300/4000]	lr: 3.541e-03, eta: 0:46:04, time: 1.016, data_time: 0.012, memory: 19336, decode.loss_ce: 1.5641, decode.acc_seg: 33.3767, loss: 1.5641
2023-05-18 22:55:38,254 - mmseg - INFO - Iter [1350/4000]	lr: 3.484e-03, eta: 0:45:12, time: 1.020, data_time: 0.012, memory: 19336, decode.loss_ce: 1.4507, decode.acc_seg: 33.2056, loss: 1.4507
2023-05-18 22:56:29,156 - mmseg - INFO - Iter [1400/4000]	lr: 3.426e-03, eta: 0:44:21, time: 1.018, data_time: 0.012, memory: 19336, decode.loss_ce: 1.4481, decode.acc_seg: 32.1319, loss: 1.4481
2023-05-18 22:57:20,152 - mmseg - INFO - Iter [1450/4000]	lr: 3.369e-03, eta: 0:43:29, time: 1.020, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3942, decode.acc_seg: 31.1765, loss: 1.3942
2023-05-18 22:58:10,748 - mmseg - INFO - Iter [1500/4000]	lr: 3.311e-03, eta: 0:42:37, time: 1.012, data_time: 0.012, memory: 19336, decode.loss_ce: 1.5276, decode.acc_seg: 33.5752, loss: 1.5276
2023-05-18 22:59:01,454 - mmseg - INFO - Iter [1550/4000]	lr: 3.253e-03, eta: 0:41:45, time: 1.014, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3874, decode.acc_seg: 31.4261, loss: 1.3874
2023-05-18 22:59:52,322 - mmseg - INFO - Iter [1600/4000]	lr: 3.195e-03, eta: 0:40:54, time: 1.017, data_time: 0.012, memory: 19336, decode.loss_ce: 1.4338, decode.acc_seg: 32.6530, loss: 1.4338
2023-05-18 23:00:42,919 - mmseg - INFO - Iter [1650/4000]	lr: 3.137e-03, eta: 0:40:02, time: 1.012, data_time: 0.012, memory: 19336, decode.loss_ce: 1.4128, decode.acc_seg: 34.5768, loss: 1.4128
2023-05-18 23:01:33,756 - mmseg - INFO - Iter [1700/4000]	lr: 3.079e-03, eta: 0:39:10, time: 1.017, data_time: 0.012, memory: 19336, decode.loss_ce: 1.4238, decode.acc_seg: 32.9690, loss: 1.4238
2023-05-18 23:02:24,752 - mmseg - INFO - Iter [1750/4000]	lr: 3.021e-03, eta: 0:38:19, time: 1.020, data_time: 0.012, memory: 19336, decode.loss_ce: 1.4964, decode.acc_seg: 33.6220, loss: 1.4964
2023-05-18 23:03:15,855 - mmseg - INFO - Iter [1800/4000]	lr: 2.962e-03, eta: 0:37:28, time: 1.022, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3286, decode.acc_seg: 34.2374, loss: 1.3286
2023-05-18 23:04:06,760 - mmseg - INFO - Iter [1850/4000]	lr: 2.904e-03, eta: 0:36:37, time: 1.018, data_time: 0.012, memory: 19336, decode.loss_ce: 1.4292, decode.acc_seg: 32.4317, loss: 1.4292
2023-05-18 23:04:59,855 - mmseg - INFO - Iter [1900/4000]	lr: 2.845e-03, eta: 0:35:48, time: 1.062, data_time: 0.057, memory: 19336, decode.loss_ce: 1.3600, decode.acc_seg: 33.5934, loss: 1.3600
2023-05-18 23:05:50,650 - mmseg - INFO - Iter [1950/4000]	lr: 2.786e-03, eta: 0:34:56, time: 1.016, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3962, decode.acc_seg: 33.7165, loss: 1.3962
2023-05-18 23:06:41,350 - mmseg - INFO - Saving checkpoint at 2000 iterations
2023-05-18 23:06:44,030 - mmseg - INFO - Exp name: maskclip_plus_r50_deeplabv2_r101-d8_class_weight_480x480_4k_pascal_context_59.py
2023-05-18 23:06:44,030 - mmseg - INFO - Iter [2000/4000]	lr: 2.727e-03, eta: 0:34:07, time: 1.068, data_time: 0.012, memory: 19336, decode.loss_ce: 1.4315, decode.acc_seg: 32.6282, loss: 1.4315
2023-05-18 23:32:06,998 - mmseg - INFO - per class results:
2023-05-18 23:32:07,002 - mmseg - INFO - 
+-------------+-------+-------+-------+
|    Class    |  IoU  |  Acc  |  Prec |
+-------------+-------+-------+-------+
|  aeroplane  | 39.97 | 93.36 | 41.14 |
|     bag     |  9.24 |  9.88 | 58.91 |
|     bed     |  5.59 | 24.99 |  6.71 |
|  bedclothes | 12.69 | 33.59 | 16.94 |
|    bench    |  5.61 | 34.17 |  6.3  |
|   bicycle   | 47.05 | 92.69 | 48.87 |
|     bird    |  43.5 | 78.38 | 49.43 |
|     boat    | 26.19 | 78.88 | 28.17 |
|     book    |  0.01 |  0.01 | 100.0 |
|    bottle   | 51.97 | 79.54 | 59.99 |
|   building  | 16.83 | 17.45 | 82.45 |
|     bus     | 73.27 | 89.02 | 80.54 |
|   cabinet   | 17.37 | 23.66 | 39.54 |
|     car     | 64.24 | 83.15 | 73.85 |
|     cat     | 69.14 | 77.94 | 85.97 |
|   ceiling   | 32.51 | 55.52 | 43.97 |
|    chair    |  22.4 | 27.07 | 56.53 |
|    cloth    |  2.13 |  4.54 |  3.86 |
|   computer  |  2.75 | 81.55 |  2.76 |
|     cow     | 46.58 | 63.54 | 63.58 |
|     cup     | 10.64 | 14.14 | 30.02 |
|   curtain   | 18.59 |  48.9 | 23.06 |
|     dog     | 63.84 |  76.5 | 79.42 |
|     door    |  8.16 | 53.14 |  8.79 |
|    fence    |  14.8 | 65.79 | 16.04 |
|    floor    | 37.95 | 52.53 | 57.76 |
|    flower   | 22.67 | 47.46 | 30.26 |
|     food    | 16.01 | 74.58 | 16.94 |
|    grass    | 41.12 | 44.09 | 85.91 |
|    ground   |  6.0  |  6.35 | 52.69 |
|    horse    | 28.54 | 92.33 | 29.23 |
|   keyboard  | 50.53 |  53.0 | 91.57 |
|    light    |  1.54 |  1.67 | 16.49 |
|  motorbike  | 56.04 | 79.19 | 65.72 |
|   mountain  | 19.31 | 48.27 | 24.35 |
|    mouse    |  0.0  |  1.78 |  0.0  |
|    person   | 34.49 | 38.46 | 76.96 |
|    plate    |  0.26 |  0.31 |  1.62 |
|   platform  |  8.84 | 34.05 | 10.67 |
| pottedplant | 34.33 |  77.1 | 38.23 |
|     road    | 30.33 | 38.02 | 59.99 |
|     rock    | 19.83 | 43.57 | 26.68 |
|    sheep    |  8.84 | 83.25 |  9.0  |
|   shelves   |  9.08 | 39.55 | 10.54 |
|   sidewalk  |  8.84 | 59.13 |  9.41 |
|     sign    | 24.74 | 56.05 |  30.7 |
|     sky     | 62.82 |  65.7 | 93.47 |
|     snow    | 28.52 |  70.5 | 32.38 |
|     sofa    | 31.35 | 69.14 | 36.46 |
|    table    | 26.64 | 43.98 | 40.33 |
|    track    |  0.0  |  0.01 |  0.01 |
|    train    | 50.89 |  85.3 | 55.78 |
|     tree    | 36.43 |  38.3 | 88.15 |
|    truck    |  5.94 | 20.02 |  7.8  |
|  tvmonitor  | 34.38 | 40.06 |  70.8 |
|     wall    | 12.07 | 12.95 | 63.85 |
|    water    | 25.85 | 29.11 | 69.76 |
|    window   | 16.02 | 36.37 | 22.25 |
|     wood    | 12.26 | 27.15 | 18.27 |
+-------------+-------+-------+-------+
2023-05-18 23:32:07,002 - mmseg - INFO - Summary:
2023-05-18 23:32:07,002 - mmseg - INFO - 
+-------+-------+-------+-------+
|  aAcc |  mIoU |  mAcc | mPrec |
+-------+-------+-------+-------+
| 45.69 | 25.55 | 47.74 | 41.54 |
+-------+-------+-------+-------+
2023-05-18 23:32:07,017 - mmseg - INFO - Exp name: maskclip_plus_r50_deeplabv2_r101-d8_class_weight_480x480_4k_pascal_context_59.py
2023-05-18 23:32:07,017 - mmseg - INFO - Iter(val) [5104]	aAcc: 0.4569, mIoU: 0.2555, mAcc: 0.4774, mPrec: 0.4154, IoU.aeroplane: 0.3997, IoU.bag: 0.0924, IoU.bed: 0.0559, IoU.bedclothes: 0.1269, IoU.bench: 0.0561, IoU.bicycle: 0.4705, IoU.bird: 0.4350, IoU.boat: 0.2619, IoU.book: 0.0001, IoU.bottle: 0.5197, IoU.building: 0.1683, IoU.bus: 0.7327, IoU.cabinet: 0.1737, IoU.car: 0.6424, IoU.cat: 0.6914, IoU.ceiling: 0.3251, IoU.chair: 0.2240, IoU.cloth: 0.0213, IoU.computer: 0.0275, IoU.cow: 0.4658, IoU.cup: 0.1064, IoU.curtain: 0.1859, IoU.dog: 0.6384, IoU.door: 0.0816, IoU.fence: 0.1480, IoU.floor: 0.3795, IoU.flower: 0.2267, IoU.food: 0.1601, IoU.grass: 0.4112, IoU.ground: 0.0600, IoU.horse: 0.2854, IoU.keyboard: 0.5053, IoU.light: 0.0154, IoU.motorbike: 0.5604, IoU.mountain: 0.1931, IoU.mouse: 0.0000, IoU.person: 0.3449, IoU.plate: 0.0026, IoU.platform: 0.0884, IoU.pottedplant: 0.3433, IoU.road: 0.3033, IoU.rock: 0.1983, IoU.sheep: 0.0884, IoU.shelves: 0.0908, IoU.sidewalk: 0.0884, IoU.sign: 0.2474, IoU.sky: 0.6282, IoU.snow: 0.2852, IoU.sofa: 0.3135, IoU.table: 0.2664, IoU.track: 0.0000, IoU.train: 0.5089, IoU.tree: 0.3643, IoU.truck: 0.0594, IoU.tvmonitor: 0.3438, IoU.wall: 0.1207, IoU.water: 0.2585, IoU.window: 0.1602, IoU.wood: 0.1226, Acc.aeroplane: 0.9336, Acc.bag: 0.0988, Acc.bed: 0.2499, Acc.bedclothes: 0.3359, Acc.bench: 0.3417, Acc.bicycle: 0.9269, Acc.bird: 0.7838, Acc.boat: 0.7888, Acc.book: 0.0001, Acc.bottle: 0.7954, Acc.building: 0.1745, Acc.bus: 0.8902, Acc.cabinet: 0.2366, Acc.car: 0.8315, Acc.cat: 0.7794, Acc.ceiling: 0.5552, Acc.chair: 0.2707, Acc.cloth: 0.0454, Acc.computer: 0.8155, Acc.cow: 0.6354, Acc.cup: 0.1414, Acc.curtain: 0.4890, Acc.dog: 0.7650, Acc.door: 0.5314, Acc.fence: 0.6579, Acc.floor: 0.5253, Acc.flower: 0.4746, Acc.food: 0.7458, Acc.grass: 0.4409, Acc.ground: 0.0635, Acc.horse: 0.9233, Acc.keyboard: 0.5300, Acc.light: 0.0167, Acc.motorbike: 0.7919, Acc.mountain: 0.4827, Acc.mouse: 0.0178, Acc.person: 0.3846, Acc.plate: 0.0031, Acc.platform: 0.3405, Acc.pottedplant: 0.7710, Acc.road: 0.3802, Acc.rock: 0.4357, Acc.sheep: 0.8325, Acc.shelves: 0.3955, Acc.sidewalk: 0.5913, Acc.sign: 0.5605, Acc.sky: 0.6570, Acc.snow: 0.7050, Acc.sofa: 0.6914, Acc.table: 0.4398, Acc.track: 0.0001, Acc.train: 0.8530, Acc.tree: 0.3830, Acc.truck: 0.2002, Acc.tvmonitor: 0.4006, Acc.wall: 0.1295, Acc.water: 0.2911, Acc.window: 0.3637, Acc.wood: 0.2715, Prec.aeroplane: 0.4114, Prec.bag: 0.5891, Prec.bed: 0.0671, Prec.bedclothes: 0.1694, Prec.bench: 0.0630, Prec.bicycle: 0.4887, Prec.bird: 0.4943, Prec.boat: 0.2817, Prec.book: 1.0000, Prec.bottle: 0.5999, Prec.building: 0.8245, Prec.bus: 0.8054, Prec.cabinet: 0.3954, Prec.car: 0.7385, Prec.cat: 0.8597, Prec.ceiling: 0.4397, Prec.chair: 0.5653, Prec.cloth: 0.0386, Prec.computer: 0.0276, Prec.cow: 0.6358, Prec.cup: 0.3002, Prec.curtain: 0.2306, Prec.dog: 0.7942, Prec.door: 0.0879, Prec.fence: 0.1604, Prec.floor: 0.5776, Prec.flower: 0.3026, Prec.food: 0.1694, Prec.grass: 0.8591, Prec.ground: 0.5269, Prec.horse: 0.2923, Prec.keyboard: 0.9157, Prec.light: 0.1649, Prec.motorbike: 0.6572, Prec.mountain: 0.2435, Prec.mouse: 0.0000, Prec.person: 0.7696, Prec.plate: 0.0162, Prec.platform: 0.1067, Prec.pottedplant: 0.3823, Prec.road: 0.5999, Prec.rock: 0.2668, Prec.sheep: 0.0900, Prec.shelves: 0.1054, Prec.sidewalk: 0.0941, Prec.sign: 0.3070, Prec.sky: 0.9347, Prec.snow: 0.3238, Prec.sofa: 0.3646, Prec.table: 0.4033, Prec.track: 0.0001, Prec.train: 0.5578, Prec.tree: 0.8815, Prec.truck: 0.0780, Prec.tvmonitor: 0.7080, Prec.wall: 0.6385, Prec.water: 0.6976, Prec.window: 0.2225, Prec.wood: 0.1827
2023-05-18 23:32:57,420 - mmseg - INFO - Iter [2050/4000]	lr: 2.668e-03, eta: 0:57:24, time: 31.468, data_time: 30.470, memory: 19336, decode.loss_ce: 1.3824, decode.acc_seg: 32.2183, loss: 1.3824
2023-05-18 23:33:48,959 - mmseg - INFO - Iter [2100/4000]	lr: 2.609e-03, eta: 0:55:22, time: 1.031, data_time: 0.011, memory: 19336, decode.loss_ce: 1.3919, decode.acc_seg: 34.3711, loss: 1.3919
2023-05-18 23:34:39,457 - mmseg - INFO - Iter [2150/4000]	lr: 2.549e-03, eta: 0:53:23, time: 1.010, data_time: 0.011, memory: 19336, decode.loss_ce: 1.4074, decode.acc_seg: 35.0859, loss: 1.4074
2023-05-18 23:35:30,353 - mmseg - INFO - Iter [2200/4000]	lr: 2.489e-03, eta: 0:51:27, time: 1.018, data_time: 0.011, memory: 19336, decode.loss_ce: 1.4737, decode.acc_seg: 34.5721, loss: 1.4737
2023-05-18 23:36:21,054 - mmseg - INFO - Iter [2250/4000]	lr: 2.430e-03, eta: 0:49:34, time: 1.014, data_time: 0.011, memory: 19336, decode.loss_ce: 1.3860, decode.acc_seg: 33.1665, loss: 1.3860
2023-05-18 23:37:11,556 - mmseg - INFO - Iter [2300/4000]	lr: 2.370e-03, eta: 0:47:44, time: 1.010, data_time: 0.011, memory: 19336, decode.loss_ce: 1.3907, decode.acc_seg: 35.2417, loss: 1.3907
2023-05-18 23:38:02,220 - mmseg - INFO - Iter [2350/4000]	lr: 2.310e-03, eta: 0:45:56, time: 1.013, data_time: 0.011, memory: 19336, decode.loss_ce: 1.3865, decode.acc_seg: 33.6820, loss: 1.3865
2023-05-18 23:38:52,854 - mmseg - INFO - Iter [2400/4000]	lr: 2.249e-03, eta: 0:44:11, time: 1.013, data_time: 0.011, memory: 19336, decode.loss_ce: 1.3308, decode.acc_seg: 33.1284, loss: 1.3308
2023-05-18 23:39:43,720 - mmseg - INFO - Iter [2450/4000]	lr: 2.189e-03, eta: 0:42:27, time: 1.017, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3542, decode.acc_seg: 33.9362, loss: 1.3542
2023-05-18 23:40:36,558 - mmseg - INFO - Iter [2500/4000]	lr: 2.128e-03, eta: 0:40:48, time: 1.057, data_time: 0.058, memory: 19336, decode.loss_ce: 1.4589, decode.acc_seg: 35.0806, loss: 1.4589
2023-05-18 23:41:27,352 - mmseg - INFO - Iter [2550/4000]	lr: 2.067e-03, eta: 0:39:09, time: 1.016, data_time: 0.011, memory: 19336, decode.loss_ce: 1.3576, decode.acc_seg: 33.4225, loss: 1.3576
2023-05-18 23:42:17,854 - mmseg - INFO - Iter [2600/4000]	lr: 2.006e-03, eta: 0:37:31, time: 1.010, data_time: 0.011, memory: 19336, decode.loss_ce: 1.3680, decode.acc_seg: 33.2446, loss: 1.3680
2023-05-18 23:43:08,659 - mmseg - INFO - Iter [2650/4000]	lr: 1.945e-03, eta: 0:35:56, time: 1.016, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3865, decode.acc_seg: 36.2942, loss: 1.3865
2023-05-18 23:43:59,251 - mmseg - INFO - Iter [2700/4000]	lr: 1.883e-03, eta: 0:34:22, time: 1.012, data_time: 0.011, memory: 19336, decode.loss_ce: 1.3922, decode.acc_seg: 33.7967, loss: 1.3922
2023-05-18 23:44:50,052 - mmseg - INFO - Iter [2750/4000]	lr: 1.821e-03, eta: 0:32:49, time: 1.016, data_time: 0.012, memory: 19336, decode.loss_ce: 1.4329, decode.acc_seg: 35.3877, loss: 1.4329
2023-05-18 23:45:40,655 - mmseg - INFO - Iter [2800/4000]	lr: 1.759e-03, eta: 0:31:19, time: 1.012, data_time: 0.012, memory: 19336, decode.loss_ce: 1.2517, decode.acc_seg: 33.0803, loss: 1.2517
2023-05-18 23:46:31,355 - mmseg - INFO - Iter [2850/4000]	lr: 1.697e-03, eta: 0:29:49, time: 1.014, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3662, decode.acc_seg: 35.6325, loss: 1.3662
2023-05-18 23:47:22,352 - mmseg - INFO - Iter [2900/4000]	lr: 1.634e-03, eta: 0:28:21, time: 1.020, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3074, decode.acc_seg: 35.1174, loss: 1.3074
2023-05-18 23:48:13,356 - mmseg - INFO - Iter [2950/4000]	lr: 1.572e-03, eta: 0:26:54, time: 1.020, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3292, decode.acc_seg: 35.4787, loss: 1.3292
2023-05-18 23:49:04,260 - mmseg - INFO - Exp name: maskclip_plus_r50_deeplabv2_r101-d8_class_weight_480x480_4k_pascal_context_59.py
2023-05-18 23:49:04,260 - mmseg - INFO - Iter [3000/4000]	lr: 1.508e-03, eta: 0:25:29, time: 1.018, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3669, decode.acc_seg: 35.2243, loss: 1.3669
2023-05-18 23:49:55,053 - mmseg - INFO - Iter [3050/4000]	lr: 1.445e-03, eta: 0:24:04, time: 1.016, data_time: 0.012, memory: 19336, decode.loss_ce: 1.2595, decode.acc_seg: 34.8630, loss: 1.2595
2023-05-18 23:50:46,151 - mmseg - INFO - Iter [3100/4000]	lr: 1.381e-03, eta: 0:22:41, time: 1.022, data_time: 0.012, memory: 19336, decode.loss_ce: 1.2897, decode.acc_seg: 34.4928, loss: 1.2897
2023-05-18 23:51:39,158 - mmseg - INFO - Iter [3150/4000]	lr: 1.317e-03, eta: 0:21:19, time: 1.060, data_time: 0.058, memory: 19336, decode.loss_ce: 1.3043, decode.acc_seg: 34.7393, loss: 1.3043
2023-05-18 23:52:30,155 - mmseg - INFO - Iter [3200/4000]	lr: 1.252e-03, eta: 0:19:58, time: 1.020, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3266, decode.acc_seg: 34.6195, loss: 1.3266
2023-05-18 23:53:21,120 - mmseg - INFO - Iter [3250/4000]	lr: 1.187e-03, eta: 0:18:38, time: 1.019, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3425, decode.acc_seg: 35.1159, loss: 1.3425
2023-05-18 23:54:11,857 - mmseg - INFO - Iter [3300/4000]	lr: 1.122e-03, eta: 0:17:18, time: 1.015, data_time: 0.012, memory: 19336, decode.loss_ce: 1.2928, decode.acc_seg: 35.9269, loss: 1.2928
2023-05-18 23:55:02,856 - mmseg - INFO - Iter [3350/4000]	lr: 1.056e-03, eta: 0:15:59, time: 1.020, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3355, decode.acc_seg: 36.1373, loss: 1.3355
2023-05-18 23:55:53,154 - mmseg - INFO - Iter [3400/4000]	lr: 9.899e-04, eta: 0:14:41, time: 1.006, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3555, decode.acc_seg: 35.0603, loss: 1.3555
2023-05-18 23:56:43,255 - mmseg - INFO - Iter [3450/4000]	lr: 9.230e-04, eta: 0:13:24, time: 1.002, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3153, decode.acc_seg: 34.6357, loss: 1.3153
2023-05-18 23:57:34,258 - mmseg - INFO - Iter [3500/4000]	lr: 8.554e-04, eta: 0:12:08, time: 1.020, data_time: 0.013, memory: 19336, decode.loss_ce: 1.3806, decode.acc_seg: 34.6779, loss: 1.3806
2023-05-18 23:58:25,157 - mmseg - INFO - Iter [3550/4000]	lr: 7.872e-04, eta: 0:10:52, time: 1.018, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3494, decode.acc_seg: 37.0833, loss: 1.3494
2023-05-18 23:59:16,255 - mmseg - INFO - Iter [3600/4000]	lr: 7.183e-04, eta: 0:09:37, time: 1.022, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3499, decode.acc_seg: 36.2516, loss: 1.3499
2023-05-19 00:00:06,558 - mmseg - INFO - Iter [3650/4000]	lr: 6.484e-04, eta: 0:08:23, time: 1.006, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3412, decode.acc_seg: 35.4178, loss: 1.3412
2023-05-19 00:00:57,058 - mmseg - INFO - Iter [3700/4000]	lr: 5.776e-04, eta: 0:07:09, time: 1.010, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3462, decode.acc_seg: 34.4320, loss: 1.3462
2023-05-19 00:01:50,259 - mmseg - INFO - Iter [3750/4000]	lr: 5.056e-04, eta: 0:05:56, time: 1.064, data_time: 0.058, memory: 19336, decode.loss_ce: 1.3032, decode.acc_seg: 34.0252, loss: 1.3032
2023-05-19 00:02:40,754 - mmseg - INFO - Iter [3800/4000]	lr: 4.321e-04, eta: 0:04:44, time: 1.010, data_time: 0.011, memory: 19336, decode.loss_ce: 1.3754, decode.acc_seg: 35.6327, loss: 1.3754
2023-05-19 00:03:31,353 - mmseg - INFO - Iter [3850/4000]	lr: 3.567e-04, eta: 0:03:32, time: 1.012, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3173, decode.acc_seg: 33.6345, loss: 1.3173
2023-05-19 00:04:22,121 - mmseg - INFO - Iter [3900/4000]	lr: 2.787e-04, eta: 0:02:21, time: 1.015, data_time: 0.012, memory: 19336, decode.loss_ce: 1.2946, decode.acc_seg: 35.8549, loss: 1.2946
2023-05-19 00:05:12,652 - mmseg - INFO - Iter [3950/4000]	lr: 1.966e-04, eta: 0:01:10, time: 1.011, data_time: 0.012, memory: 19336, decode.loss_ce: 1.2732, decode.acc_seg: 34.8032, loss: 1.2732
2023-05-19 00:06:03,213 - mmseg - INFO - Saving checkpoint at 4000 iterations
2023-05-19 00:06:05,970 - mmseg - INFO - Exp name: maskclip_plus_r50_deeplabv2_r101-d8_class_weight_480x480_4k_pascal_context_59.py
2023-05-19 00:06:05,970 - mmseg - INFO - Iter [4000/4000]	lr: 1.028e-04, eta: 0:00:00, time: 1.066, data_time: 0.012, memory: 19336, decode.loss_ce: 1.3231, decode.acc_seg: 36.8842, loss: 1.3231
2023-05-19 00:27:30,588 - mmseg - INFO - per class results:
2023-05-19 00:27:30,591 - mmseg - INFO - 
+-------------+-------+-------+-------+
|    Class    |  IoU  |  Acc  |  Prec |
+-------------+-------+-------+-------+
|  aeroplane  | 42.25 | 90.58 | 44.19 |
|     bag     | 12.96 | 16.45 | 37.88 |
|     bed     |  5.61 | 22.13 |  6.98 |
|  bedclothes | 12.29 | 33.26 | 16.31 |
|    bench    |  4.92 | 31.33 |  5.52 |
|   bicycle   | 47.37 | 90.91 | 49.73 |
|     bird    | 45.18 | 80.98 | 50.54 |
|     boat    |  25.2 | 73.38 | 27.73 |
|     book    |  0.01 |  0.01 | 100.0 |
|    bottle   | 51.02 | 74.49 | 61.82 |
|   building  | 16.58 | 17.17 | 82.83 |
|     bus     | 73.31 | 85.38 | 83.83 |
|   cabinet   | 17.26 | 22.47 | 42.65 |
|     car     | 63.67 | 80.43 | 75.33 |
|     cat     |  68.4 | 76.73 | 86.31 |
|   ceiling   | 30.58 | 52.17 |  42.5 |
|    chair    | 23.47 |  28.5 | 57.06 |
|    cloth    |  2.41 |  5.06 |  4.4  |
|   computer  |  2.35 | 82.12 |  2.36 |
|     cow     | 39.24 | 57.05 | 55.69 |
|     cup     | 16.14 | 23.21 | 34.63 |
|   curtain   | 16.76 |  48.1 | 20.46 |
|     dog     | 62.61 | 73.57 | 80.79 |
|     door    |  8.47 | 53.72 |  9.13 |
|    fence    | 13.28 | 63.33 | 14.39 |
|    floor    | 37.15 | 52.74 | 55.68 |
|    flower   | 23.29 | 43.97 | 33.13 |
|     food    | 16.57 | 70.68 | 17.79 |
|    grass    | 47.26 | 51.46 | 85.27 |
|    ground   |  6.93 |  7.31 |  56.7 |
|    horse    | 28.97 | 90.81 | 29.84 |
|   keyboard  |  48.5 | 52.17 | 87.33 |
|    light    |  5.65 |  9.16 | 12.85 |
|  motorbike  | 55.27 | 78.19 | 65.34 |
|   mountain  | 17.18 | 42.67 | 22.34 |
|    mouse    |  0.01 |  4.25 |  0.01 |
|    person   | 32.82 | 38.21 | 69.95 |
|    plate    |  0.94 |  1.28 |  3.43 |
|   platform  |  8.74 | 33.18 | 10.61 |
| pottedplant | 33.47 | 76.57 | 37.29 |
|     road    | 27.76 |  34.4 |  59.0 |
|     rock    |  17.8 | 48.37 | 21.97 |
|    sheep    | 10.39 | 80.56 | 10.66 |
|   shelves   |  9.19 | 38.63 | 10.76 |
|   sidewalk  |  9.82 | 57.45 | 10.59 |
|     sign    | 24.15 | 49.76 | 31.94 |
|     sky     | 62.01 | 64.99 | 93.13 |
|     snow    | 29.47 | 72.07 | 33.27 |
|     sofa    | 31.89 | 67.33 | 37.73 |
|    table    | 26.25 | 41.23 | 41.96 |
|    track    |  0.02 |  0.03 |  0.04 |
|    train    | 52.22 | 83.31 | 58.32 |
|     tree    | 35.35 | 36.94 | 89.12 |
|    truck    |  6.35 | 23.06 |  8.06 |
|  tvmonitor  | 33.39 | 42.12 | 61.69 |
|     wall    | 14.14 | 15.34 | 64.38 |
|    water    | 34.05 | 39.12 | 72.44 |
|    window   | 14.78 | 35.54 |  20.2 |
|     wood    | 12.25 | 31.71 | 16.64 |
+-------------+-------+-------+-------+
2023-05-19 00:27:30,591 - mmseg - INFO - Summary:
2023-05-19 00:27:30,591 - mmseg - INFO - 
+-------+-------+-------+-------+
|  aAcc |  mIoU |  mAcc | mPrec |
+-------+-------+-------+-------+
| 45.92 | 25.68 | 47.41 | 41.06 |
+-------+-------+-------+-------+
2023-05-19 00:27:30,601 - mmseg - INFO - Exp name: maskclip_plus_r50_deeplabv2_r101-d8_class_weight_480x480_4k_pascal_context_59.py
2023-05-19 00:27:30,601 - mmseg - INFO - Iter(val) [5104]	aAcc: 0.4592, mIoU: 0.2568, mAcc: 0.4741, mPrec: 0.4106, IoU.aeroplane: 0.4225, IoU.bag: 0.1296, IoU.bed: 0.0561, IoU.bedclothes: 0.1229, IoU.bench: 0.0492, IoU.bicycle: 0.4737, IoU.bird: 0.4518, IoU.boat: 0.2520, IoU.book: 0.0001, IoU.bottle: 0.5102, IoU.building: 0.1658, IoU.bus: 0.7331, IoU.cabinet: 0.1726, IoU.car: 0.6367, IoU.cat: 0.6840, IoU.ceiling: 0.3058, IoU.chair: 0.2347, IoU.cloth: 0.0241, IoU.computer: 0.0235, IoU.cow: 0.3924, IoU.cup: 0.1614, IoU.curtain: 0.1676, IoU.dog: 0.6261, IoU.door: 0.0847, IoU.fence: 0.1328, IoU.floor: 0.3715, IoU.flower: 0.2329, IoU.food: 0.1657, IoU.grass: 0.4726, IoU.ground: 0.0693, IoU.horse: 0.2897, IoU.keyboard: 0.4850, IoU.light: 0.0565, IoU.motorbike: 0.5527, IoU.mountain: 0.1718, IoU.mouse: 0.0001, IoU.person: 0.3282, IoU.plate: 0.0094, IoU.platform: 0.0874, IoU.pottedplant: 0.3347, IoU.road: 0.2776, IoU.rock: 0.1780, IoU.sheep: 0.1039, IoU.shelves: 0.0919, IoU.sidewalk: 0.0982, IoU.sign: 0.2415, IoU.sky: 0.6201, IoU.snow: 0.2947, IoU.sofa: 0.3189, IoU.table: 0.2625, IoU.track: 0.0002, IoU.train: 0.5222, IoU.tree: 0.3535, IoU.truck: 0.0635, IoU.tvmonitor: 0.3339, IoU.wall: 0.1414, IoU.water: 0.3405, IoU.window: 0.1478, IoU.wood: 0.1225, Acc.aeroplane: 0.9058, Acc.bag: 0.1645, Acc.bed: 0.2213, Acc.bedclothes: 0.3326, Acc.bench: 0.3133, Acc.bicycle: 0.9091, Acc.bird: 0.8098, Acc.boat: 0.7338, Acc.book: 0.0001, Acc.bottle: 0.7449, Acc.building: 0.1717, Acc.bus: 0.8538, Acc.cabinet: 0.2247, Acc.car: 0.8043, Acc.cat: 0.7673, Acc.ceiling: 0.5217, Acc.chair: 0.2850, Acc.cloth: 0.0506, Acc.computer: 0.8212, Acc.cow: 0.5705, Acc.cup: 0.2321, Acc.curtain: 0.4810, Acc.dog: 0.7357, Acc.door: 0.5372, Acc.fence: 0.6333, Acc.floor: 0.5274, Acc.flower: 0.4397, Acc.food: 0.7068, Acc.grass: 0.5146, Acc.ground: 0.0731, Acc.horse: 0.9081, Acc.keyboard: 0.5217, Acc.light: 0.0916, Acc.motorbike: 0.7819, Acc.mountain: 0.4267, Acc.mouse: 0.0425, Acc.person: 0.3821, Acc.plate: 0.0128, Acc.platform: 0.3318, Acc.pottedplant: 0.7657, Acc.road: 0.3440, Acc.rock: 0.4837, Acc.sheep: 0.8056, Acc.shelves: 0.3863, Acc.sidewalk: 0.5745, Acc.sign: 0.4976, Acc.sky: 0.6499, Acc.snow: 0.7207, Acc.sofa: 0.6733, Acc.table: 0.4123, Acc.track: 0.0003, Acc.train: 0.8331, Acc.tree: 0.3694, Acc.truck: 0.2306, Acc.tvmonitor: 0.4212, Acc.wall: 0.1534, Acc.water: 0.3912, Acc.window: 0.3554, Acc.wood: 0.3171, Prec.aeroplane: 0.4419, Prec.bag: 0.3788, Prec.bed: 0.0698, Prec.bedclothes: 0.1631, Prec.bench: 0.0552, Prec.bicycle: 0.4973, Prec.bird: 0.5054, Prec.boat: 0.2773, Prec.book: 1.0000, Prec.bottle: 0.6182, Prec.building: 0.8283, Prec.bus: 0.8383, Prec.cabinet: 0.4265, Prec.car: 0.7533, Prec.cat: 0.8631, Prec.ceiling: 0.4250, Prec.chair: 0.5706, Prec.cloth: 0.0440, Prec.computer: 0.0236, Prec.cow: 0.5569, Prec.cup: 0.3463, Prec.curtain: 0.2046, Prec.dog: 0.8079, Prec.door: 0.0913, Prec.fence: 0.1439, Prec.floor: 0.5568, Prec.flower: 0.3313, Prec.food: 0.1779, Prec.grass: 0.8527, Prec.ground: 0.5670, Prec.horse: 0.2984, Prec.keyboard: 0.8733, Prec.light: 0.1285, Prec.motorbike: 0.6534, Prec.mountain: 0.2234, Prec.mouse: 0.0001, Prec.person: 0.6995, Prec.plate: 0.0343, Prec.platform: 0.1061, Prec.pottedplant: 0.3729, Prec.road: 0.5900, Prec.rock: 0.2197, Prec.sheep: 0.1066, Prec.shelves: 0.1076, Prec.sidewalk: 0.1059, Prec.sign: 0.3194, Prec.sky: 0.9313, Prec.snow: 0.3327, Prec.sofa: 0.3773, Prec.table: 0.4196, Prec.track: 0.0004, Prec.train: 0.5832, Prec.tree: 0.8912, Prec.truck: 0.0806, Prec.tvmonitor: 0.6169, Prec.wall: 0.6438, Prec.water: 0.7244, Prec.window: 0.2020, Prec.wood: 0.1664
