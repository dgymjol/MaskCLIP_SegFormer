{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.2, V11.2.152\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.9.1+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.10.1+cu111\nOpenCV: 4.7.0\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMSegmentation: 0.20.2+e20a1c2", "seed": 736543734, "exp_name": "maskclip_plus_r50_deeplabv2_r101-d8_480x480_4k_pascal_context_59.py", "mmseg_version": "0.20.2+e20a1c2", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet101_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet101_v1c'),\n    decode_head=dict(\n        type='MaskClipPlusHead',\n        in_channels=2048,\n        channels=1024,\n        num_classes=0,\n        dropout_ratio=0,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n        decode_module_cfg=dict(\n            type='ASPPHeadV2',\n            dilations=(6, 12, 18, 24),\n            in_channels=2048,\n            channels=1024,\n            num_classes=0,\n            dropout_ratio=0,\n            norm_cfg=dict(type='SyncBN', requires_grad=True),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            init_cfg=None),\n        text_categories=59,\n        text_channels=1024,\n        text_embeddings_path='pretrain/context_RN50_clip_text.pth',\n        cls_bg=False,\n        norm_feat=False,\n        clip_unlabeled_cats=[\n            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\n            19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n            36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n            53, 54, 55, 56, 57, 58\n        ],\n        clip_cfg=dict(\n            type='ResNetClip',\n            depth=50,\n            norm_cfg=dict(type='SyncBN', requires_grad=True),\n            contract_dilation=True),\n        clip_weights_path='pretrain/RN50_clip_weights.pth',\n        reset_counter=True,\n        start_clip_guided=(1, -1),\n        start_self_train=(-1, -1)),\n    feed_img_to_decode_head=True,\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'PascalContextDataset59'\ndata_root = 'data/VOCdevkit/VOC2010/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\nimg_scale = (520, 520)\ncrop_size = (480, 480)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        reduce_zero_label=True,\n        suppress_labels=[\n            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\n            19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n            36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n            53, 54, 55, 56, 57, 58\n        ]),\n    dict(type='Resize', img_scale=(520, 520), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(480, 480), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(480, 480), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(520, 520),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=4,\n    train=dict(\n        type='PascalContextDataset59',\n        data_root='data/VOCdevkit/VOC2010/',\n        img_dir='JPEGImages',\n        ann_dir='SegmentationClassContext',\n        split='ImageSets/SegmentationContext/train.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='LoadAnnotations',\n                reduce_zero_label=True,\n                suppress_labels=[\n                    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n                    17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n                    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\n                    47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58\n                ]),\n            dict(type='Resize', img_scale=(520, 520), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(480, 480), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(480, 480), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='PascalContextDataset59',\n        data_root='data/VOCdevkit/VOC2010/',\n        img_dir='JPEGImages',\n        ann_dir='SegmentationClassContext',\n        split='ImageSets/SegmentationContext/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(520, 520),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='PascalContextDataset59',\n        data_root='data/VOCdevkit/VOC2010/',\n        img_dir='JPEGImages',\n        ann_dir='SegmentationClassContext',\n        split='ImageSets/SegmentationContext/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(520, 520),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.00025)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=4000)\ncheckpoint_config = dict(by_epoch=False, interval=2000)\nevaluation = dict(interval=2000, metric='mIoU', pre_eval=True)\nsuppress_labels = [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n    40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58\n]\nfind_unused_parameters = True\nwork_dir = 'work_dirs/anno_free/r50-dl2'\ngpu_ids = range(0, 1)\nauto_resume = False\nseed = 736543734\n", "CLASSES": ["aeroplane", "bag", "bed", "bedclothes", "bench", "bicycle", "bird", "boat", "book", "bottle", "building", "bus", "cabinet", "car", "cat", "ceiling", "chair", "cloth", "computer", "cow", "cup", "curtain", "dog", "door", "fence", "floor", "flower", "food", "grass", "ground", "horse", "keyboard", "light", "motorbike", "mountain", "mouse", "person", "plate", "platform", "pottedplant", "road", "rock", "sheep", "shelves", "sidewalk", "sign", "sky", "snow", "sofa", "table", "track", "train", "tree", "truck", "tvmonitor", "wall", "water", "window", "wood"], "PALETTE": [[180, 120, 120], [6, 230, 230], [80, 50, 50], [4, 200, 3], [120, 120, 80], [140, 140, 140], [204, 5, 255], [230, 230, 230], [4, 250, 7], [224, 5, 255], [235, 255, 7], [150, 5, 61], [120, 120, 70], [8, 255, 51], [255, 6, 82], [143, 255, 140], [204, 255, 4], [255, 51, 7], [204, 70, 3], [0, 102, 200], [61, 230, 250], [255, 6, 51], [11, 102, 255], [255, 7, 71], [255, 9, 224], [9, 7, 230], [220, 220, 220], [255, 9, 92], [112, 9, 255], [8, 255, 214], [7, 255, 224], [255, 184, 6], [10, 255, 71], [255, 41, 10], [7, 255, 255], [224, 255, 8], [102, 8, 255], [255, 61, 6], [255, 194, 7], [255, 122, 8], [0, 255, 20], [255, 8, 41], [255, 5, 153], [6, 51, 255], [235, 12, 255], [160, 150, 20], [0, 163, 255], [140, 140, 140], [250, 10, 15], [20, 255, 0], [31, 255, 0], [255, 31, 0], [255, 224, 0], [153, 255, 0], [0, 0, 255], [255, 71, 0], [0, 235, 255], [0, 173, 255], [31, 0, 255]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00495, "memory": 18986, "data_time": 0.02099, "decode.loss_ce": 2.97791, "decode.acc_seg": 2.23127, "loss": 2.97791, "time": 1.04558}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00489, "memory": 18986, "data_time": 0.01052, "decode.loss_ce": 2.58261, "decode.acc_seg": 6.81549, "loss": 2.58261, "time": 0.95009}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00484, "memory": 18986, "data_time": 0.01061, "decode.loss_ce": 2.29575, "decode.acc_seg": 14.92934, "loss": 2.29575, "time": 0.95097}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00478, "memory": 18986, "data_time": 0.01055, "decode.loss_ce": 2.12559, "decode.acc_seg": 19.03653, "loss": 2.12559, "time": 0.95131}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00472, "memory": 18986, "data_time": 0.01056, "decode.loss_ce": 2.01177, "decode.acc_seg": 21.57427, "loss": 2.01177, "time": 0.95135}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00467, "memory": 18986, "data_time": 0.0107, "decode.loss_ce": 1.88012, "decode.acc_seg": 24.56782, "loss": 1.88012, "time": 0.95082}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00461, "memory": 18986, "data_time": 0.01069, "decode.loss_ce": 1.8414, "decode.acc_seg": 24.26276, "loss": 1.8414, "time": 0.95059}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00456, "memory": 18986, "data_time": 0.01074, "decode.loss_ce": 1.83901, "decode.acc_seg": 25.74858, "loss": 1.83901, "time": 0.95073}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.0045, "memory": 18986, "data_time": 0.01083, "decode.loss_ce": 1.76235, "decode.acc_seg": 27.94015, "loss": 1.76235, "time": 0.95026}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00445, "memory": 18986, "data_time": 0.01078, "decode.loss_ce": 1.7446, "decode.acc_seg": 25.90321, "loss": 1.7446, "time": 0.95034}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00439, "memory": 18986, "data_time": 0.01074, "decode.loss_ce": 1.74777, "decode.acc_seg": 26.45956, "loss": 1.74777, "time": 0.95016}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00433, "memory": 18986, "data_time": 0.01066, "decode.loss_ce": 1.77987, "decode.acc_seg": 28.31055, "loss": 1.77987, "time": 0.94974}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.00428, "memory": 18986, "data_time": 0.05761, "decode.loss_ce": 1.67698, "decode.acc_seg": 29.4996, "loss": 1.67698, "time": 0.99559}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.00422, "memory": 18986, "data_time": 0.01034, "decode.loss_ce": 1.61556, "decode.acc_seg": 29.33269, "loss": 1.61556, "time": 0.94826}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.00417, "memory": 18986, "data_time": 0.01044, "decode.loss_ce": 1.61426, "decode.acc_seg": 29.50702, "loss": 1.61426, "time": 0.94895}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.00411, "memory": 18986, "data_time": 0.01052, "decode.loss_ce": 1.58178, "decode.acc_seg": 29.80882, "loss": 1.58178, "time": 0.94868}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.00405, "memory": 18986, "data_time": 0.01067, "decode.loss_ce": 1.71109, "decode.acc_seg": 30.16336, "loss": 1.71109, "time": 0.94982}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.004, "memory": 18986, "data_time": 0.01082, "decode.loss_ce": 1.57656, "decode.acc_seg": 29.10205, "loss": 1.57656, "time": 0.95003}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 0.00394, "memory": 18986, "data_time": 0.01076, "decode.loss_ce": 1.58758, "decode.acc_seg": 28.95928, "loss": 1.58758, "time": 0.94985}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.00388, "memory": 18986, "data_time": 0.01082, "decode.loss_ce": 1.54106, "decode.acc_seg": 31.79937, "loss": 1.54106, "time": 0.95097}
{"mode": "train", "epoch": 2, "iter": 1050, "lr": 0.00383, "memory": 18986, "data_time": 0.01093, "decode.loss_ce": 1.56127, "decode.acc_seg": 29.83202, "loss": 1.56127, "time": 0.95082}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.00377, "memory": 18986, "data_time": 0.01101, "decode.loss_ce": 1.51325, "decode.acc_seg": 30.05368, "loss": 1.51325, "time": 0.95121}
{"mode": "train", "epoch": 2, "iter": 1150, "lr": 0.00371, "memory": 18986, "data_time": 0.01094, "decode.loss_ce": 1.53798, "decode.acc_seg": 30.85708, "loss": 1.53798, "time": 0.95045}
{"mode": "train", "epoch": 2, "iter": 1200, "lr": 0.00366, "memory": 18986, "data_time": 0.01097, "decode.loss_ce": 1.55971, "decode.acc_seg": 31.91091, "loss": 1.55971, "time": 0.95047}
{"mode": "train", "epoch": 3, "iter": 1250, "lr": 0.0036, "memory": 18986, "data_time": 0.05835, "decode.loss_ce": 1.60394, "decode.acc_seg": 31.83931, "loss": 1.60394, "time": 0.99782}
{"mode": "train", "epoch": 3, "iter": 1300, "lr": 0.00354, "memory": 18986, "data_time": 0.01047, "decode.loss_ce": 1.54493, "decode.acc_seg": 32.92426, "loss": 1.54493, "time": 0.94894}
{"mode": "train", "epoch": 3, "iter": 1350, "lr": 0.00348, "memory": 18986, "data_time": 0.01075, "decode.loss_ce": 1.54337, "decode.acc_seg": 32.77582, "loss": 1.54337, "time": 0.94957}
{"mode": "train", "epoch": 3, "iter": 1400, "lr": 0.00343, "memory": 18986, "data_time": 0.01072, "decode.loss_ce": 1.51506, "decode.acc_seg": 31.67258, "loss": 1.51506, "time": 0.94983}
{"mode": "train", "epoch": 3, "iter": 1450, "lr": 0.00337, "memory": 18986, "data_time": 0.01083, "decode.loss_ce": 1.46795, "decode.acc_seg": 32.1569, "loss": 1.46795, "time": 0.94978}
{"mode": "train", "epoch": 3, "iter": 1500, "lr": 0.00331, "memory": 18986, "data_time": 0.0109, "decode.loss_ce": 1.60116, "decode.acc_seg": 31.99337, "loss": 1.60116, "time": 0.9498}
{"mode": "train", "epoch": 3, "iter": 1550, "lr": 0.00325, "memory": 18986, "data_time": 0.01099, "decode.loss_ce": 1.5754, "decode.acc_seg": 31.47722, "loss": 1.5754, "time": 0.94989}
{"mode": "train", "epoch": 3, "iter": 1600, "lr": 0.0032, "memory": 18986, "data_time": 0.01092, "decode.loss_ce": 1.54242, "decode.acc_seg": 31.08317, "loss": 1.54242, "time": 0.94968}
{"mode": "train", "epoch": 3, "iter": 1650, "lr": 0.00314, "memory": 18986, "data_time": 0.01094, "decode.loss_ce": 1.48663, "decode.acc_seg": 30.95709, "loss": 1.48663, "time": 0.94988}
{"mode": "train", "epoch": 3, "iter": 1700, "lr": 0.00308, "memory": 18986, "data_time": 0.01095, "decode.loss_ce": 1.47173, "decode.acc_seg": 31.31087, "loss": 1.47173, "time": 0.94932}
{"mode": "train", "epoch": 3, "iter": 1750, "lr": 0.00302, "memory": 18986, "data_time": 0.011, "decode.loss_ce": 1.47438, "decode.acc_seg": 32.19328, "loss": 1.47438, "time": 0.94994}
{"mode": "train", "epoch": 3, "iter": 1800, "lr": 0.00296, "memory": 18986, "data_time": 0.01093, "decode.loss_ce": 1.43054, "decode.acc_seg": 32.79753, "loss": 1.43054, "time": 0.95036}
{"mode": "train", "epoch": 3, "iter": 1850, "lr": 0.0029, "memory": 18986, "data_time": 0.01098, "decode.loss_ce": 1.48471, "decode.acc_seg": 32.44453, "loss": 1.48471, "time": 0.95066}
{"mode": "train", "epoch": 4, "iter": 1900, "lr": 0.00284, "memory": 18986, "data_time": 0.05784, "decode.loss_ce": 1.42944, "decode.acc_seg": 32.25279, "loss": 1.42944, "time": 0.99693}
{"mode": "train", "epoch": 4, "iter": 1950, "lr": 0.00279, "memory": 18986, "data_time": 0.01028, "decode.loss_ce": 1.40236, "decode.acc_seg": 32.47314, "loss": 1.40236, "time": 0.94983}
{"mode": "train", "epoch": 4, "iter": 2000, "lr": 0.00273, "memory": 18986, "data_time": 0.01041, "decode.loss_ce": 1.45783, "decode.acc_seg": 34.06406, "loss": 1.45783, "time": 0.9899}
{"mode": "val", "epoch": 4, "iter": 5104, "lr": 0.00273, "aAcc": 0.4504, "mIoU": 0.2426, "mAcc": 0.4454, "mPrec": 0.3934, "IoU.aeroplane": 0.4123, "IoU.bag": 0.0039, "IoU.bed": 0.0402, "IoU.bedclothes": 0.0997, "IoU.bench": 0.0329, "IoU.bicycle": 0.447, "IoU.bird": 0.4566, "IoU.boat": 0.2368, "IoU.book": 0.0, "IoU.bottle": 0.5279, "IoU.building": 0.1541, "IoU.bus": 0.6917, "IoU.cabinet": 0.1688, "IoU.car": 0.6477, "IoU.cat": 0.6819, "IoU.ceiling": 0.3059, "IoU.chair": 0.2378, "IoU.cloth": 0.0206, "IoU.computer": 0.0238, "IoU.cow": 0.3513, "IoU.cup": 0.0803, "IoU.curtain": 0.1807, "IoU.dog": 0.5882, "IoU.door": 0.0824, "IoU.fence": 0.1355, "IoU.floor": 0.3433, "IoU.flower": 0.1503, "IoU.food": 0.1608, "IoU.grass": 0.4239, "IoU.ground": 0.0504, "IoU.horse": 0.2955, "IoU.keyboard": 0.5291, "IoU.light": 0.0073, "IoU.motorbike": 0.507, "IoU.mountain": 0.1727, "IoU.mouse": 0.0, "IoU.person": 0.339, "IoU.plate": 0.0, "IoU.platform": 0.0781, "IoU.pottedplant": 0.3362, "IoU.road": 0.3138, "IoU.rock": 0.1779, "IoU.sheep": 0.078, "IoU.shelves": 0.0772, "IoU.sidewalk": 0.0965, "IoU.sign": 0.2263, "IoU.sky": 0.6362, "IoU.snow": 0.2785, "IoU.sofa": 0.2822, "IoU.table": 0.2673, "IoU.track": 0.0, "IoU.train": 0.4808, "IoU.tree": 0.3838, "IoU.truck": 0.0652, "IoU.tvmonitor": 0.2779, "IoU.wall": 0.1234, "IoU.water": 0.2888, "IoU.window": 0.1374, "IoU.wood": 0.1226, "Acc.aeroplane": 0.897, "Acc.bag": 0.004, "Acc.bed": 0.1538, "Acc.bedclothes": 0.2849, "Acc.bench": 0.2467, "Acc.bicycle": 0.9022, "Acc.bird": 0.8422, "Acc.boat": 0.7162, "Acc.book": 0.0, "Acc.bottle": 0.7512, "Acc.building": 0.1587, "Acc.bus": 0.8071, "Acc.cabinet": 0.2243, "Acc.car": 0.831, "Acc.cat": 0.808, "Acc.ceiling": 0.5706, "Acc.chair": 0.2963, "Acc.cloth": 0.044, "Acc.computer": 0.8461, "Acc.cow": 0.5054, "Acc.cup": 0.0885, "Acc.curtain": 0.4694, "Acc.dog": 0.6992, "Acc.door": 0.5358, "Acc.fence": 0.6176, "Acc.floor": 0.5233, "Acc.flower": 0.196, "Acc.food": 0.6568, "Acc.grass": 0.4644, "Acc.ground": 0.0527, "Acc.horse": 0.8785, "Acc.keyboard": 0.5428, "Acc.light": 0.0077, "Acc.motorbike": 0.781, "Acc.mountain": 0.4288, "Acc.mouse": 0.0096, "Acc.person": 0.3768, "Acc.plate": 0.0, "Acc.platform": 0.2696, "Acc.pottedplant": 0.7938, "Acc.road": 0.4092, "Acc.rock": 0.4026, "Acc.sheep": 0.7866, "Acc.shelves": 0.3431, "Acc.sidewalk": 0.4922, "Acc.sign": 0.3763, "Acc.sky": 0.6623, "Acc.snow": 0.6256, "Acc.sofa": 0.6893, "Acc.table": 0.4882, "Acc.track": 0.0, "Acc.train": 0.8428, "Acc.tree": 0.4063, "Acc.truck": 0.1287, "Acc.tvmonitor": 0.3236, "Acc.wall": 0.1318, "Acc.water": 0.3401, "Acc.window": 0.2416, "Acc.wood": 0.3056, "Prec.aeroplane": 0.4328, "Prec.bag": 0.1893, "Prec.bed": 0.0517, "Prec.bedclothes": 0.1329, "Prec.bench": 0.0366, "Prec.bicycle": 0.4698, "Prec.bird": 0.4994, "Prec.boat": 0.2614, "Prec.book": NaN, "Prec.bottle": 0.6398, "Prec.building": 0.8429, "Prec.bus": 0.8287, "Prec.cabinet": 0.4056, "Prec.car": 0.746, "Prec.cat": 0.8138, "Prec.ceiling": 0.3973, "Prec.chair": 0.5465, "Prec.cloth": 0.0372, "Prec.computer": 0.0239, "Prec.cow": 0.5353, "Prec.cup": 0.4642, "Prec.curtain": 0.2271, "Prec.dog": 0.7874, "Prec.door": 0.0888, "Prec.fence": 0.1479, "Prec.floor": 0.4994, "Prec.flower": 0.3919, "Prec.food": 0.1755, "Prec.grass": 0.8294, "Prec.ground": 0.5356, "Prec.horse": 0.3081, "Prec.keyboard": 0.9544, "Prec.light": 0.1274, "Prec.motorbike": 0.591, "Prec.mountain": 0.2242, "Prec.mouse": 0.0, "Prec.person": 0.7713, "Prec.plate": 0.0, "Prec.platform": 0.0991, "Prec.pottedplant": 0.3683, "Prec.road": 0.5737, "Prec.rock": 0.2418, "Prec.sheep": 0.0797, "Prec.shelves": 0.0906, "Prec.sidewalk": 0.1072, "Prec.sign": 0.3622, "Prec.sky": 0.9417, "Prec.snow": 0.3342, "Prec.sofa": 0.3233, "Prec.table": 0.3714, "Prec.track": 0.0, "Prec.train": 0.5281, "Prec.tree": 0.8741, "Prec.truck": 0.1165, "Prec.tvmonitor": 0.6632, "Prec.wall": 0.6575, "Prec.water": 0.6568, "Prec.window": 0.2415, "Prec.wood": 0.17}
{"mode": "train", "epoch": 4, "iter": 2050, "lr": 0.00267, "memory": 18986, "data_time": 22.10298, "decode.loss_ce": 1.41581, "decode.acc_seg": 31.75134, "loss": 1.41581, "time": 23.03921}
{"mode": "train", "epoch": 4, "iter": 2100, "lr": 0.00261, "memory": 18986, "data_time": 0.00995, "decode.loss_ce": 1.36383, "decode.acc_seg": 32.37097, "loss": 1.36383, "time": 0.94973}
{"mode": "train", "epoch": 4, "iter": 2150, "lr": 0.00255, "memory": 18986, "data_time": 0.01, "decode.loss_ce": 1.43957, "decode.acc_seg": 33.79275, "loss": 1.43957, "time": 0.95015}
{"mode": "train", "epoch": 4, "iter": 2200, "lr": 0.00249, "memory": 18986, "data_time": 0.01012, "decode.loss_ce": 1.36032, "decode.acc_seg": 33.38074, "loss": 1.36032, "time": 0.95028}
{"mode": "train", "epoch": 4, "iter": 2250, "lr": 0.00243, "memory": 18986, "data_time": 0.01048, "decode.loss_ce": 1.44485, "decode.acc_seg": 33.258, "loss": 1.44485, "time": 0.95057}
{"mode": "train", "epoch": 4, "iter": 2300, "lr": 0.00237, "memory": 18986, "data_time": 0.01027, "decode.loss_ce": 1.40264, "decode.acc_seg": 33.00201, "loss": 1.40264, "time": 0.94979}
{"mode": "train", "epoch": 4, "iter": 2350, "lr": 0.00231, "memory": 18986, "data_time": 0.01068, "decode.loss_ce": 1.38251, "decode.acc_seg": 33.22576, "loss": 1.38251, "time": 0.94994}
{"mode": "train", "epoch": 4, "iter": 2400, "lr": 0.00225, "memory": 18986, "data_time": 0.01079, "decode.loss_ce": 1.38303, "decode.acc_seg": 32.80353, "loss": 1.38303, "time": 0.95042}
{"mode": "train", "epoch": 4, "iter": 2450, "lr": 0.00219, "memory": 18986, "data_time": 0.01102, "decode.loss_ce": 1.41494, "decode.acc_seg": 34.31062, "loss": 1.41494, "time": 0.9502}
{"mode": "train", "epoch": 5, "iter": 2500, "lr": 0.00213, "memory": 18986, "data_time": 0.05796, "decode.loss_ce": 1.38856, "decode.acc_seg": 33.44661, "loss": 1.38856, "time": 0.99703}
{"mode": "train", "epoch": 5, "iter": 2550, "lr": 0.00207, "memory": 18986, "data_time": 0.01021, "decode.loss_ce": 1.33948, "decode.acc_seg": 34.29739, "loss": 1.33948, "time": 0.94813}
{"mode": "train", "epoch": 5, "iter": 2600, "lr": 0.00201, "memory": 18986, "data_time": 0.01026, "decode.loss_ce": 1.32279, "decode.acc_seg": 33.23939, "loss": 1.32279, "time": 0.94942}
{"mode": "train", "epoch": 5, "iter": 2650, "lr": 0.00194, "memory": 18986, "data_time": 0.01037, "decode.loss_ce": 1.37147, "decode.acc_seg": 34.52293, "loss": 1.37147, "time": 0.95017}
{"mode": "train", "epoch": 5, "iter": 2700, "lr": 0.00188, "memory": 18986, "data_time": 0.01012, "decode.loss_ce": 1.39277, "decode.acc_seg": 34.35477, "loss": 1.39277, "time": 0.94972}
{"mode": "train", "epoch": 5, "iter": 2750, "lr": 0.00182, "memory": 18986, "data_time": 0.01045, "decode.loss_ce": 1.30605, "decode.acc_seg": 33.80767, "loss": 1.30605, "time": 0.95025}
{"mode": "train", "epoch": 5, "iter": 2800, "lr": 0.00176, "memory": 18986, "data_time": 0.01045, "decode.loss_ce": 1.3503, "decode.acc_seg": 34.49544, "loss": 1.3503, "time": 0.94998}
{"mode": "train", "epoch": 5, "iter": 2850, "lr": 0.0017, "memory": 18986, "data_time": 0.01065, "decode.loss_ce": 1.41187, "decode.acc_seg": 35.12323, "loss": 1.41187, "time": 0.95024}
{"mode": "train", "epoch": 5, "iter": 2900, "lr": 0.00163, "memory": 18986, "data_time": 0.01068, "decode.loss_ce": 1.37228, "decode.acc_seg": 33.97278, "loss": 1.37228, "time": 0.94999}
{"mode": "train", "epoch": 5, "iter": 2950, "lr": 0.00157, "memory": 18986, "data_time": 0.01069, "decode.loss_ce": 1.37249, "decode.acc_seg": 34.3994, "loss": 1.37249, "time": 0.9501}
{"mode": "train", "epoch": 5, "iter": 3000, "lr": 0.00151, "memory": 18986, "data_time": 0.01077, "decode.loss_ce": 1.38426, "decode.acc_seg": 34.60595, "loss": 1.38426, "time": 0.94992}
{"mode": "train", "epoch": 5, "iter": 3050, "lr": 0.00144, "memory": 18986, "data_time": 0.01087, "decode.loss_ce": 1.3648, "decode.acc_seg": 34.01034, "loss": 1.3648, "time": 0.94987}
{"mode": "train", "epoch": 5, "iter": 3100, "lr": 0.00138, "memory": 18986, "data_time": 0.01086, "decode.loss_ce": 1.36593, "decode.acc_seg": 33.49059, "loss": 1.36593, "time": 0.95022}
{"mode": "train", "epoch": 6, "iter": 3150, "lr": 0.00132, "memory": 18986, "data_time": 0.05621, "decode.loss_ce": 1.33035, "decode.acc_seg": 33.86645, "loss": 1.33035, "time": 0.99403}
{"mode": "train", "epoch": 6, "iter": 3200, "lr": 0.00125, "memory": 18986, "data_time": 0.00994, "decode.loss_ce": 1.39575, "decode.acc_seg": 35.23901, "loss": 1.39575, "time": 0.94869}
{"mode": "train", "epoch": 6, "iter": 3250, "lr": 0.00119, "memory": 18986, "data_time": 0.01036, "decode.loss_ce": 1.3538, "decode.acc_seg": 34.10631, "loss": 1.3538, "time": 0.94904}
{"mode": "train", "epoch": 6, "iter": 3300, "lr": 0.00112, "memory": 18986, "data_time": 0.01069, "decode.loss_ce": 1.3399, "decode.acc_seg": 34.41362, "loss": 1.3399, "time": 0.94951}
{"mode": "train", "epoch": 6, "iter": 3350, "lr": 0.00106, "memory": 18986, "data_time": 0.01047, "decode.loss_ce": 1.30594, "decode.acc_seg": 34.07364, "loss": 1.30594, "time": 0.94938}
{"mode": "train", "epoch": 6, "iter": 3400, "lr": 0.00099, "memory": 18986, "data_time": 0.01062, "decode.loss_ce": 1.39516, "decode.acc_seg": 35.38264, "loss": 1.39516, "time": 0.95011}
{"mode": "train", "epoch": 6, "iter": 3450, "lr": 0.00092, "memory": 18986, "data_time": 0.01066, "decode.loss_ce": 1.30222, "decode.acc_seg": 34.28938, "loss": 1.30222, "time": 0.95078}
{"mode": "train", "epoch": 6, "iter": 3500, "lr": 0.00086, "memory": 18986, "data_time": 0.01072, "decode.loss_ce": 1.29125, "decode.acc_seg": 35.38832, "loss": 1.29125, "time": 0.95068}
{"mode": "train", "epoch": 6, "iter": 3550, "lr": 0.00079, "memory": 18986, "data_time": 0.01091, "decode.loss_ce": 1.29422, "decode.acc_seg": 34.56098, "loss": 1.29422, "time": 0.95155}
{"mode": "train", "epoch": 6, "iter": 3600, "lr": 0.00072, "memory": 18986, "data_time": 0.01101, "decode.loss_ce": 1.32784, "decode.acc_seg": 33.89267, "loss": 1.32784, "time": 0.95169}
{"mode": "train", "epoch": 6, "iter": 3650, "lr": 0.00065, "memory": 18986, "data_time": 0.01094, "decode.loss_ce": 1.31265, "decode.acc_seg": 35.30644, "loss": 1.31265, "time": 0.95154}
{"mode": "train", "epoch": 6, "iter": 3700, "lr": 0.00058, "memory": 18986, "data_time": 0.01099, "decode.loss_ce": 1.34644, "decode.acc_seg": 34.57597, "loss": 1.34644, "time": 0.95161}
{"mode": "train", "epoch": 7, "iter": 3750, "lr": 0.00051, "memory": 18986, "data_time": 0.05904, "decode.loss_ce": 1.36956, "decode.acc_seg": 35.25465, "loss": 1.36956, "time": 0.99915}
{"mode": "train", "epoch": 7, "iter": 3800, "lr": 0.00043, "memory": 18986, "data_time": 0.01002, "decode.loss_ce": 1.33681, "decode.acc_seg": 35.71608, "loss": 1.33681, "time": 0.94849}
{"mode": "train", "epoch": 7, "iter": 3850, "lr": 0.00036, "memory": 18986, "data_time": 0.01019, "decode.loss_ce": 1.346, "decode.acc_seg": 36.30182, "loss": 1.346, "time": 0.94921}
{"mode": "train", "epoch": 7, "iter": 3900, "lr": 0.00028, "memory": 18986, "data_time": 0.01032, "decode.loss_ce": 1.31408, "decode.acc_seg": 33.70851, "loss": 1.31408, "time": 0.94964}
{"mode": "train", "epoch": 7, "iter": 3950, "lr": 0.0002, "memory": 18986, "data_time": 0.01036, "decode.loss_ce": 1.28865, "decode.acc_seg": 34.89553, "loss": 1.28865, "time": 0.94983}
{"mode": "train", "epoch": 7, "iter": 4000, "lr": 0.0001, "memory": 18986, "data_time": 0.01047, "decode.loss_ce": 1.31591, "decode.acc_seg": 35.02813, "loss": 1.31591, "time": 0.98873}
{"mode": "val", "epoch": 7, "iter": 5104, "lr": 0.0001, "aAcc": 0.4494, "mIoU": 0.2482, "mAcc": 0.4574, "mPrec": 0.3941, "IoU.aeroplane": 0.4035, "IoU.bag": 0.0225, "IoU.bed": 0.0412, "IoU.bedclothes": 0.1162, "IoU.bench": 0.0395, "IoU.bicycle": 0.4739, "IoU.bird": 0.4643, "IoU.boat": 0.2283, "IoU.book": 0.0, "IoU.bottle": 0.524, "IoU.building": 0.1652, "IoU.bus": 0.6891, "IoU.cabinet": 0.1741, "IoU.car": 0.617, "IoU.cat": 0.6625, "IoU.ceiling": 0.3097, "IoU.chair": 0.238, "IoU.cloth": 0.0252, "IoU.computer": 0.0211, "IoU.cow": 0.3428, "IoU.cup": 0.216, "IoU.curtain": 0.1683, "IoU.dog": 0.5731, "IoU.door": 0.0762, "IoU.fence": 0.1358, "IoU.floor": 0.3471, "IoU.flower": 0.2261, "IoU.food": 0.155, "IoU.grass": 0.4538, "IoU.ground": 0.066, "IoU.horse": 0.2593, "IoU.keyboard": 0.5736, "IoU.light": 0.0566, "IoU.motorbike": 0.5255, "IoU.mountain": 0.1982, "IoU.mouse": 0.0001, "IoU.person": 0.3321, "IoU.plate": 0.0009, "IoU.platform": 0.0755, "IoU.pottedplant": 0.323, "IoU.road": 0.2895, "IoU.rock": 0.1916, "IoU.sheep": 0.0921, "IoU.shelves": 0.0947, "IoU.sidewalk": 0.0989, "IoU.sign": 0.2324, "IoU.sky": 0.6228, "IoU.snow": 0.2739, "IoU.sofa": 0.2951, "IoU.table": 0.2572, "IoU.track": 0.0, "IoU.train": 0.4904, "IoU.tree": 0.3475, "IoU.truck": 0.0657, "IoU.tvmonitor": 0.2761, "IoU.wall": 0.1437, "IoU.water": 0.2975, "IoU.window": 0.1419, "IoU.wood": 0.1112, "Acc.aeroplane": 0.8821, "Acc.bag": 0.0247, "Acc.bed": 0.1724, "Acc.bedclothes": 0.3197, "Acc.bench": 0.2174, "Acc.bicycle": 0.8792, "Acc.bird": 0.8045, "Acc.boat": 0.6723, "Acc.book": 0.0, "Acc.bottle": 0.7377, "Acc.building": 0.1712, "Acc.bus": 0.8505, "Acc.cabinet": 0.2375, "Acc.car": 0.8253, "Acc.cat": 0.7592, "Acc.ceiling": 0.5647, "Acc.chair": 0.2906, "Acc.cloth": 0.0566, "Acc.computer": 0.844, "Acc.cow": 0.5089, "Acc.cup": 0.3013, "Acc.curtain": 0.4864, "Acc.dog": 0.6872, "Acc.door": 0.573, "Acc.fence": 0.5998, "Acc.floor": 0.4752, "Acc.flower": 0.3873, "Acc.food": 0.6532, "Acc.grass": 0.498, "Acc.ground": 0.0693, "Acc.horse": 0.9036, "Acc.keyboard": 0.6012, "Acc.light": 0.087, "Acc.motorbike": 0.7819, "Acc.mountain": 0.4451, "Acc.mouse": 0.0277, "Acc.person": 0.3887, "Acc.plate": 0.001, "Acc.platform": 0.2723, "Acc.pottedplant": 0.7615, "Acc.road": 0.358, "Acc.rock": 0.4573, "Acc.sheep": 0.7823, "Acc.shelves": 0.3599, "Acc.sidewalk": 0.5469, "Acc.sign": 0.4619, "Acc.sky": 0.6542, "Acc.snow": 0.684, "Acc.sofa": 0.6829, "Acc.table": 0.4045, "Acc.track": 0.0, "Acc.train": 0.8347, "Acc.tree": 0.3625, "Acc.truck": 0.191, "Acc.tvmonitor": 0.3194, "Acc.wall": 0.1568, "Acc.water": 0.3296, "Acc.window": 0.3163, "Acc.wood": 0.2683, "Prec.aeroplane": 0.4265, "Prec.bag": 0.1998, "Prec.bed": 0.0514, "Prec.bedclothes": 0.1544, "Prec.bench": 0.046, "Prec.bicycle": 0.5069, "Prec.bird": 0.5233, "Prec.boat": 0.2569, "Prec.book": NaN, "Prec.bottle": 0.644, "Prec.building": 0.823, "Prec.bus": 0.7842, "Prec.cabinet": 0.3948, "Prec.car": 0.7096, "Prec.cat": 0.8388, "Prec.ceiling": 0.4068, "Prec.chair": 0.5684, "Prec.cloth": 0.0435, "Prec.computer": 0.0211, "Prec.cow": 0.5123, "Prec.cup": 0.4328, "Prec.curtain": 0.2047, "Prec.dog": 0.7754, "Prec.door": 0.0808, "Prec.fence": 0.1493, "Prec.floor": 0.563, "Prec.flower": 0.352, "Prec.food": 0.1689, "Prec.grass": 0.8365, "Prec.ground": 0.5807, "Prec.horse": 0.2666, "Prec.keyboard": 0.926, "Prec.light": 0.1392, "Prec.motorbike": 0.6157, "Prec.mountain": 0.2633, "Prec.mouse": 0.0001, "Prec.person": 0.695, "Prec.plate": 0.0088, "Prec.platform": 0.0946, "Prec.pottedplant": 0.3593, "Prec.road": 0.6019, "Prec.rock": 0.248, "Prec.sheep": 0.0946, "Prec.shelves": 0.1139, "Prec.sidewalk": 0.1077, "Prec.sign": 0.3188, "Prec.sky": 0.9284, "Prec.snow": 0.3135, "Prec.sofa": 0.342, "Prec.table": 0.4139, "Prec.track": 0.0, "Prec.train": 0.5431, "Prec.tree": 0.8941, "Prec.truck": 0.091, "Prec.tvmonitor": 0.6703, "Prec.wall": 0.6331, "Prec.water": 0.7536, "Prec.window": 0.2047, "Prec.wood": 0.1596}
