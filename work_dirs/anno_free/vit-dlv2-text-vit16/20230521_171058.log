2023-05-21 17:10:59,033 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /usr/local/cuda
NVCC: Build cuda_11.8.r11.8/compiler.31833905_0
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.9.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.10.0+cu111
OpenCV: 4.7.0
MMCV: 1.4.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMSegmentation: 0.20.2+03c38b7
------------------------------------------------------------

2023-05-21 17:10:59,033 - mmseg - INFO - Distributed training: False
2023-05-21 17:11:00,691 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    pretrained='open-mmlab://resnet101_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='MaskClipPlusTextHead',
        vit=True,
        in_channels=2048,
        channels=512,
        num_classes=59,
        dropout_ratio=0,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
        decode_module_cfg=dict(
            type='ASPPHeadV2', input_transform=None,
            dilations=(6, 12, 18, 24)),
        text_categories=59,
        text_channels=512,
        clip_channels=768,
        text_embeddings_path='pretrain/context_ViT16_clip_text.pth',
        text_features_path='pretrain/context_ViT16_clip_text_features.pth',
        tau=1,
        cls_bg=False,
        norm_feat=False,
        clip_unlabeled_cats=[
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
            36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
            53, 54, 55, 56, 57, 58
        ],
        clip_cfg=dict(
            type='VisionTransformer',
            img_size=(224, 224),
            patch_size=16,
            patch_bias=False,
            in_channels=3,
            embed_dims=768,
            num_layers=12,
            num_heads=12,
            mlp_ratio=4,
            out_indices=-1,
            qkv_bias=True,
            drop_rate=0.0,
            attn_drop_rate=0.0,
            drop_path_rate=0.0,
            with_cls_token=True,
            output_cls_token=False,
            norm_cfg=dict(type='LN', eps=1e-06),
            act_cfg=dict(type='GELU'),
            patch_norm=False,
            pre_norm=True,
            final_norm=True,
            return_qkv=True,
            interpolate_mode='bicubic',
            num_fcs=2,
            norm_eval=False),
        clip_weights_path='pretrain/ViT16_clip_weights.pth',
        reset_counter=True,
        start_clip_guided=(1, -1),
        start_self_train=(-1, -1)),
    feed_img_to_decode_head=True,
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'PascalContextDataset59'
data_root = 'data/VOCdevkit/VOC2010/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
img_scale = (520, 520)
crop_size = (480, 480)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='LoadAnnotations',
        reduce_zero_label=True,
        suppress_labels=[
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
            36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
            53, 54, 55, 56, 57, 58
        ]),
    dict(type='Resize', img_scale=(520, 520), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(480, 480), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(480, 480), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(520, 520),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=8,
    workers_per_gpu=4,
    train=dict(
        type='PascalContextDataset59',
        data_root='data/VOCdevkit/VOC2010/',
        img_dir='JPEGImages',
        ann_dir='SegmentationClassContext',
        split='ImageSets/SegmentationContext/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='LoadAnnotations',
                reduce_zero_label=True,
                suppress_labels=[
                    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
                    17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
                    47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58
                ]),
            dict(type='Resize', img_scale=(520, 520), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(480, 480), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(480, 480), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='PascalContextDataset59',
        data_root='data/VOCdevkit/VOC2010/',
        img_dir='JPEGImages',
        ann_dir='SegmentationClassContext',
        split='ImageSets/SegmentationContext/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(520, 520),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='PascalContextDataset59',
        data_root='data/VOCdevkit/VOC2010/',
        img_dir='JPEGImages',
        ann_dir='SegmentationClassContext',
        split='ImageSets/SegmentationContext/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(520, 520),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.00025)
optimizer_config = dict()
lr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=4000)
checkpoint_config = dict(by_epoch=False, interval=2000)
evaluation = dict(interval=2000, metric='mIoU', pre_eval=True)
suppress_labels = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
    40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58
]
find_unused_parameters = True
work_dir = 'work_dirs/anno_free/vit-dlv2-text-vit16'
gpu_ids = range(0, 1)
auto_resume = False

2023-05-21 17:11:00,692 - mmseg - INFO - Set random seed to 1314192054, deterministic: False
2023-05-21 17:11:09,482 - mmseg - INFO - initialize ResNetV1c with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnet101_v1c'}
2023-05-21 17:11:12,183 - mmseg - INFO - Loaded text embeddings from pretrain/context_ViT16_clip_text.pth
2023-05-21 17:11:12,466 - mmseg - INFO - Loaded clip weights from pretrain/ViT16_clip_weights.pth
Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

decode_head.logit_scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.0.conv.weight - torch.Size([512, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.1.conv.weight - torch.Size([512, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.2.conv.weight - torch.Size([512, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.3.conv.weight - torch.Size([512, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.decode_module.aspp_modules.3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip.cls_token - torch.Size([1, 1, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.pos_embed - torch.Size([1, 197, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.patch_embed.projection.weight - torch.Size([768, 3, 16, 16]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.0.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.1.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.2.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.3.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.4.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.5.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.6.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.7.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.8.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.9.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.10.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.attn.attn.in_proj_weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.attn.attn.in_proj_bias - torch.Size([2304]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.attn.attn.out_proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.attn.attn.out_proj.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.ln2.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.ln2.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.layers.11.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.ln0.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.ln0.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.ln1.weight - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip.ln1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.proj.weight - torch.Size([512, 768, 1, 1]): 
Initialized by user-defined `init_weights` in MaskClipPlusTextHead  

decode_head.clip_model.positional_embedding - torch.Size([77, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.text_projection - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.logit_scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.class_embedding - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.positional_embedding - torch.Size([197, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.proj - torch.Size([768, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.conv1.weight - torch.Size([768, 3, 16, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.ln_pre.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.ln_pre.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.0.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.1.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.2.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.3.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.4.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.5.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.6.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.7.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.8.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.9.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.10.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.attn.in_proj_weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.attn.in_proj_bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.attn.out_proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.attn.out_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.ln_1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.ln_1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.mlp.c_fc.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.mlp.c_fc.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.mlp.c_proj.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.mlp.c_proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.ln_2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.transformer.resblocks.11.ln_2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.ln_post.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.visual.ln_post.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.0.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.1.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.2.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.3.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.4.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.5.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.6.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.7.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.8.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.9.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.10.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.attn.in_proj_weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.attn.in_proj_bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.attn.out_proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.attn.out_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.ln_1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.ln_1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.mlp.c_fc.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.mlp.c_fc.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.mlp.c_proj.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.mlp.c_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.ln_2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.transformer.resblocks.11.ln_2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.token_embedding.weight - torch.Size([49408, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.ln_final.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.clip_model.ln_final.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023-05-21 17:11:12,582 - mmseg - INFO - EncoderDecoder(
  (backbone): ResNetV1c(
    (stem): Sequential(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): _BatchNormXd(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): _BatchNormXd(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
      (6): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace=True)
    )
    (stem_pool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (8): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (9): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (10): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (11): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (12): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (13): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (14): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (15): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (16): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (17): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (18): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (19): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (20): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (21): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (22): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnet101_v1c'}
  (decode_head): MaskClipPlusTextHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss()
    (decode_module): ASPPHeadV2(
      input_transform=None, ignore_index=255, align_corners=False
      (aspp_modules): ASPPModuleV2(
        (0): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (1): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (2): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (3): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
    (clip): VisionTransformer(
      (patch_embed): PatchEmbed(
        (adap_padding): AdaptivePadding()
        (projection): Conv2d(3, 768, kernel_size=(16, 16), stride=(16, 16), bias=False)
      )
      (drop_after_pos): Dropout(p=0.0, inplace=False)
      (layers): ModuleList(
        (0): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (1): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (2): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (3): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (4): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (5): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (6): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (7): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (8): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (9): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (10): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
        (11): TransformerEncoderLayer(
          (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attn): MultiheadAttention(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (proj_drop): Dropout(p=0.0, inplace=False)
            (dropout_layer): DropPath()
          )
          (ln2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (ffn): FFN(
            (activate): GELU()
            (layers): Sequential(
              (0): Sequential(
                (0): Linear(in_features=768, out_features=3072, bias=True)
                (1): GELU()
                (2): Dropout(p=0.0, inplace=False)
              )
              (1): Linear(in_features=3072, out_features=768, bias=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (dropout_layer): DropPath()
          )
        )
      )
      (ln0): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (ln1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
    )
    (proj): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (clip_model): CLIP(
      (visual): VisionTransformer(
        (conv1): Conv2d(3, 768, kernel_size=(16, 16), stride=(16, 16), bias=False)
        (ln_pre): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (transformer): Transformer(
          (resblocks): Sequential(
            (0): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (1): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (2): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (3): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (4): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (5): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (6): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (7): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (8): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (9): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (10): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
            (11): ResidualAttentionBlock(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
              )
              (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (mlp): Sequential(
                (c_fc): Linear(in_features=768, out_features=3072, bias=True)
                (gelu): QuickGELU()
                (c_proj): Linear(in_features=3072, out_features=768, bias=True)
              )
              (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
        (ln_post): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      )
      (transformer): Transformer(
        (resblocks): Sequential(
          (0): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (1): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (2): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (3): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (4): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (5): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (6): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (7): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (8): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (9): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (10): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
          (11): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
)
2023-05-21 17:11:12,670 - mmseg - INFO - Loaded 4996 images
2023-05-21 17:11:14,665 - mmseg - INFO - Loaded 5104 images
2023-05-21 17:11:14,665 - mmseg - INFO - Start running, host: root@workspace-b4viw9u1uynb-0, work_dir: /root/MaskCLIP_SegFormer/work_dirs/anno_free/vit-dlv2-text-vit16
2023-05-21 17:11:14,665 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-05-21 17:11:14,666 - mmseg - INFO - workflow: [('train', 1)], max: 4000 iters
2023-05-21 17:11:14,666 - mmseg - INFO - Checkpoints will be saved to /root/MaskCLIP_SegFormer/work_dirs/anno_free/vit-dlv2-text-vit16 by HardDiskBackend.
2023-05-21 17:11:17,750 - mmseg - INFO - Start clip guided training
2023-05-21 17:12:04,260 - mmseg - INFO - Iter [50/4000]	lr: 4.946e-03, eta: 1:04:29, time: 0.980, data_time: 0.023, memory: 17588, decode.loss_ce: 2.9240, decode.acc_seg: 3.1218, loss: 2.9240
2023-05-21 17:12:49,457 - mmseg - INFO - Iter [100/4000]	lr: 4.891e-03, eta: 1:01:12, time: 0.904, data_time: 0.012, memory: 17588, decode.loss_ce: 2.6912, decode.acc_seg: 11.1110, loss: 2.6912
2023-05-21 17:13:34,456 - mmseg - INFO - Iter [150/4000]	lr: 4.835e-03, eta: 0:59:32, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 2.3224, decode.acc_seg: 18.0000, loss: 2.3224
2023-05-21 17:14:19,455 - mmseg - INFO - Iter [200/4000]	lr: 4.780e-03, eta: 0:58:19, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 2.0175, decode.acc_seg: 21.7387, loss: 2.0175
2023-05-21 17:15:04,457 - mmseg - INFO - Iter [250/4000]	lr: 4.725e-03, eta: 0:57:17, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 2.0393, decode.acc_seg: 24.2668, loss: 2.0393
2023-05-21 17:15:49,456 - mmseg - INFO - Iter [300/4000]	lr: 4.669e-03, eta: 0:56:21, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 1.8944, decode.acc_seg: 25.4205, loss: 1.8944
2023-05-21 17:16:34,457 - mmseg - INFO - Iter [350/4000]	lr: 4.613e-03, eta: 0:55:28, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 1.8314, decode.acc_seg: 26.8467, loss: 1.8314
2023-05-21 17:17:19,456 - mmseg - INFO - Iter [400/4000]	lr: 4.558e-03, eta: 0:54:37, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 1.8599, decode.acc_seg: 26.0045, loss: 1.8599
2023-05-21 17:18:04,457 - mmseg - INFO - Iter [450/4000]	lr: 4.502e-03, eta: 0:53:47, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 1.7983, decode.acc_seg: 26.8668, loss: 1.7983
2023-05-21 17:18:49,457 - mmseg - INFO - Iter [500/4000]	lr: 4.446e-03, eta: 0:52:59, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 1.8257, decode.acc_seg: 28.0228, loss: 1.8257
2023-05-21 17:19:34,455 - mmseg - INFO - Iter [550/4000]	lr: 4.390e-03, eta: 0:52:11, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.8275, decode.acc_seg: 27.7193, loss: 1.8275
2023-05-21 17:20:19,456 - mmseg - INFO - Iter [600/4000]	lr: 4.334e-03, eta: 0:51:23, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.7960, decode.acc_seg: 28.1503, loss: 1.7960
2023-05-21 17:21:06,957 - mmseg - INFO - Iter [650/4000]	lr: 4.278e-03, eta: 0:50:49, time: 0.950, data_time: 0.060, memory: 17588, decode.loss_ce: 1.7150, decode.acc_seg: 29.1465, loss: 1.7150
2023-05-21 17:21:51,956 - mmseg - INFO - Iter [700/4000]	lr: 4.222e-03, eta: 0:50:01, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 1.7142, decode.acc_seg: 30.2130, loss: 1.7142
2023-05-21 17:22:36,956 - mmseg - INFO - Iter [750/4000]	lr: 4.166e-03, eta: 0:49:13, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 1.7424, decode.acc_seg: 29.9702, loss: 1.7424
2023-05-21 17:23:21,956 - mmseg - INFO - Iter [800/4000]	lr: 4.110e-03, eta: 0:48:26, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 1.7389, decode.acc_seg: 29.7255, loss: 1.7389
2023-05-21 17:24:06,956 - mmseg - INFO - Iter [850/4000]	lr: 4.053e-03, eta: 0:47:39, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.7550, decode.acc_seg: 29.4878, loss: 1.7550
2023-05-21 17:24:51,956 - mmseg - INFO - Iter [900/4000]	lr: 3.997e-03, eta: 0:46:52, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.6716, decode.acc_seg: 29.8052, loss: 1.6716
2023-05-21 17:25:36,956 - mmseg - INFO - Iter [950/4000]	lr: 3.940e-03, eta: 0:46:06, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.6825, decode.acc_seg: 29.0958, loss: 1.6825
2023-05-21 17:26:21,957 - mmseg - INFO - Exp name: maskclip_plus_vit16_deeplabv2_r101-d8_class_weight_480x480_4k_pascal_context_59.py
2023-05-21 17:26:21,958 - mmseg - INFO - Iter [1000/4000]	lr: 3.883e-03, eta: 0:45:19, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.7904, decode.acc_seg: 30.8888, loss: 1.7904
2023-05-21 17:27:06,956 - mmseg - INFO - Iter [1050/4000]	lr: 3.827e-03, eta: 0:44:33, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.6827, decode.acc_seg: 30.7837, loss: 1.6827
2023-05-21 17:27:51,955 - mmseg - INFO - Iter [1100/4000]	lr: 3.770e-03, eta: 0:43:47, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.6480, decode.acc_seg: 29.4486, loss: 1.6480
2023-05-21 17:28:36,956 - mmseg - INFO - Iter [1150/4000]	lr: 3.713e-03, eta: 0:43:01, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5811, decode.acc_seg: 29.5132, loss: 1.5811
2023-05-21 17:29:21,955 - mmseg - INFO - Iter [1200/4000]	lr: 3.656e-03, eta: 0:42:15, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.6019, decode.acc_seg: 31.0913, loss: 1.6019
2023-05-21 17:30:09,255 - mmseg - INFO - Iter [1250/4000]	lr: 3.599e-03, eta: 0:41:34, time: 0.946, data_time: 0.060, memory: 17588, decode.loss_ce: 1.6082, decode.acc_seg: 32.4875, loss: 1.6082
2023-05-21 17:30:54,256 - mmseg - INFO - Iter [1300/4000]	lr: 3.541e-03, eta: 0:40:48, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 1.6062, decode.acc_seg: 32.9812, loss: 1.6062
2023-05-21 17:31:39,255 - mmseg - INFO - Iter [1350/4000]	lr: 3.484e-03, eta: 0:40:02, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.6059, decode.acc_seg: 31.5210, loss: 1.6059
2023-05-21 17:32:24,256 - mmseg - INFO - Iter [1400/4000]	lr: 3.426e-03, eta: 0:39:16, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.7110, decode.acc_seg: 31.5329, loss: 1.7110
2023-05-21 17:33:09,256 - mmseg - INFO - Iter [1450/4000]	lr: 3.369e-03, eta: 0:38:30, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.6326, decode.acc_seg: 31.2172, loss: 1.6326
2023-05-21 17:33:54,256 - mmseg - INFO - Iter [1500/4000]	lr: 3.311e-03, eta: 0:37:44, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5503, decode.acc_seg: 31.5000, loss: 1.5503
2023-05-21 17:34:39,255 - mmseg - INFO - Iter [1550/4000]	lr: 3.253e-03, eta: 0:36:59, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5621, decode.acc_seg: 30.8217, loss: 1.5621
2023-05-21 17:35:24,256 - mmseg - INFO - Iter [1600/4000]	lr: 3.195e-03, eta: 0:36:13, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.6393, decode.acc_seg: 31.9315, loss: 1.6393
2023-05-21 17:36:09,256 - mmseg - INFO - Iter [1650/4000]	lr: 3.137e-03, eta: 0:35:27, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5594, decode.acc_seg: 31.7094, loss: 1.5594
2023-05-21 17:36:54,256 - mmseg - INFO - Iter [1700/4000]	lr: 3.079e-03, eta: 0:34:42, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5492, decode.acc_seg: 31.7995, loss: 1.5492
2023-05-21 17:37:39,456 - mmseg - INFO - Iter [1750/4000]	lr: 3.021e-03, eta: 0:33:56, time: 0.904, data_time: 0.015, memory: 17588, decode.loss_ce: 1.6050, decode.acc_seg: 32.5654, loss: 1.6050
2023-05-21 17:38:24,457 - mmseg - INFO - Iter [1800/4000]	lr: 2.962e-03, eta: 0:33:11, time: 0.900, data_time: 0.015, memory: 17588, decode.loss_ce: 1.5671, decode.acc_seg: 32.1482, loss: 1.5671
2023-05-21 17:39:09,455 - mmseg - INFO - Iter [1850/4000]	lr: 2.904e-03, eta: 0:32:25, time: 0.900, data_time: 0.015, memory: 17588, decode.loss_ce: 1.6055, decode.acc_seg: 32.5315, loss: 1.6055
2023-05-21 17:39:56,757 - mmseg - INFO - Iter [1900/4000]	lr: 2.845e-03, eta: 0:31:42, time: 0.946, data_time: 0.060, memory: 17588, decode.loss_ce: 1.5805, decode.acc_seg: 32.0629, loss: 1.5805
2023-05-21 17:40:41,755 - mmseg - INFO - Iter [1950/4000]	lr: 2.786e-03, eta: 0:30:57, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.6417, decode.acc_seg: 32.9689, loss: 1.6417
2023-05-21 17:41:26,752 - mmseg - INFO - Saving checkpoint at 2000 iterations
2023-05-21 17:41:29,143 - mmseg - INFO - Exp name: maskclip_plus_vit16_deeplabv2_r101-d8_class_weight_480x480_4k_pascal_context_59.py
2023-05-21 17:41:29,143 - mmseg - INFO - Iter [2000/4000]	lr: 2.727e-03, eta: 0:30:13, time: 0.948, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5469, decode.acc_seg: 31.3052, loss: 1.5469
2023-05-21 18:04:12,389 - mmseg - INFO - per class results:
2023-05-21 18:04:12,393 - mmseg - INFO - 
+-------------+-------+-------+-------+
|    Class    |  IoU  |  Acc  |  Prec |
+-------------+-------+-------+-------+
|  aeroplane  | 41.63 | 95.94 | 42.38 |
|     bag     |  0.03 |  0.03 | 97.97 |
|     bed     |  8.74 | 35.87 | 10.36 |
|  bedclothes |  8.77 |  9.73 | 47.08 |
|    bench    |  0.0  |  0.0  |  0.0  |
|   bicycle   | 53.24 | 93.72 | 55.21 |
|     bird    | 66.01 | 94.13 | 68.85 |
|     boat    | 35.22 | 86.06 | 37.35 |
|     book    |  0.21 |  0.21 | 100.0 |
|    bottle   | 60.48 | 73.47 | 77.38 |
|   building  | 18.19 | 18.95 | 82.01 |
|     bus     | 77.14 |  94.9 | 80.48 |
|   cabinet   |  8.08 |  20.6 | 11.74 |
|     car     | 68.79 | 90.86 | 73.91 |
|     cat     | 80.25 | 96.62 | 82.57 |
|   ceiling   | 32.05 | 63.25 | 39.38 |
|    chair    | 26.31 | 33.29 | 55.66 |
|    cloth    |  6.13 | 31.86 |  7.05 |
|   computer  |  5.7  | 13.86 |  8.82 |
|     cow     | 69.13 | 88.64 | 75.85 |
|     cup     |  2.92 |  4.11 |  9.17 |
|   curtain   | 26.25 | 30.86 | 63.75 |
|     dog     | 78.95 | 92.24 | 84.57 |
|     door    |  9.36 | 52.41 | 10.22 |
|    fence    | 16.98 | 20.56 | 49.42 |
|    floor    | 43.92 | 58.76 | 63.49 |
|    flower   | 15.36 | 29.77 | 24.08 |
|     food    |  7.62 | 83.32 |  7.74 |
|    grass    | 60.19 | 73.67 | 76.69 |
|    ground   | 23.16 | 41.29 | 34.54 |
|    horse    | 57.85 | 94.28 | 59.95 |
|   keyboard  |  67.1 |  80.0 | 80.62 |
|    light    | 16.25 | 45.46 | 20.18 |
|  motorbike  | 62.13 |  77.3 | 75.99 |
|   mountain  | 34.68 | 53.06 | 50.03 |
|    mouse    |  0.0  |  0.0  |  0.0  |
|    person   | 49.33 | 54.22 | 84.53 |
|    plate    |  0.07 |  0.08 |  0.47 |
|   platform  |  0.0  |  0.0  |  nan  |
| pottedplant | 37.54 | 77.19 | 42.22 |
|     road    | 41.46 |  63.9 | 54.15 |
|     rock    | 29.87 | 59.27 | 37.58 |
|    sheep    | 70.57 | 87.88 | 78.17 |
|   shelves   |  0.55 |  0.56 | 27.41 |
|   sidewalk  | 10.68 | 63.86 | 11.36 |
|     sign    | 22.93 | 29.99 | 49.34 |
|     sky     |  58.4 | 59.76 | 96.24 |
|     snow    | 46.48 |  57.0 | 71.57 |
|     sofa    |  35.9 | 45.87 | 62.29 |
|    table    | 15.71 | 44.67 | 19.51 |
|    track    |  0.0  |  0.0  |  0.0  |
|    train    | 45.53 | 91.17 | 47.63 |
|     tree    | 46.93 | 52.39 | 81.81 |
|    truck    |  9.38 | 16.81 | 17.49 |
|  tvmonitor  | 51.58 | 62.42 | 74.82 |
|     wall    | 34.18 | 42.21 | 64.24 |
|    water    | 63.52 | 69.65 | 87.84 |
|    window   | 16.76 | 20.48 | 47.97 |
|     wood    |  6.24 | 39.97 |  6.89 |
+-------------+-------+-------+-------+
2023-05-21 18:04:12,393 - mmseg - INFO - Summary:
2023-05-21 18:04:12,393 - mmseg - INFO - 
+-------+-------+-------+-------+
|  aAcc |  mIoU |  mAcc | mPrec |
+-------+-------+-------+-------+
| 57.28 | 31.91 | 49.47 | 48.76 |
+-------+-------+-------+-------+
2023-05-21 18:04:12,403 - mmseg - INFO - Exp name: maskclip_plus_vit16_deeplabv2_r101-d8_class_weight_480x480_4k_pascal_context_59.py
2023-05-21 18:04:12,404 - mmseg - INFO - Iter(val) [5104]	aAcc: 0.5728, mIoU: 0.3191, mAcc: 0.4947, mPrec: 0.4876, IoU.aeroplane: 0.4163, IoU.bag: 0.0003, IoU.bed: 0.0874, IoU.bedclothes: 0.0877, IoU.bench: 0.0000, IoU.bicycle: 0.5324, IoU.bird: 0.6601, IoU.boat: 0.3522, IoU.book: 0.0021, IoU.bottle: 0.6048, IoU.building: 0.1819, IoU.bus: 0.7714, IoU.cabinet: 0.0808, IoU.car: 0.6879, IoU.cat: 0.8025, IoU.ceiling: 0.3205, IoU.chair: 0.2631, IoU.cloth: 0.0613, IoU.computer: 0.0570, IoU.cow: 0.6913, IoU.cup: 0.0292, IoU.curtain: 0.2625, IoU.dog: 0.7895, IoU.door: 0.0936, IoU.fence: 0.1698, IoU.floor: 0.4392, IoU.flower: 0.1536, IoU.food: 0.0762, IoU.grass: 0.6019, IoU.ground: 0.2316, IoU.horse: 0.5785, IoU.keyboard: 0.6710, IoU.light: 0.1625, IoU.motorbike: 0.6213, IoU.mountain: 0.3468, IoU.mouse: 0.0000, IoU.person: 0.4933, IoU.plate: 0.0007, IoU.platform: 0.0000, IoU.pottedplant: 0.3754, IoU.road: 0.4146, IoU.rock: 0.2987, IoU.sheep: 0.7057, IoU.shelves: 0.0055, IoU.sidewalk: 0.1068, IoU.sign: 0.2293, IoU.sky: 0.5840, IoU.snow: 0.4648, IoU.sofa: 0.3590, IoU.table: 0.1571, IoU.track: 0.0000, IoU.train: 0.4553, IoU.tree: 0.4693, IoU.truck: 0.0938, IoU.tvmonitor: 0.5158, IoU.wall: 0.3418, IoU.water: 0.6352, IoU.window: 0.1676, IoU.wood: 0.0624, Acc.aeroplane: 0.9594, Acc.bag: 0.0003, Acc.bed: 0.3587, Acc.bedclothes: 0.0973, Acc.bench: 0.0000, Acc.bicycle: 0.9372, Acc.bird: 0.9413, Acc.boat: 0.8606, Acc.book: 0.0021, Acc.bottle: 0.7347, Acc.building: 0.1895, Acc.bus: 0.9490, Acc.cabinet: 0.2060, Acc.car: 0.9086, Acc.cat: 0.9662, Acc.ceiling: 0.6325, Acc.chair: 0.3329, Acc.cloth: 0.3186, Acc.computer: 0.1386, Acc.cow: 0.8864, Acc.cup: 0.0411, Acc.curtain: 0.3086, Acc.dog: 0.9224, Acc.door: 0.5241, Acc.fence: 0.2056, Acc.floor: 0.5876, Acc.flower: 0.2977, Acc.food: 0.8332, Acc.grass: 0.7367, Acc.ground: 0.4129, Acc.horse: 0.9428, Acc.keyboard: 0.8000, Acc.light: 0.4546, Acc.motorbike: 0.7730, Acc.mountain: 0.5306, Acc.mouse: 0.0000, Acc.person: 0.5422, Acc.plate: 0.0008, Acc.platform: 0.0000, Acc.pottedplant: 0.7719, Acc.road: 0.6390, Acc.rock: 0.5927, Acc.sheep: 0.8788, Acc.shelves: 0.0056, Acc.sidewalk: 0.6386, Acc.sign: 0.2999, Acc.sky: 0.5976, Acc.snow: 0.5700, Acc.sofa: 0.4587, Acc.table: 0.4467, Acc.track: 0.0000, Acc.train: 0.9117, Acc.tree: 0.5239, Acc.truck: 0.1681, Acc.tvmonitor: 0.6242, Acc.wall: 0.4221, Acc.water: 0.6965, Acc.window: 0.2048, Acc.wood: 0.3997, Prec.aeroplane: 0.4238, Prec.bag: 0.9797, Prec.bed: 0.1036, Prec.bedclothes: 0.4708, Prec.bench: 0.0000, Prec.bicycle: 0.5521, Prec.bird: 0.6885, Prec.boat: 0.3735, Prec.book: 1.0000, Prec.bottle: 0.7738, Prec.building: 0.8201, Prec.bus: 0.8048, Prec.cabinet: 0.1174, Prec.car: 0.7391, Prec.cat: 0.8257, Prec.ceiling: 0.3938, Prec.chair: 0.5566, Prec.cloth: 0.0705, Prec.computer: 0.0882, Prec.cow: 0.7585, Prec.cup: 0.0917, Prec.curtain: 0.6375, Prec.dog: 0.8457, Prec.door: 0.1022, Prec.fence: 0.4942, Prec.floor: 0.6349, Prec.flower: 0.2408, Prec.food: 0.0774, Prec.grass: 0.7669, Prec.ground: 0.3454, Prec.horse: 0.5995, Prec.keyboard: 0.8062, Prec.light: 0.2018, Prec.motorbike: 0.7599, Prec.mountain: 0.5003, Prec.mouse: 0.0000, Prec.person: 0.8453, Prec.plate: 0.0047, Prec.platform: nan, Prec.pottedplant: 0.4222, Prec.road: 0.5415, Prec.rock: 0.3758, Prec.sheep: 0.7817, Prec.shelves: 0.2741, Prec.sidewalk: 0.1136, Prec.sign: 0.4934, Prec.sky: 0.9624, Prec.snow: 0.7157, Prec.sofa: 0.6229, Prec.table: 0.1951, Prec.track: 0.0000, Prec.train: 0.4763, Prec.tree: 0.8181, Prec.truck: 0.1749, Prec.tvmonitor: 0.7482, Prec.wall: 0.6424, Prec.water: 0.8784, Prec.window: 0.4797, Prec.wood: 0.0689
2023-05-21 18:04:57,657 - mmseg - INFO - Iter [2050/4000]	lr: 2.668e-03, eta: 0:51:05, time: 28.170, data_time: 27.277, memory: 17588, decode.loss_ce: 1.5697, decode.acc_seg: 33.2108, loss: 1.5697
2023-05-21 18:05:42,656 - mmseg - INFO - Iter [2100/4000]	lr: 2.609e-03, eta: 0:49:16, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 1.5222, decode.acc_seg: 32.9651, loss: 1.5222
2023-05-21 18:06:27,656 - mmseg - INFO - Iter [2150/4000]	lr: 2.549e-03, eta: 0:47:30, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 1.5192, decode.acc_seg: 32.8351, loss: 1.5192
2023-05-21 18:07:12,656 - mmseg - INFO - Iter [2200/4000]	lr: 2.489e-03, eta: 0:45:46, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 1.5329, decode.acc_seg: 32.9245, loss: 1.5329
2023-05-21 18:07:57,656 - mmseg - INFO - Iter [2250/4000]	lr: 2.430e-03, eta: 0:44:06, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 1.5295, decode.acc_seg: 33.3245, loss: 1.5295
2023-05-21 18:08:42,656 - mmseg - INFO - Iter [2300/4000]	lr: 2.370e-03, eta: 0:42:28, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 1.5245, decode.acc_seg: 33.5919, loss: 1.5245
2023-05-21 18:09:27,756 - mmseg - INFO - Iter [2350/4000]	lr: 2.310e-03, eta: 0:40:52, time: 0.902, data_time: 0.014, memory: 17588, decode.loss_ce: 1.6133, decode.acc_seg: 33.9009, loss: 1.6133
2023-05-21 18:10:12,755 - mmseg - INFO - Iter [2400/4000]	lr: 2.249e-03, eta: 0:39:18, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5287, decode.acc_seg: 31.6676, loss: 1.5287
2023-05-21 18:10:57,755 - mmseg - INFO - Iter [2450/4000]	lr: 2.189e-03, eta: 0:37:46, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.4991, decode.acc_seg: 32.9775, loss: 1.4991
2023-05-21 18:11:45,055 - mmseg - INFO - Iter [2500/4000]	lr: 2.128e-03, eta: 0:36:17, time: 0.946, data_time: 0.059, memory: 17588, decode.loss_ce: 1.5557, decode.acc_seg: 32.7676, loss: 1.5557
2023-05-21 18:12:30,055 - mmseg - INFO - Iter [2550/4000]	lr: 2.067e-03, eta: 0:34:49, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 1.5126, decode.acc_seg: 33.8331, loss: 1.5126
2023-05-21 18:13:15,056 - mmseg - INFO - Iter [2600/4000]	lr: 2.006e-03, eta: 0:33:22, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 1.5346, decode.acc_seg: 33.7121, loss: 1.5346
2023-05-21 18:14:00,055 - mmseg - INFO - Iter [2650/4000]	lr: 1.945e-03, eta: 0:31:57, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 1.5325, decode.acc_seg: 34.0488, loss: 1.5325
2023-05-21 18:14:45,056 - mmseg - INFO - Iter [2700/4000]	lr: 1.883e-03, eta: 0:30:34, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5009, decode.acc_seg: 34.2911, loss: 1.5009
2023-05-21 18:15:30,055 - mmseg - INFO - Iter [2750/4000]	lr: 1.821e-03, eta: 0:29:12, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5032, decode.acc_seg: 33.5577, loss: 1.5032
2023-05-21 18:16:15,055 - mmseg - INFO - Iter [2800/4000]	lr: 1.759e-03, eta: 0:27:51, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.4389, decode.acc_seg: 32.4884, loss: 1.4389
2023-05-21 18:17:00,056 - mmseg - INFO - Iter [2850/4000]	lr: 1.697e-03, eta: 0:26:31, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.4768, decode.acc_seg: 33.7953, loss: 1.4768
2023-05-21 18:17:45,055 - mmseg - INFO - Iter [2900/4000]	lr: 1.634e-03, eta: 0:25:13, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5591, decode.acc_seg: 33.4687, loss: 1.5591
2023-05-21 18:18:30,056 - mmseg - INFO - Iter [2950/4000]	lr: 1.572e-03, eta: 0:23:56, time: 0.900, data_time: 0.015, memory: 17588, decode.loss_ce: 1.5220, decode.acc_seg: 35.1307, loss: 1.5220
2023-05-21 18:19:15,057 - mmseg - INFO - Exp name: maskclip_plus_vit16_deeplabv2_r101-d8_class_weight_480x480_4k_pascal_context_59.py
2023-05-21 18:19:15,057 - mmseg - INFO - Iter [3000/4000]	lr: 1.508e-03, eta: 0:22:39, time: 0.900, data_time: 0.015, memory: 17588, decode.loss_ce: 1.5283, decode.acc_seg: 34.3568, loss: 1.5283
2023-05-21 18:20:00,056 - mmseg - INFO - Iter [3050/4000]	lr: 1.445e-03, eta: 0:21:24, time: 0.900, data_time: 0.015, memory: 17588, decode.loss_ce: 1.4890, decode.acc_seg: 31.6666, loss: 1.4890
2023-05-21 18:20:45,058 - mmseg - INFO - Iter [3100/4000]	lr: 1.381e-03, eta: 0:20:10, time: 0.900, data_time: 0.015, memory: 17588, decode.loss_ce: 1.5865, decode.acc_seg: 32.9154, loss: 1.5865
2023-05-21 18:21:32,356 - mmseg - INFO - Iter [3150/4000]	lr: 1.317e-03, eta: 0:18:57, time: 0.946, data_time: 0.060, memory: 17588, decode.loss_ce: 1.4583, decode.acc_seg: 32.5826, loss: 1.4583
2023-05-21 18:22:17,356 - mmseg - INFO - Iter [3200/4000]	lr: 1.252e-03, eta: 0:17:45, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 1.5021, decode.acc_seg: 33.9058, loss: 1.5021
2023-05-21 18:23:02,357 - mmseg - INFO - Iter [3250/4000]	lr: 1.187e-03, eta: 0:16:33, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5134, decode.acc_seg: 33.1415, loss: 1.5134
2023-05-21 18:23:47,356 - mmseg - INFO - Iter [3300/4000]	lr: 1.122e-03, eta: 0:15:23, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.4952, decode.acc_seg: 33.1014, loss: 1.4952
2023-05-21 18:24:32,456 - mmseg - INFO - Iter [3350/4000]	lr: 1.056e-03, eta: 0:14:13, time: 0.902, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5288, decode.acc_seg: 35.0254, loss: 1.5288
2023-05-21 18:25:17,456 - mmseg - INFO - Iter [3400/4000]	lr: 9.899e-04, eta: 0:13:03, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.4520, decode.acc_seg: 33.4179, loss: 1.4520
2023-05-21 18:26:02,455 - mmseg - INFO - Iter [3450/4000]	lr: 9.230e-04, eta: 0:11:55, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5140, decode.acc_seg: 31.6245, loss: 1.5140
2023-05-21 18:26:47,456 - mmseg - INFO - Iter [3500/4000]	lr: 8.554e-04, eta: 0:10:47, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5142, decode.acc_seg: 34.2137, loss: 1.5142
2023-05-21 18:27:32,457 - mmseg - INFO - Iter [3550/4000]	lr: 7.872e-04, eta: 0:09:40, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5144, decode.acc_seg: 35.1448, loss: 1.5144
2023-05-21 18:28:17,456 - mmseg - INFO - Iter [3600/4000]	lr: 7.183e-04, eta: 0:08:33, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5437, decode.acc_seg: 35.2831, loss: 1.5437
2023-05-21 18:29:02,456 - mmseg - INFO - Iter [3650/4000]	lr: 6.484e-04, eta: 0:07:27, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.4527, decode.acc_seg: 34.1664, loss: 1.4527
2023-05-21 18:29:47,455 - mmseg - INFO - Iter [3700/4000]	lr: 5.776e-04, eta: 0:06:22, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5091, decode.acc_seg: 33.7279, loss: 1.5091
2023-05-21 18:30:34,755 - mmseg - INFO - Iter [3750/4000]	lr: 5.056e-04, eta: 0:05:17, time: 0.946, data_time: 0.060, memory: 17588, decode.loss_ce: 1.4501, decode.acc_seg: 33.7972, loss: 1.4501
2023-05-21 18:31:19,756 - mmseg - INFO - Iter [3800/4000]	lr: 4.321e-04, eta: 0:04:12, time: 0.900, data_time: 0.013, memory: 17588, decode.loss_ce: 1.5154, decode.acc_seg: 34.3439, loss: 1.5154
2023-05-21 18:32:04,754 - mmseg - INFO - Iter [3850/4000]	lr: 3.567e-04, eta: 0:03:08, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5264, decode.acc_seg: 34.9447, loss: 1.5264
2023-05-21 18:32:49,756 - mmseg - INFO - Iter [3900/4000]	lr: 2.787e-04, eta: 0:02:05, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5536, decode.acc_seg: 34.1221, loss: 1.5536
2023-05-21 18:33:34,755 - mmseg - INFO - Iter [3950/4000]	lr: 1.966e-04, eta: 0:01:02, time: 0.900, data_time: 0.014, memory: 17588, decode.loss_ce: 1.4351, decode.acc_seg: 34.2843, loss: 1.4351
2023-05-21 18:34:19,752 - mmseg - INFO - Saving checkpoint at 4000 iterations
2023-05-21 18:34:22,098 - mmseg - INFO - Exp name: maskclip_plus_vit16_deeplabv2_r101-d8_class_weight_480x480_4k_pascal_context_59.py
2023-05-21 18:34:22,098 - mmseg - INFO - Iter [4000/4000]	lr: 1.028e-04, eta: 0:00:00, time: 0.947, data_time: 0.014, memory: 17588, decode.loss_ce: 1.5174, decode.acc_seg: 33.9175, loss: 1.5174
2023-05-21 18:55:49,283 - mmseg - INFO - per class results:
2023-05-21 18:55:49,286 - mmseg - INFO - 
+-------------+-------+-------+-------+
|    Class    |  IoU  |  Acc  |  Prec |
+-------------+-------+-------+-------+
|  aeroplane  | 39.38 | 96.56 | 39.94 |
|     bag     |  0.19 |  0.19 | 44.58 |
|     bed     |  8.32 |  35.6 |  9.79 |
|  bedclothes |  9.7  | 10.77 | 49.41 |
|    bench    |  0.0  |  0.0  |  0.0  |
|   bicycle   |  55.8 | 91.15 |  59.0 |
|     bird    | 65.19 | 95.76 | 67.13 |
|     boat    | 35.45 | 86.81 | 37.46 |
|     book    |  1.75 |  1.75 | 89.99 |
|    bottle   | 58.63 | 74.41 | 73.45 |
|   building  | 15.67 | 16.12 |  84.8 |
|     bus     |  77.2 | 91.81 | 82.91 |
|   cabinet   |  9.32 | 24.99 | 12.94 |
|     car     | 67.92 | 89.39 | 73.87 |
|     cat     | 81.38 | 95.64 | 84.51 |
|   ceiling   | 31.82 | 70.96 | 36.58 |
|    chair    | 29.16 | 39.76 | 52.25 |
|    cloth    |  5.92 | 32.56 |  6.74 |
|   computer  |  5.68 | 17.57 |  7.74 |
|     cow     | 71.12 | 90.66 | 76.74 |
|     cup     |  3.65 |  6.6  |  7.55 |
|   curtain   | 29.23 | 36.82 | 58.63 |
|     dog     | 79.03 | 91.64 | 85.18 |
|     door    |  9.97 | 51.04 | 11.02 |
|    fence    | 18.84 | 22.11 | 56.05 |
|    floor    | 48.27 | 66.53 | 63.76 |
|    flower   | 16.85 | 39.25 | 22.79 |
|     food    |  7.3  | 84.54 |  7.4  |
|    grass    | 62.17 | 73.09 | 80.62 |
|    ground   | 24.36 | 42.15 |  36.6 |
|    horse    | 62.22 | 94.93 | 64.36 |
|   keyboard  | 63.51 | 88.16 | 69.43 |
|    light    | 14.18 | 58.53 | 15.76 |
|  motorbike  | 63.26 | 85.27 | 71.02 |
|   mountain  |  33.9 | 52.14 | 49.21 |
|    mouse    |  0.0  |  0.0  |  0.0  |
|    person   |  47.1 | 52.38 | 82.37 |
|    plate    |  0.33 |  0.43 |  1.36 |
|   platform  |  0.0  |  0.0  |  0.0  |
| pottedplant | 33.26 | 74.89 | 37.44 |
|     road    | 41.41 | 59.84 | 57.35 |
|     rock    | 29.58 | 61.52 | 36.29 |
|    sheep    | 71.03 | 89.13 | 77.77 |
|   shelves   |  5.25 |  5.81 |  35.0 |
|   sidewalk  |  12.3 | 61.83 | 13.31 |
|     sign    | 24.99 | 41.11 | 38.93 |
|     sky     | 57.11 | 58.31 | 96.54 |
|     snow    | 49.22 | 60.56 | 72.43 |
|     sofa    | 37.84 | 48.14 | 63.89 |
|    table    | 15.87 | 46.38 | 19.44 |
|    track    |  0.0  |  0.0  |  0.0  |
|    train    | 45.71 | 91.18 | 47.82 |
|     tree    | 49.87 |  55.4 | 83.33 |
|    truck    | 10.88 | 28.98 | 14.84 |
|  tvmonitor  | 47.32 | 58.01 | 71.97 |
|     wall    | 34.05 | 42.75 |  62.6 |
|    water    | 66.52 | 72.95 |  88.3 |
|    window   | 19.06 | 23.76 | 49.04 |
|     wood    |  7.58 | 37.98 |  8.65 |
+-------------+-------+-------+-------+
2023-05-21 18:55:49,286 - mmseg - INFO - Summary:
2023-05-21 18:55:49,286 - mmseg - INFO - 
+-------+-------+------+-------+
|  aAcc |  mIoU | mAcc | mPrec |
+-------+-------+------+-------+
| 57.68 | 32.42 | 51.3 | 46.57 |
+-------+-------+------+-------+
2023-05-21 18:55:49,296 - mmseg - INFO - Exp name: maskclip_plus_vit16_deeplabv2_r101-d8_class_weight_480x480_4k_pascal_context_59.py
2023-05-21 18:55:49,296 - mmseg - INFO - Iter(val) [5104]	aAcc: 0.5768, mIoU: 0.3242, mAcc: 0.5130, mPrec: 0.4657, IoU.aeroplane: 0.3938, IoU.bag: 0.0019, IoU.bed: 0.0832, IoU.bedclothes: 0.0970, IoU.bench: 0.0000, IoU.bicycle: 0.5580, IoU.bird: 0.6519, IoU.boat: 0.3545, IoU.book: 0.0175, IoU.bottle: 0.5863, IoU.building: 0.1567, IoU.bus: 0.7720, IoU.cabinet: 0.0932, IoU.car: 0.6792, IoU.cat: 0.8138, IoU.ceiling: 0.3182, IoU.chair: 0.2916, IoU.cloth: 0.0592, IoU.computer: 0.0568, IoU.cow: 0.7112, IoU.cup: 0.0365, IoU.curtain: 0.2923, IoU.dog: 0.7903, IoU.door: 0.0997, IoU.fence: 0.1884, IoU.floor: 0.4827, IoU.flower: 0.1685, IoU.food: 0.0730, IoU.grass: 0.6217, IoU.ground: 0.2436, IoU.horse: 0.6222, IoU.keyboard: 0.6351, IoU.light: 0.1418, IoU.motorbike: 0.6326, IoU.mountain: 0.3390, IoU.mouse: 0.0000, IoU.person: 0.4710, IoU.plate: 0.0033, IoU.platform: 0.0000, IoU.pottedplant: 0.3326, IoU.road: 0.4141, IoU.rock: 0.2958, IoU.sheep: 0.7103, IoU.shelves: 0.0525, IoU.sidewalk: 0.1230, IoU.sign: 0.2499, IoU.sky: 0.5711, IoU.snow: 0.4922, IoU.sofa: 0.3784, IoU.table: 0.1587, IoU.track: 0.0000, IoU.train: 0.4571, IoU.tree: 0.4987, IoU.truck: 0.1088, IoU.tvmonitor: 0.4732, IoU.wall: 0.3405, IoU.water: 0.6652, IoU.window: 0.1906, IoU.wood: 0.0758, Acc.aeroplane: 0.9656, Acc.bag: 0.0019, Acc.bed: 0.3560, Acc.bedclothes: 0.1077, Acc.bench: 0.0000, Acc.bicycle: 0.9115, Acc.bird: 0.9576, Acc.boat: 0.8681, Acc.book: 0.0175, Acc.bottle: 0.7441, Acc.building: 0.1612, Acc.bus: 0.9181, Acc.cabinet: 0.2499, Acc.car: 0.8939, Acc.cat: 0.9564, Acc.ceiling: 0.7096, Acc.chair: 0.3976, Acc.cloth: 0.3256, Acc.computer: 0.1757, Acc.cow: 0.9066, Acc.cup: 0.0660, Acc.curtain: 0.3682, Acc.dog: 0.9164, Acc.door: 0.5104, Acc.fence: 0.2211, Acc.floor: 0.6653, Acc.flower: 0.3925, Acc.food: 0.8454, Acc.grass: 0.7309, Acc.ground: 0.4215, Acc.horse: 0.9493, Acc.keyboard: 0.8816, Acc.light: 0.5853, Acc.motorbike: 0.8527, Acc.mountain: 0.5214, Acc.mouse: 0.0000, Acc.person: 0.5238, Acc.plate: 0.0043, Acc.platform: 0.0000, Acc.pottedplant: 0.7489, Acc.road: 0.5984, Acc.rock: 0.6152, Acc.sheep: 0.8913, Acc.shelves: 0.0581, Acc.sidewalk: 0.6183, Acc.sign: 0.4111, Acc.sky: 0.5831, Acc.snow: 0.6056, Acc.sofa: 0.4814, Acc.table: 0.4638, Acc.track: 0.0000, Acc.train: 0.9118, Acc.tree: 0.5540, Acc.truck: 0.2898, Acc.tvmonitor: 0.5801, Acc.wall: 0.4275, Acc.water: 0.7295, Acc.window: 0.2376, Acc.wood: 0.3798, Prec.aeroplane: 0.3994, Prec.bag: 0.4458, Prec.bed: 0.0979, Prec.bedclothes: 0.4941, Prec.bench: 0.0000, Prec.bicycle: 0.5900, Prec.bird: 0.6713, Prec.boat: 0.3746, Prec.book: 0.8999, Prec.bottle: 0.7345, Prec.building: 0.8480, Prec.bus: 0.8291, Prec.cabinet: 0.1294, Prec.car: 0.7387, Prec.cat: 0.8451, Prec.ceiling: 0.3658, Prec.chair: 0.5225, Prec.cloth: 0.0674, Prec.computer: 0.0774, Prec.cow: 0.7674, Prec.cup: 0.0755, Prec.curtain: 0.5863, Prec.dog: 0.8518, Prec.door: 0.1102, Prec.fence: 0.5605, Prec.floor: 0.6376, Prec.flower: 0.2279, Prec.food: 0.0740, Prec.grass: 0.8062, Prec.ground: 0.3660, Prec.horse: 0.6436, Prec.keyboard: 0.6943, Prec.light: 0.1576, Prec.motorbike: 0.7102, Prec.mountain: 0.4921, Prec.mouse: 0.0000, Prec.person: 0.8237, Prec.plate: 0.0136, Prec.platform: 0.0000, Prec.pottedplant: 0.3744, Prec.road: 0.5735, Prec.rock: 0.3629, Prec.sheep: 0.7777, Prec.shelves: 0.3500, Prec.sidewalk: 0.1331, Prec.sign: 0.3893, Prec.sky: 0.9654, Prec.snow: 0.7243, Prec.sofa: 0.6389, Prec.table: 0.1944, Prec.track: 0.0000, Prec.train: 0.4782, Prec.tree: 0.8333, Prec.truck: 0.1484, Prec.tvmonitor: 0.7197, Prec.wall: 0.6260, Prec.water: 0.8830, Prec.window: 0.4904, Prec.wood: 0.0865
